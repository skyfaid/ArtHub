let e,t,n,r,i,s,a,o,l,c,u,d,p,h,f,_,m,g,y,S,b,v,E,T;function w(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var k,x,I,C,R,N,A,D,O,B,U,M,L,G,P=globalThis;function Y(e){return e&&e.__esModule?e.default:e}var F={},j={},z=P.parcelRequired932;null==z&&((z=function(e){if(e in F)return F[e].exports;if(e in j){var t=j[e];delete j[e];var n={id:e,exports:{}};return F[e]=n,t.call(n.exports,n,n.exports),n.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){j[e]=t},P.parcelRequired932=z);var W=z.register;W("lVAot",function(e,t){w(e.exports,"dateTimestampInSeconds",()=>l),w(e.exports,"timestampInSeconds",()=>c),w(e.exports,"browserPerformanceTimeOrigin",()=>u);var n=z("99DMr"),r=z("3dCyu");// eslint-disable-next-line deprecation/deprecation
let i=(0,r.getGlobalObject)(),s={nowSeconds:()=>Date.now()/1e3},a=(0,n.isNodeEnv)()?/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */function(){try{let t=(0,n.dynamicRequire)(e,"perf_hooks");return t.performance}catch(e){return}}():/**
 * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}
 * for accessing a high-resolution monotonic clock.
 *//**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */function(){let{performance:e}=i;if(!e||!e.now)return;// Replace performance.timeOrigin with our own timeOrigin based on Date.now().
//
// This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
// performance.now() gives a date arbitrarily in the past.
//
// Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
// undefined.
//
// The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
// interact with data coming out of performance entries.
//
// Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
// might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
// performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
// observed skews that can be as long as days, weeks or months.
//
// See https://github.com/getsentry/sentry-javascript/issues/2590.
//
// BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
// transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
// transactions of long-lived web pages.
let t=Date.now()-e.now();return{now:()=>e.now(),timeOrigin:t}}(),o=void 0===a?s:{nowSeconds:()=>(a.timeOrigin+a.now())/1e3},l=s.nowSeconds.bind(s),c=o.nowSeconds.bind(o),u=(()=>{// Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
// performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
// data as reliable if they are within a reasonable threshold of the current time.
let{performance:e}=i;if(!e||!e.now)return;let t=e.now(),n=Date.now(),r=e.timeOrigin?Math.abs(e.timeOrigin+t-n):36e5,s=e.timing&&e.timing.navigationStart,a="number"==typeof s?Math.abs(s+t-n):36e5;return r<36e5||a<36e5?// Use the more reliable time origin
r<=a?e.timeOrigin:s:n})()}),W("99DMr",function(e,t){w(e.exports,"isNodeEnv",()=>i),w(e.exports,"dynamicRequire",()=>s);var n=z("kiOPQ"),r=z("etb2O");/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 *//**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */function i(){// explicitly check for browser bundles as those can be optimized statically
// by terser/rollup.
return!(0,n.isBrowserBundle)()&&"[object process]"===Object.prototype.toString.call(void 0!==r?r:0)}/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function s(e,t){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return e.require(t)}}),W("kiOPQ",function(e,t){/*
 * This module exists for optimizations in the build process through rollup and terser.  We define some global
 * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these
 * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will
 * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to
 * `logger` and preventing node-related code from appearing in browser bundles.
 *
 * Attention:
 * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by
 * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)
 * having issues tree-shaking these constants across package boundaries.
 * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want
 * users to be able to shake away expressions that it guards.
 *//**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */function n(){return"undefined"!=typeof __SENTRY_BROWSER_BUNDLE__&&!!__SENTRY_BROWSER_BUNDLE__}/**
 * Get source of SDK.
 */function r(){// @ts-expect-error "npm" is injected by rollup during build process
return"npm"}w(e.exports,"isBrowserBundle",()=>n),w(e.exports,"getSDKSource",()=>r)}),W("etb2O",function(e,t){// shim for using process in browser
var n,r,i,s=e.exports={};function a(){throw Error("setTimeout has not been defined")}function o(){throw Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);// if setTimeout wasn't available but was latter defined
if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{// when when somebody has screwed with setTimeout but no I.E. maddness
return n(e,0)}catch(t){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return n.call(null,e,0)}catch(t){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var c=[],u=!1,d=-1;function p(){u&&i&&(u=!1,i.length?c=i.concat(c):d=-1,c.length&&h())}function h(){if(!u){var e=l(p);u=!0;for(var t=c.length;t;){for(i=c,c=[];++d<t;)i&&i[d].run();d=-1,t=c.length}i=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);// if clearTimeout wasn't available but was latter defined
if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{// when when somebody has screwed with setTimeout but no I.E. maddness
r(e)}catch(t){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return r.call(null,e)}catch(t){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return r.call(this,e)}}}(e)}}// v8 likes predictible objects
function f(e,t){this.fun=e,this.array=t}function _(){}s.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||l(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=_,s.addListener=_,s.once=_,s.off=_,s.removeListener=_,s.removeAllListeners=_,s.emit=_,s.prependListener=_,s.prependOnceListener=_,s.listeners=function(e){return[]},s.binding=function(e){throw Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw Error("process.chdir is not supported")},s.umask=function(){return 0}}),W("3dCyu",function(e,t){/** Internal global with common properties and Sentry extensions  */// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification
// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js
// core-js has the following licence:
//
// Copyright (c) 2014-2022 Denis Pushkarev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/** Returns 'obj' if it's the global object, otherwise returns undefined */function n(e){return e&&e.Math==Math?e:void 0}w(e.exports,"GLOBAL_OBJ",()=>r),w(e.exports,"getGlobalObject",()=>i),w(e.exports,"getGlobalSingleton",()=>s);/** Get's the global object for the current JavaScript runtime */let r="object"==typeof globalThis&&n(globalThis)||// eslint-disable-next-line no-restricted-globals
"object"==typeof window&&n(window)||"object"==typeof self&&n(self)||"object"==typeof P&&n(P)||function(){return this}()||{};/**
 * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8
 */function i(){return r}/**
 * Returns a global singleton contained in the global `__SENTRY__` object.
 *
 * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory
 * function and added to the `__SENTRY__` object.
 *
 * @param name name of the global singleton on __SENTRY__
 * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`
 * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value
 * @returns the singleton
 */function s(e,t,n){let i=n||r,s=i.__SENTRY__=i.__SENTRY__||{},a=s[e]||(s[e]=t());return a}}),W("3hXCz",function(e,t){w(e.exports,"dateTimestampInSeconds",()=>l),w(e.exports,"timestampInSeconds",()=>c),w(e.exports,"browserPerformanceTimeOrigin",()=>u);var n=z("h2FeK"),r=z("5OM0g");// eslint-disable-next-line deprecation/deprecation
let i=(0,r.getGlobalObject)(),s={nowSeconds:()=>Date.now()/1e3},a=(0,n.isNodeEnv)()?/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */function(){try{let t=(0,n.dynamicRequire)(e,"perf_hooks");return t.performance}catch(e){return}}():/**
 * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}
 * for accessing a high-resolution monotonic clock.
 *//**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */function(){let{performance:e}=i;if(!e||!e.now)return;// Replace performance.timeOrigin with our own timeOrigin based on Date.now().
//
// This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
// performance.now() gives a date arbitrarily in the past.
//
// Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
// undefined.
//
// The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
// interact with data coming out of performance entries.
//
// Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
// might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
// performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
// observed skews that can be as long as days, weeks or months.
//
// See https://github.com/getsentry/sentry-javascript/issues/2590.
//
// BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
// transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
// transactions of long-lived web pages.
let t=Date.now()-e.now();return{now:()=>e.now(),timeOrigin:t}}(),o=void 0===a?s:{nowSeconds:()=>(a.timeOrigin+a.now())/1e3},l=s.nowSeconds.bind(s),c=o.nowSeconds.bind(o),u=(()=>{// Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
// performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
// data as reliable if they are within a reasonable threshold of the current time.
let{performance:e}=i;if(!e||!e.now)return;let t=e.now(),n=Date.now(),r=e.timeOrigin?Math.abs(e.timeOrigin+t-n):36e5,s=e.timing&&e.timing.navigationStart,a="number"==typeof s?Math.abs(s+t-n):36e5;return r<36e5||a<36e5?// Use the more reliable time origin
r<=a?e.timeOrigin:s:n})()}),W("h2FeK",function(e,t){w(e.exports,"isNodeEnv",()=>i),w(e.exports,"dynamicRequire",()=>s);var n=z("evG6d"),r=z("etb2O");/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 *//**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */function i(){// explicitly check for browser bundles as those can be optimized statically
// by terser/rollup.
return!(0,n.isBrowserBundle)()&&"[object process]"===Object.prototype.toString.call(void 0!==r?r:0)}/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function s(e,t){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return e.require(t)}}),W("evG6d",function(e,t){w(e.exports,"isBrowserBundle",()=>n);/*
 * This module exists for optimizations in the build process through rollup and terser.  We define some global
 * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these
 * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will
 * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to
 * `logger` and preventing node-related code from appearing in browser bundles.
 *
 * Attention:
 * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by
 * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)
 * having issues tree-shaking these constants across package boundaries.
 * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want
 * users to be able to shake away expressions that it guards.
 *//**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */function n(){return"undefined"!=typeof __SENTRY_BROWSER_BUNDLE__&&!!__SENTRY_BROWSER_BUNDLE__}}),W("5OM0g",function(e,t){/** Internal global with common properties and Sentry extensions  */// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification
// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js
// core-js has the following licence:
//
// Copyright (c) 2014-2022 Denis Pushkarev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/** Returns 'obj' if it's the global object, otherwise returns undefined */function n(e){return e&&e.Math==Math?e:void 0}w(e.exports,"GLOBAL_OBJ",()=>r),w(e.exports,"getGlobalObject",()=>i),w(e.exports,"getGlobalSingleton",()=>s);/** Get's the global object for the current JavaScript runtime */let r="object"==typeof globalThis&&n(globalThis)||// eslint-disable-next-line no-restricted-globals
"object"==typeof window&&n(window)||"object"==typeof self&&n(self)||"object"==typeof P&&n(P)||function(){return this}()||{};/**
 * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8
 */function i(){return r}/**
 * Returns a global singleton contained in the global `__SENTRY__` object.
 *
 * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory
 * function and added to the `__SENTRY__` object.
 *
 * @param name name of the global singleton on __SENTRY__
 * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`
 * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value
 * @returns the singleton
 */function s(e,t,n){let i=n||r,s=i.__SENTRY__=i.__SENTRY__||{},a=s[e]||(s[e]=t());return a}}),W("aBUrw",function(e,t){w(e.exports,"dateTimestampInSeconds",()=>l),w(e.exports,"timestampInSeconds",()=>c),w(e.exports,"browserPerformanceTimeOrigin",()=>u);var n=z("11F2B"),r=z("3vPaK");// eslint-disable-next-line deprecation/deprecation
let i=(0,r.getGlobalObject)(),s={nowSeconds:()=>Date.now()/1e3},a=(0,n.isNodeEnv)()?/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */function(){try{let t=(0,n.dynamicRequire)(e,"perf_hooks");return t.performance}catch(e){return}}():/**
 * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}
 * for accessing a high-resolution monotonic clock.
 *//**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */function(){let{performance:e}=i;if(!e||!e.now)return;// Replace performance.timeOrigin with our own timeOrigin based on Date.now().
//
// This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
// performance.now() gives a date arbitrarily in the past.
//
// Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
// undefined.
//
// The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
// interact with data coming out of performance entries.
//
// Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
// might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
// performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
// observed skews that can be as long as days, weeks or months.
//
// See https://github.com/getsentry/sentry-javascript/issues/2590.
//
// BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
// transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
// transactions of long-lived web pages.
let t=Date.now()-e.now();return{now:()=>e.now(),timeOrigin:t}}(),o=void 0===a?s:{nowSeconds:()=>(a.timeOrigin+a.now())/1e3},l=s.nowSeconds.bind(s),c=o.nowSeconds.bind(o),u=(()=>{// Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
// performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
// data as reliable if they are within a reasonable threshold of the current time.
let{performance:e}=i;if(!e||!e.now)return;let t=e.now(),n=Date.now(),r=e.timeOrigin?Math.abs(e.timeOrigin+t-n):36e5,s=e.timing&&e.timing.navigationStart,a="number"==typeof s?Math.abs(s+t-n):36e5;return r<36e5||a<36e5?// Use the more reliable time origin
r<=a?e.timeOrigin:s:n})()}),W("11F2B",function(e,t){w(e.exports,"isNodeEnv",()=>i),w(e.exports,"dynamicRequire",()=>s);var n=z("9INj7"),r=z("etb2O");/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 *//**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */function i(){// explicitly check for browser bundles as those can be optimized statically
// by terser/rollup.
return!(0,n.isBrowserBundle)()&&"[object process]"===Object.prototype.toString.call(void 0!==r?r:0)}/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function s(e,t){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return e.require(t)}}),W("9INj7",function(e,t){w(e.exports,"isBrowserBundle",()=>n);/*
 * This module exists for optimizations in the build process through rollup and terser.  We define some global
 * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these
 * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will
 * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to
 * `logger` and preventing node-related code from appearing in browser bundles.
 *
 * Attention:
 * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by
 * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)
 * having issues tree-shaking these constants across package boundaries.
 * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want
 * users to be able to shake away expressions that it guards.
 *//**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */function n(){return"undefined"!=typeof __SENTRY_BROWSER_BUNDLE__&&!!__SENTRY_BROWSER_BUNDLE__}}),W("3vPaK",function(e,t){/** Internal global with common properties and Sentry extensions  */// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification
// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js
// core-js has the following licence:
//
// Copyright (c) 2014-2022 Denis Pushkarev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/** Returns 'obj' if it's the global object, otherwise returns undefined */function n(e){return e&&e.Math==Math?e:void 0}w(e.exports,"GLOBAL_OBJ",()=>r),w(e.exports,"getGlobalObject",()=>i),w(e.exports,"getGlobalSingleton",()=>s);/** Get's the global object for the current JavaScript runtime */let r="object"==typeof globalThis&&n(globalThis)||// eslint-disable-next-line no-restricted-globals
"object"==typeof window&&n(window)||"object"==typeof self&&n(self)||"object"==typeof P&&n(P)||function(){return this}()||{};/**
 * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8
 */function i(){return r}/**
 * Returns a global singleton contained in the global `__SENTRY__` object.
 *
 * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory
 * function and added to the `__SENTRY__` object.
 *
 * @param name name of the global singleton on __SENTRY__
 * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`
 * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value
 * @returns the singleton
 */function s(e,t,n){let i=n||r,s=i.__SENTRY__=i.__SENTRY__||{},a=s[e]||(s[e]=t());return a}}),W("Hamgg",function(e,t){var n=z("cjQNr"),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function o(e){return(// React v16.11 and below
n.isMemo(e)?s:a[e.$$typeof]||r)}a[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},a[n.Memo]=s;var l=Object.defineProperty,c=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){// don't hoist over string (html) components
if(h){var s=p(n);s&&s!==h&&e(t,s,r)}var a=c(n);u&&(a=a.concat(u(n)));for(var f=o(t),_=o(n),m=0;m<a.length;++m){var g=a[m];if(!i[g]&&!(r&&r[g])&&!(_&&_[g])&&!(f&&f[g])){var y=d(n,g);try{// Avoid failures from read-only properties
l(t,g,y)}catch(e){}}}}return t}}),W("cjQNr",function(e,t){e.exports=z("7wF0E")}),W("7wF0E",function(e,t){w(e.exports,"AsyncMode",()=>n,e=>n=e),w(e.exports,"ConcurrentMode",()=>r,e=>r=e),w(e.exports,"ContextConsumer",()=>i,e=>i=e),w(e.exports,"ContextProvider",()=>s,e=>s=e),w(e.exports,"Element",()=>a,e=>a=e),w(e.exports,"ForwardRef",()=>o,e=>o=e),w(e.exports,"Fragment",()=>l,e=>l=e),w(e.exports,"Lazy",()=>c,e=>c=e),w(e.exports,"Memo",()=>u,e=>u=e),w(e.exports,"Portal",()=>d,e=>d=e),w(e.exports,"Profiler",()=>p,e=>p=e),w(e.exports,"StrictMode",()=>h,e=>h=e),w(e.exports,"Suspense",()=>f,e=>f=e),w(e.exports,"isAsyncMode",()=>_,e=>_=e),w(e.exports,"isConcurrentMode",()=>m,e=>m=e),w(e.exports,"isContextConsumer",()=>g,e=>g=e),w(e.exports,"isContextProvider",()=>y,e=>y=e),w(e.exports,"isElement",()=>S,e=>S=e),w(e.exports,"isForwardRef",()=>b,e=>b=e),w(e.exports,"isFragment",()=>v,e=>v=e),w(e.exports,"isLazy",()=>E,e=>E=e),w(e.exports,"isMemo",()=>T,e=>T=e),w(e.exports,"isPortal",()=>k,e=>k=e),w(e.exports,"isProfiler",()=>x,e=>x=e),w(e.exports,"isStrictMode",()=>I,e=>I=e),w(e.exports,"isSuspense",()=>C,e=>C=e),w(e.exports,"isValidElementType",()=>R,e=>R=e),w(e.exports,"typeOf",()=>N,e=>N=e);var n,r,i,s,a,o,l,c,u,d,p,h,f,_,m,g,y,S,b,v,E,T,k,x,I,C,R,N,A="function"==typeof Symbol&&Symbol.for,D=A?Symbol.for("react.element"):60103,O=A?Symbol.for("react.portal"):60106,B=A?Symbol.for("react.fragment"):60107,U=A?Symbol.for("react.strict_mode"):60108,M=A?Symbol.for("react.profiler"):60114,L=A?Symbol.for("react.provider"):60109,G=A?Symbol.for("react.context"):60110,P=A?Symbol.for("react.async_mode"):60111,Y=A?Symbol.for("react.concurrent_mode"):60111,F=A?Symbol.for("react.forward_ref"):60112,j=A?Symbol.for("react.suspense"):60113,z=A?Symbol.for("react.suspense_list"):60120,W=A?Symbol.for("react.memo"):60115,$=A?Symbol.for("react.lazy"):60116,H=A?Symbol.for("react.block"):60121,V=A?Symbol.for("react.fundamental"):60117,Z=A?Symbol.for("react.responder"):60118,q=A?Symbol.for("react.scope"):60119;function J(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case D:switch(e=e.type){case P:case Y:case B:case M:case U:case j:return e;default:switch(e=e&&e.$$typeof){case G:case F:case $:case W:case L:return e;default:return t}}case O:return t}}}function K(e){return J(e)===Y}n=P,r=Y,i=G,s=L,a=D,o=F,l=B,c=$,u=W,d=O,p=M,h=U,f=j,_=function(e){return K(e)||J(e)===P},m=K,g=function(e){return J(e)===G},y=function(e){return J(e)===L},S=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===D},b=function(e){return J(e)===F},v=function(e){return J(e)===B},E=function(e){return J(e)===$},T=function(e){return J(e)===W},k=function(e){return J(e)===O},x=function(e){return J(e)===M},I=function(e){return J(e)===U},C=function(e){return J(e)===j},R=function(e){return"string"==typeof e||"function"==typeof e||e===B||e===Y||e===M||e===U||e===j||e===z||"object"==typeof e&&null!==e&&(e.$$typeof===$||e.$$typeof===W||e.$$typeof===L||e.$$typeof===G||e.$$typeof===F||e.$$typeof===V||e.$$typeof===Z||e.$$typeof===q||e.$$typeof===H)},N=J}),W("gZRxI",function(e,t){e.exports=z("l6pLs")}),W("l6pLs",function(e,t){w(e.exports,"Children",()=>n,e=>n=e),w(e.exports,"Component",()=>r,e=>r=e),w(e.exports,"Fragment",()=>i,e=>i=e),w(e.exports,"Profiler",()=>s,e=>s=e),w(e.exports,"PureComponent",()=>a,e=>a=e),w(e.exports,"StrictMode",()=>o,e=>o=e),w(e.exports,"Suspense",()=>l,e=>l=e),w(e.exports,"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",()=>c,e=>c=e),w(e.exports,"cloneElement",()=>u,e=>u=e),w(e.exports,"createContext",()=>d,e=>d=e),w(e.exports,"createElement",()=>p,e=>p=e),w(e.exports,"createFactory",()=>h,e=>h=e),w(e.exports,"createRef",()=>f,e=>f=e),w(e.exports,"forwardRef",()=>_,e=>_=e),w(e.exports,"isValidElement",()=>m,e=>m=e),w(e.exports,"lazy",()=>g,e=>g=e),w(e.exports,"memo",()=>y,e=>y=e),w(e.exports,"useCallback",()=>S,e=>S=e),w(e.exports,"useContext",()=>b,e=>b=e),w(e.exports,"useDebugValue",()=>v,e=>v=e),w(e.exports,"useEffect",()=>E,e=>E=e),w(e.exports,"useImperativeHandle",()=>T,e=>T=e),w(e.exports,"useLayoutEffect",()=>k,e=>k=e),w(e.exports,"useMemo",()=>x,e=>x=e),w(e.exports,"useReducer",()=>I,e=>I=e),w(e.exports,"useRef",()=>C,e=>C=e),w(e.exports,"useState",()=>R,e=>R=e),w(e.exports,"version",()=>N,e=>N=e);var n,r,i,s,a,o,l,c,u,d,p,h,f,_,m,g,y,S,b,v,E,T,k,x,I,C,R,N,A=z("arEJF"),D="function"==typeof Symbol&&Symbol.for,O=D?Symbol.for("react.element"):60103,B=D?Symbol.for("react.portal"):60106,U=D?Symbol.for("react.fragment"):60107,M=D?Symbol.for("react.strict_mode"):60108,L=D?Symbol.for("react.profiler"):60114,G=D?Symbol.for("react.provider"):60109,P=D?Symbol.for("react.context"):60110,Y=D?Symbol.for("react.forward_ref"):60112,F=D?Symbol.for("react.suspense"):60113,j=D?Symbol.for("react.memo"):60115,W=D?Symbol.for("react.lazy"):60116,$="function"==typeof Symbol&&Symbol.iterator;function H(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var V={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Z={};function q(e,t,n){this.props=e,this.context=t,this.refs=Z,this.updater=n||V}function J(){}function K(e,t,n){this.props=e,this.context=t,this.refs=Z,this.updater=n||V}q.prototype.isReactComponent={},q.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(H(85));this.updater.enqueueSetState(this,e,t,"setState")},q.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},J.prototype=q.prototype;var X=K.prototype=new J;X.constructor=K,A(X,q.prototype),X.isPureReactComponent=!0;var Q={current:null},ee=Object.prototype.hasOwnProperty,et={key:!0,ref:!0,__self:!0,__source:!0};function en(e,t,n){var r,i={},s=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(s=""+t.key),t)ee.call(t,r)&&!et.hasOwnProperty(r)&&(i[r]=t[r]);var o=arguments.length-2;if(1===o)i.children=n;else if(1<o){for(var l=Array(o),c=0;c<o;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===i[r]&&(i[r]=o[r]);return{$$typeof:O,type:e,key:s,ref:a,props:i,_owner:Q.current}}function er(e){return"object"==typeof e&&null!==e&&e.$$typeof===O}var ei=/\/+/g,es=[];function ea(e,t,n,r){if(es.length){var i=es.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function eo(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>es.length&&es.push(e)}function el(e,t,n){return null==e?0:function e(t,n,r,i){var s=typeof t;("undefined"===s||"boolean"===s)&&(t=null);var a=!1;if(null===t)a=!0;else switch(s){case"string":case"number":a=!0;break;case"object":switch(t.$$typeof){case O:case B:a=!0}}if(a)return r(i,t,""===n?"."+ec(t,0):n),1;if(a=0,n=""===n?".":n+":",Array.isArray(t))for(var o=0;o<t.length;o++){var l=n+ec(s=t[o],o);a+=e(s,l,r,i)}else if("function"==typeof(l=null===t||"object"!=typeof t?null:"function"==typeof(l=$&&t[$]||t["@@iterator"])?l:null))for(t=l.call(t),o=0;!(s=t.next()).done;)l=n+ec(s=s.value,o++),a+=e(s,l,r,i);else if("object"===s)throw Error(H(31,"[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return a}(e,"",t,n)}function ec(e,t){var n,r;return"object"==typeof e&&null!==e&&null!=e.key?(n=e.key,r={"=":"=0",":":"=2"},"$"+(""+n).replace(/[=:]/g,function(e){return r[e]})):t.toString(36)}function eu(e,t){e.func.call(e.context,t,e.count++)}function ed(e,t,n){var r,i,s=e.result,a=e.keyPrefix;Array.isArray(e=e.func.call(e.context,t,e.count++))?ep(e,s,n,function(e){return e}):null!=e&&(er(e)&&(r=e,i=a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(ei,"$&/")+"/")+n,e={$$typeof:O,type:r.type,key:i,ref:r.ref,props:r.props,_owner:r._owner}),s.push(e))}function ep(e,t,n,r,i){var s="";null!=n&&(s=(""+n).replace(ei,"$&/")+"/"),el(e,ed,t=ea(t,s,r,i)),eo(t)}var eh={current:null};function ef(){var e=eh.current;if(null===e)throw Error(H(321));return e}n={map:function(e,t,n){if(null==e)return e;var r=[];return ep(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;el(e,eu,t=ea(null,null,t,n)),eo(t)},count:function(e){return el(e,function(){return null},null)},toArray:function(e){var t=[];return ep(e,t,null,function(e){return e}),t},only:function(e){if(!er(e))throw Error(H(143));return e}},r=q,i=U,s=L,a=K,o=M,l=F,c={ReactCurrentDispatcher:eh,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:Q,IsSomeRendererActing:{current:!1},assign:A},u=function(e,t,n){if(null==e)throw Error(H(267,e));var r=A({},e.props),i=e.key,s=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,a=Q.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var o=e.type.defaultProps;for(l in t)ee.call(t,l)&&!et.hasOwnProperty(l)&&(r[l]=void 0===t[l]&&void 0!==o?o[l]:t[l])}var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){o=Array(l);for(var c=0;c<l;c++)o[c]=arguments[c+2];r.children=o}return{$$typeof:O,type:e.type,key:i,ref:s,props:r,_owner:a}},d=function(e,t){return void 0===t&&(t=null),(e={$$typeof:P,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:G,_context:e},e.Consumer=e},p=en,h=function(e){var t=en.bind(null,e);return t.type=e,t},f=function(){return{current:null}},_=function(e){return{$$typeof:Y,render:e}},m=er,g=function(e){return{$$typeof:W,_ctor:e,_status:-1,_result:null}},y=function(e,t){return{$$typeof:j,type:e,compare:void 0===t?null:t}},S=function(e,t){return ef().useCallback(e,t)},b=function(e,t){return ef().useContext(e,t)},v=function(){},E=function(e,t){return ef().useEffect(e,t)},T=function(e,t,n){return ef().useImperativeHandle(e,t,n)},k=function(e,t){return ef().useLayoutEffect(e,t)},x=function(e,t){return ef().useMemo(e,t)},I=function(e,t,n){return ef().useReducer(e,t,n)},C=function(e){return ef().useRef(e)},R=function(e){return ef().useState(e)},N="16.14.0"}),W("arEJF",function(e,t){/* eslint-disable no-unused-vars */var n=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=!function(){try{if(!Object.assign)return!1;// Detect buggy property enumeration order in older V8 versions.
// https://bugs.chromium.org/p/v8/issues/detail?id=4118
var e=new String("abc");// eslint-disable-line no-new-wrappers
if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var r=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==r.join(""))return!1;// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var i={};if("abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},i)).join(""))return!1;return!0}catch(e){// We don't expect any of the above to throw, but better to be safe.
return!1}}()?function(e,t){for(var s,a,o=function(e){if(null==e)throw TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in s=Object(arguments[l]))r.call(s,c)&&(o[c]=s[c]);if(n){a=n(s);for(var u=0;u<a.length;u++)i.call(s,a[u])&&(o[a[u]]=s[a[u]])}}return o}:Object.assign}),W("9CQuz",function(e,t){w(e.exports,"ErrorBoundary",()=>p),w(e.exports,"withErrorBoundary",()=>h);var n=z("5X2BG"),r=z("fSbgy"),i=z("7qvsU"),s=z("9jSUf"),a=z("1A3EQ"),o=z("ljiYl"),l=z("Hamgg"),c=z("gZRxI");let u="/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/errorboundary.tsx",d={componentStack:null,error:null,eventId:null};/**
 * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.
 * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the
 * Sentry React SDK ErrorBoundary caught an error invoking your application code. This
 * is expected behavior and NOT indicative of a bug with the Sentry React SDK.
 */class p extends c.Component{constructor(e){super(e),p.prototype.__init.call(this),this.state=d,this._openFallbackReportDialog=!0;let t=(0,r.getCurrentHub)().getClient();t&&t.on&&e.showDialog&&(this._openFallbackReportDialog=!1,t.on("afterSendEvent",t=>{t.type||t.event_id!==this._lastEventId||(0,i.showReportDialog)({...e.dialogOptions,eventId:this._lastEventId})}))}componentDidCatch(e,{componentStack:t}){let{beforeCapture:r,onError:o,showDialog:l,dialogOptions:u}=this.props;(0,n.withScope)(d=>{// If on React version >= 17, create stack trace from componentStack param and links
// to to the original error using `error.cause` otherwise relies on error param for stacktrace.
// Linking errors requires the `LinkedErrors` integration be enabled.
// See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks
//
// Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked
// with non-error objects. This is why we need to check if the error is an error-like object.
// See: https://github.com/getsentry/sentry-javascript/issues/6167
if(function(e){let t=e.match(/^([^.]+)/);return null!==t&&parseInt(t[0])>=17}(c.version)&&(0,a.isError)(e)){let n=Error(e.message);n.name=`React ErrorBoundary ${e.name}`,n.stack=t,// Using the `LinkedErrors` integration to link the errors together.
function(e,t){let n=new WeakMap;!function e(t,r){// If we've already seen the error, there is a recursive loop somewhere in the error's
// cause chain. Let's just bail out then to prevent a stack overflow.
if(!n.has(t)){if(t.cause)return n.set(t,!0),e(t.cause,r);t.cause=r}}(e,t)}(e,n)}r&&r(d,e,t),d.addEventProcessor(e=>((0,s.addExceptionMechanism)(e,{handled:!1}),e));let p=(0,n.captureException)(e,{contexts:{react:{componentStack:t}}});o&&o(e,t,p),l&&(this._lastEventId=p,this._openFallbackReportDialog&&(0,i.showReportDialog)({...u,eventId:p})),// componentDidCatch is used over getDerivedStateFromError
// so that componentStack is accessible through state.
this.setState({error:e,componentStack:t,eventId:p})})}componentDidMount(){let{onMount:e}=this.props;e&&e()}componentWillUnmount(){let{error:e,componentStack:t,eventId:n}=this.state,{onUnmount:r}=this.props;r&&r(e,t,n)}__init(){this.resetErrorBoundary=()=>{let{onReset:e}=this.props,{error:t,componentStack:n,eventId:r}=this.state;e&&e(t,n,r),this.setState(d)}}render(){let{fallback:e,children:t}=this.props,n=this.state;if(n.error){let t;return(t="function"==typeof e?e({error:n.error,componentStack:n.componentStack,resetError:this.resetErrorBoundary,eventId:n.eventId}):e,c.isValidElement(t))?t:(e&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).warn("fallback did not produce a valid ReactElement"),null)}return"function"==typeof t?t():t}}// eslint-disable-next-line @typescript-eslint/no-explicit-any
function h(e,t){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
let n=e.displayName||e.name||"unknown",r=n=>c.createElement(p,{...t,__self:this,__source:{fileName:u,lineNumber:234}},c.createElement(e,{...n,__self:this,__source:{fileName:u,lineNumber:235}}));return(// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
r.displayName=`errorBoundary(${n})`,/*@__PURE__*/Y(l)(r,e),r)}}),W("5X2BG",function(e,t){w(e.exports,"captureException",()=>i),w(e.exports,"captureMessage",()=>s),w(e.exports,"captureEvent",()=>a),w(e.exports,"configureScope",()=>o),w(e.exports,"addBreadcrumb",()=>l),w(e.exports,"setContext",()=>c),w(e.exports,"setExtras",()=>u),w(e.exports,"setExtra",()=>d),w(e.exports,"setTags",()=>p),w(e.exports,"setTag",()=>h),w(e.exports,"setUser",()=>f),w(e.exports,"withScope",()=>_),w(e.exports,"startTransaction",()=>m),w(e.exports,"flush",()=>g),w(e.exports,"close",()=>y),w(e.exports,"lastEventId",()=>S);var n=z("ljiYl");z("9jSUf");var r=z("fSbgy");// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,
// where HUB_FUNCTION is some method on the Hub class.
//
// This is done to make sure the top level SDK methods stay in sync with the hub methods.
// Although every method here has an explicit return type, some of them (that map to void returns) do not
// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @param captureContext Additional scope data to apply to exception event.
 * @returns The generated eventId.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function i(e,t){return(0,r.getCurrentHub)().captureException(e,{captureContext:t})}/**
 * Captures a message event and sends it to Sentry.
 *
 * @param message The message to send to Sentry.
 * @param Severity Define the level of the message.
 * @returns The generated eventId.
 */function s(e,t){// This is necessary to provide explicit scopes upgrade, without changing the original
// arity of the `captureMessage(message, level)` method.
let n="string"==typeof t?t:void 0,i="string"!=typeof t?{captureContext:t}:void 0;return(0,r.getCurrentHub)().captureMessage(e,n,i)}/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param event The event to send to Sentry.
 * @returns The generated eventId.
 */function a(e,t){return(0,r.getCurrentHub)().captureEvent(e,t)}/**
 * Callback to set context information onto the scope.
 * @param callback Callback function that receives Scope.
 */function o(e){(0,r.getCurrentHub)().configureScope(e)}/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 *
 * @param breadcrumb The breadcrumb to record.
 */function l(e){(0,r.getCurrentHub)().addBreadcrumb(e)}/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function c(e,t){(0,r.getCurrentHub)().setContext(e,t)}/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */function u(e){(0,r.getCurrentHub)().setExtras(e)}/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */function d(e,t){(0,r.getCurrentHub)().setExtra(e,t)}/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */function p(e){(0,r.getCurrentHub)().setTags(e)}/**
 * Set key:value that will be sent as tags data with the event.
 *
 * Can also be used to unset a tag, by passing `undefined`.
 *
 * @param key String key of tag
 * @param value Value of tag
 */function h(e,t){(0,r.getCurrentHub)().setTag(e,t)}/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass `null` to unset the user.
 */function f(e){(0,r.getCurrentHub)().setUser(e)}/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 *
 * @param callback that will be enclosed into push/popScope.
 */function _(e){(0,r.getCurrentHub)().withScope(e)}/**
 * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.
 *
 * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
 * new child span within the transaction or any span, call the respective `.startChild()` method.
 *
 * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
 *
 * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its
 * finished child spans will be sent to Sentry.
 *
 * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call
 * `startTransaction` directly on the hub.
 *
 * @param context Properties of the new `Transaction`.
 * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
 * default values). See {@link Options.tracesSampler}.
 *
 * @returns The transaction which was just started
 */function m(e,t){return(0,r.getCurrentHub)().startTransaction({...e},t)}/**
 * Call `flush()` on the current client, if there is one. See {@link Client.flush}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause
 * the client to wait until all events are sent before resolving the promise.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */async function g(e){let t=(0,r.getCurrentHub)().getClient();return t?t.flush(e):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn("Cannot flush events. No client defined."),Promise.resolve(!1))}/**
 * Call `close()` on the current client, if there is one. See {@link Client.close}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
 * parameter will cause the client to wait until all events are sent before disabling itself.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */async function y(e){let t=(0,r.getCurrentHub)().getClient();return t?t.close(e):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn("Cannot flush events and disable SDK. No client defined."),Promise.resolve(!1))}/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 */function S(){return(0,r.getCurrentHub)().lastEventId()}}),W("ljiYl",function(e,t){w(e.exports,"CONSOLE_LEVELS",()=>r),w(e.exports,"originalConsoleMethods",()=>i),w(e.exports,"consoleSandbox",()=>s),w(e.exports,"logger",()=>a);var n=z("3dCyu");let r=["debug","info","warn","error","log","assert","trace"],i={};/** JSDoc *//**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */function s(e){if(!("console"in n.GLOBAL_OBJ))return e();let t=n.GLOBAL_OBJ.console,r={},s=Object.keys(i);// Restore all wrapped console methods
s.forEach(e=>{let n=i[e];r[e]=t[e],t[e]=n});try{return e()}finally{// Revert restoration to wrapped state
s.forEach(e=>{t[e]=r[e]})}}let a=function(){let e=!1,t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return"undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__?r.forEach(r=>{// eslint-disable-next-line @typescript-eslint/no-explicit-any
t[r]=(...t)=>{e&&s(()=>{(0,n.GLOBAL_OBJ).console[r](`Sentry Logger [${r}]:`,...t)})}}):r.forEach(e=>{t[e]=()=>void 0}),t}()}),W("9jSUf",function(e,t){w(e.exports,"uuid4",()=>i),w(e.exports,"getEventDescription",()=>a),w(e.exports,"addExceptionTypeValue",()=>o),w(e.exports,"addExceptionMechanism",()=>l),w(e.exports,"checkOrSetAlreadyCaught",()=>c),w(e.exports,"arrayify",()=>u);var n=z("csRh4");z("VBQMn");var r=z("3dCyu");/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */function i(){let e=r.GLOBAL_OBJ,t=e.crypto||e.msCrypto,n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,"");t&&t.getRandomValues&&(n=()=>t.getRandomValues(new Uint8Array(1))[0])}catch(e){// some runtimes can crash invoking crypto
// https://github.com/getsentry/sentry-javascript/issues/8935
}// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
// Concatenating the following numbers as strings results in '10000000100040008000100000000000'
return"10000000100040008000100000000000".replace(/[018]/g,e=>(e^(15&n())>>e/4).toString(16))}function s(e){return e.exception&&e.exception.values?e.exception.values[0]:void 0}/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */function a(e){let{message:t,event_id:n}=e;if(t)return t;let r=s(e);return r?r.type&&r.value?`${r.type}: ${r.value}`:r.type||r.value||n||"<unknown>":n||"<unknown>"}/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */function o(e,t,n){let r=e.exception=e.exception||{},i=r.values=r.values||[],s=i[0]=i[0]||{};s.value||(s.value=t||""),s.type||(s.type=n||"Error")}/**
 * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.
 *
 * @param event The event to modify.
 * @param newMechanism Mechanism data to add to the event.
 * @hidden
 */function l(e,t){let n=s(e);if(!n)return;let r=n.mechanism;if(n.mechanism={type:"generic",handled:!0,...r,...t},t&&"data"in t){let e={...r&&r.data,...t.data};n.mechanism.data=e}}/**
 * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object
 * in question), and marks it captured if not.
 *
 * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and
 * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so
 * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because
 * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not
 * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This
 * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we
 * see it.
 *
 * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on
 * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent
 * object wrapper forms so that this check will always work. However, because we need to flag the exact object which
 * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification
 * must be done before the exception captured.
 *
 * @param A thrown exception to check or flag as having been seen
 * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)
 */function c(e){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
if(e&&e.__sentry_captured__)return!0;try{// set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the
// `ExtraErrorData` integration
(0,n.addNonEnumerableProperty)(e,"__sentry_captured__",!0)}catch(e){// `exception` is a primitive, so we can't mark it seen
}return!1}/**
 * Checks whether the given input is already an array, and if it isn't, wraps it in one.
 *
 * @param maybeArray Input to turn into an array, if necessary
 * @returns The input, if already an array, or an array with the input as the only element, if not
 */function u(e){return Array.isArray(e)?e:[e]}}),W("csRh4",function(e,t){w(e.exports,"fill",()=>a),w(e.exports,"markFunctionWrapped",()=>l),w(e.exports,"addNonEnumerableProperty",()=>o),w(e.exports,"getOriginalFunction",()=>c),w(e.exports,"urlEncode",()=>u),w(e.exports,"convertToPlainObject",()=>d),w(e.exports,"extractExceptionKeysForMessage",()=>f),w(e.exports,"dropUndefinedKeys",()=>_);var n=z("cuGn6"),r=z("1A3EQ"),i=z("ljiYl"),s=z("VBQMn");/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */function a(e,t,n){if(!(t in e))return;let r=e[t],i=n(r);"function"==typeof i&&l(i,r),e[t]=i}/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */function o(e,t,n){try{Object.defineProperty(e,t,{// enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
value:n,writable:!0,configurable:!0})}catch(n){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,i.logger).log(`Failed to add non-enumerable property "${t}" to object`,e)}}/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */function l(e,t){try{let n=t.prototype||{};e.prototype=t.prototype=n,o(e,"__sentry_original__",t)}catch(e){}// eslint-disable-line no-empty
}/**
 * This extracts the original function if available.  See
 * `markFunctionWrapped` for more information.
 *
 * @param func the function to unwrap
 * @returns the unwrapped version of the function if available.
 */function c(e){return e.__sentry_original__}/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 */function u(e){return Object.keys(e).map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&")}/**
 * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their
 * non-enumerable properties attached.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor
 *  an Error.
 */function d(e){if((0,r.isError)(e))return{message:e.message,name:e.name,stack:e.stack,...h(e)};if(!(0,r.isEvent)(e))return e;{let t={type:e.type,target:p(e.target),currentTarget:p(e.currentTarget),...h(e)};return"undefined"!=typeof CustomEvent&&(0,r.isInstanceOf)(e,CustomEvent)&&(t.detail=e.detail),t}}/** Creates a string representation of the target of an `Event` object */function p(e){try{return(0,r.isElement)(e)?(0,n.htmlTreeAsString)(e):Object.prototype.toString.call(e)}catch(e){return"<unknown>"}}/** Filters out all but an object's own properties */function h(e){if("object"!=typeof e||null===e)return{};{let t={};for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}}/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */function f(e,t=40){let n=Object.keys(d(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return(0,s.truncate)(n[0],t);for(let e=n.length;e>0;e--){let r=n.slice(0,e).join(", ");if(!(r.length>t)){if(e===n.length)return r;return(0,s.truncate)(r,t)}}return""}/**
 * Given any object, return a new object having removed all fields whose value was `undefined`.
 * Works recursively on objects and arrays.
 *
 * Attention: This function keeps circular references in the returned object.
 */function _(e){// This map keeps track of what already visited nodes map to.
// Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular
// references as the input object.
let t=new Map;// This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API
return function e(t,n){if((0,r.isPlainObject)(t)){// If this node has already been visited due to a circular reference, return the object it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i={};for(let r of(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),Object.keys(t)))void 0!==t[r]&&(i[r]=e(t[r],n));return i}if(Array.isArray(t)){// If this node has already been visited due to a circular reference, return the array it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i=[];return(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),t.forEach(t=>{i.push(e(t,n))}),i)}return t}(e,t)}}),W("cuGn6",function(e,t){w(e.exports,"htmlTreeAsString",()=>s),w(e.exports,"getLocationHref",()=>a);var n=z("1A3EQ"),r=z("3dCyu");// eslint-disable-next-line deprecation/deprecation
let i=(0,r.getGlobalObject)();/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */function s(e,t={}){// try/catch both:
// - accessing event.target (see getsentry/raven-js#838, #768)
// - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
// - can throw an exception in some circumstances.
try{let r,i=e,s=[],a=0,o=0,l=Array.isArray(t)?t:t.keyAttrs,c=!Array.isArray(t)&&t.maxStringLength||80;for(;// bail out if
// - nextStr is the 'html' element
// - the length of the string that would be created exceeds maxStringLength
//   (ignore this limit if we are on the first iteration)
i&&a++<5&&(r=/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */function(e,t){let r,i,s,a,o;let l=[];if(!e||!e.tagName)return"";l.push(e.tagName.toLowerCase());// Pairs of attribute keys defined in `serializeAttribute` and their values on element.
let c=t&&t.length?t.filter(t=>e.getAttribute(t)).map(t=>[t,e.getAttribute(t)]):null;if(c&&c.length)c.forEach(e=>{l.push(`[${e[0]}="${e[1]}"]`)});else if(e.id&&l.push(`#${e.id}`),// eslint-disable-next-line prefer-const
(r=e.className)&&(0,n.isString)(r))for(o=0,i=r.split(/\s+/);o<i.length;o++)l.push(`.${i[o]}`);let u=["aria-label","type","name","title","alt"];for(o=0;o<u.length;o++)s=u[o],(a=e.getAttribute(s))&&l.push(`[${s}="${a}"]`);return l.join("")}(i,l),"html"!==r&&(!(a>1)||!(o+3*s.length+r.length>=c)));)s.push(r),o+=r.length,i=i.parentNode;return s.reverse().join(" > ")}catch(e){return"<unknown>"}}/**
 * A safe form of location.href
 */function a(){try{return i.document.location.href}catch(e){return""}}}),W("1A3EQ",function(e,t){w(e.exports,"isError",()=>r),w(e.exports,"isInstanceOf",()=>g),w(e.exports,"isErrorEvent",()=>s),w(e.exports,"isDOMError",()=>a),w(e.exports,"isDOMException",()=>o),w(e.exports,"isString",()=>l),w(e.exports,"isPrimitive",()=>c),w(e.exports,"isPlainObject",()=>u),w(e.exports,"isEvent",()=>d),w(e.exports,"isElement",()=>p),w(e.exports,"isRegExp",()=>h),w(e.exports,"isThenable",()=>f),w(e.exports,"isSyntheticEvent",()=>_),w(e.exports,"isNaN",()=>m),w(e.exports,"isVueViewModel",()=>y);// eslint-disable-next-line @typescript-eslint/unbound-method
let n=Object.prototype.toString;/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function r(e){switch(n.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return g(e,Error)}}/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */function i(e,t){return n.call(e)===`[object ${t}]`}/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function s(e){return i(e,"ErrorEvent")}/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function a(e){return i(e,"DOMError")}/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function o(e){return i(e,"DOMException")}/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function l(e){return i(e,"String")}/**
 * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function c(e){return null===e||"object"!=typeof e&&"function"!=typeof e}/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function u(e){return i(e,"Object")}/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function d(e){return"undefined"!=typeof Event&&g(e,Event)}/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function p(e){return"undefined"!=typeof Element&&g(e,Element)}/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function h(e){return i(e,"RegExp")}/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */function f(e){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return!!(e&&e.then&&"function"==typeof e.then)}/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function _(e){return u(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}/**
 * Checks whether given value is NaN
 * {@link isNaN}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function m(e){return"number"==typeof e&&e!=e}/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */function g(e,t){try{return e instanceof t}catch(e){return!1}}/**
 * Checks whether given value's type is a Vue ViewModel.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function y(e){// Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.
return!!("object"==typeof e&&null!==e&&(e.__isVue||e._isVue))}}),W("VBQMn",function(e,t){w(e.exports,"truncate",()=>r),w(e.exports,"snipLine",()=>i),w(e.exports,"safeJoin",()=>s),w(e.exports,"stringMatchesSomePattern",()=>a);var n=z("1A3EQ");/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */function r(e,t=0){return"string"!=typeof e||0===t?e:e.length<=t?e:`${e.slice(0,t)}...`}/**
 * This is basically just `trim_line` from
 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */function i(e,t){let n=e,r=n.length;if(r<=150)return n;t>r&&(t=r);let i=Math.max(t-60,0);i<5&&(i=0);let s=Math.min(i+140,r);return s>r-5&&(s=r),s===r&&(i=Math.max(s-140,0)),n=n.slice(i,s),i>0&&(n=`'{snip} ${n}`),s<r&&(n+=" {snip}"),n}/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function s(e,t){if(!Array.isArray(e))return"";let r=[];// eslint-disable-next-line @typescript-eslint/prefer-for-of
for(let t=0;t<e.length;t++){let i=e[t];try{// This is a hack to fix a Vue3-specific bug that causes an infinite loop of
// console warnings. This happens when a Vue template is rendered with
// an undeclared variable, which we try to stringify, ultimately causing
// Vue to issue another warning which repeats indefinitely.
// see: https://github.com/getsentry/sentry-javascript/pull/8981
(0,n.isVueViewModel)(i)?r.push("[VueViewModel]"):r.push(String(i))}catch(e){r.push("[value cannot be serialized]")}}return r.join(t)}/**
 * Test the given string against an array of strings and regexes. By default, string matching is done on a
 * substring-inclusion basis rather than a strict equality basis
 *
 * @param testString The string to test
 * @param patterns The patterns against which to test the string
 * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to
 * count. If false, `testString` will match a string pattern if it contains that pattern.
 * @returns
 */function a(e,t=[],r=!1){return t.some(t=>/**
 * Checks if the given value matches a regex or string
 *
 * @param value The string to test
 * @param pattern Either a regex or a string against which `value` will be matched
 * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match
 * `pattern` if it contains `pattern`. Only applies to string-type patterns.
 */(function(e,t,r=!1){return!!(0,n.isString)(e)&&((0,n.isRegExp)(t)?t.test(e):!!(0,n.isString)(t)&&(r?e===t:e.includes(t)))})(e,t,r))}}),W("fSbgy",function(e,t){w(e.exports,"Hub",()=>c),w(e.exports,"makeMain",()=>d),w(e.exports,"getMainCarrier",()=>u),w(e.exports,"getHubFromCarrier",()=>h),w(e.exports,"getCurrentHub",()=>p);var n=z("ljiYl"),r=z("lVAot"),i=z("3dCyu"),s=z("9jSUf"),a=z("2ZW7W"),o=z("b5H6o"),l=z("kcvLi");/**
 * @inheritDoc
 */class c{/** Is a {@link Layer}[] containing the client and scope *//** Contains the last event id of a captured event.  *//**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   */constructor(e,t=new o.Scope,n=4){this._version=n,this._stack=[{scope:t}],e&&this.bindClient(e)}/**
   * @inheritDoc
   */isOlderThan(e){return this._version<e}/**
   * @inheritDoc
   */bindClient(e){let t=this.getStackTop();t.client=e,e&&e.setupIntegrations&&e.setupIntegrations()}/**
   * @inheritDoc
   */pushScope(){// We want to clone the content of prev scope
let e=(0,o.Scope).clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:e}),e}/**
   * @inheritDoc
   */popScope(){return!(this.getStack().length<=1)&&!!this.getStack().pop()}/**
   * @inheritDoc
   */withScope(e){let t=this.pushScope();try{e(t)}finally{this.popScope()}}/**
   * @inheritDoc
   */getClient(){return this.getStackTop().client}/** Returns the scope of the top stack. */getScope(){return this.getStackTop().scope}/** Returns the scope stack for domains or the process. */getStack(){return this._stack}/** Returns the topmost scope layer in the order domain > local > process. */getStackTop(){return this._stack[this._stack.length-1]}/**
   * @inheritDoc
   */captureException(e,t){let n=this._lastEventId=t&&t.event_id?t.event_id:(0,s.uuid4)(),r=Error("Sentry syntheticException");return this._withClient((i,s)=>{i.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},s)}),n}/**
   * @inheritDoc
   */captureMessage(e,t,n){let r=this._lastEventId=n&&n.event_id?n.event_id:(0,s.uuid4)(),i=Error(e);return this._withClient((s,a)=>{s.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},a)}),r}/**
   * @inheritDoc
   */captureEvent(e,t){let n=t&&t.event_id?t.event_id:(0,s.uuid4)();return e.type||(this._lastEventId=n),this._withClient((r,i)=>{r.captureEvent(e,{...t,event_id:n},i)}),n}/**
   * @inheritDoc
   */lastEventId(){return this._lastEventId}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let{scope:i,client:s}=this.getStackTop();if(!s)return;let{beforeBreadcrumb:a=null,maxBreadcrumbs:o=100}=s.getOptions&&s.getOptions()||{};if(o<=0)return;let l=(0,r.dateTimestampInSeconds)(),c={timestamp:l,...e},u=a?(0,n.consoleSandbox)(()=>a(c,t)):c;null!==u&&(s.emit&&s.emit("beforeAddBreadcrumb",u,t),i.addBreadcrumb(u,o))}/**
   * @inheritDoc
   */setUser(e){this.getScope().setUser(e)}/**
   * @inheritDoc
   */setTags(e){this.getScope().setTags(e)}/**
   * @inheritDoc
   */setExtras(e){this.getScope().setExtras(e)}/**
   * @inheritDoc
   */setTag(e,t){this.getScope().setTag(e,t)}/**
   * @inheritDoc
   */setExtra(e,t){this.getScope().setExtra(e,t)}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any
setContext(e,t){this.getScope().setContext(e,t)}/**
   * @inheritDoc
   */configureScope(e){let{scope:t,client:n}=this.getStackTop();n&&e(t)}/**
   * @inheritDoc
   */run(e){let t=d(this);try{e(this)}finally{d(t)}}/**
   * @inheritDoc
   */getIntegration(e){let t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn(`Cannot retrieve integration ${e.id} from the current Hub`),null}}/**
   * @inheritDoc
   */startTransaction(e,t){let n=this._callExtensionMethod("startTransaction",e,t);if(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&!n){let e=this.getClient();e?console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`):console.warn("Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'")}return n}/**
   * @inheritDoc
   */traceHeaders(){return this._callExtensionMethod("traceHeaders")}/**
   * @inheritDoc
   */captureSession(e=!1){// both send the update and pull the session from the scope
if(e)return this.endSession();// only send the update
this._sendSessionUpdate()}/**
   * @inheritDoc
   */endSession(){let e=this.getStackTop(),t=e.scope,n=t.getSession();n&&(0,l.closeSession)(n),this._sendSessionUpdate(),// the session is over; take it off of the scope
t.setSession()}/**
   * @inheritDoc
   */startSession(e){let{scope:t,client:n}=this.getStackTop(),{release:r,environment:s=a.DEFAULT_ENVIRONMENT}=n&&n.getOptions()||{},{userAgent:o}=i.GLOBAL_OBJ.navigator||{},c=(0,l.makeSession)({release:r,environment:s,user:t.getUser(),...o&&{userAgent:o},...e}),u=t.getSession&&t.getSession();return u&&"ok"===u.status&&(0,l.updateSession)(u,{status:"exited"}),this.endSession(),// Afterwards we set the new session on the scope
t.setSession(c),c}/**
   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
   * when Tracing is used.
   */shouldSendDefaultPii(){let e=this.getClient(),t=e&&e.getOptions();return!!(t&&t.sendDefaultPii)}/**
   * Sends the current Session on the scope
   */_sendSessionUpdate(){let{scope:e,client:t}=this.getStackTop(),n=e.getSession();n&&t&&t.captureSession&&t.captureSession(n)}/**
   * Internal helper function to call a method on the top client if it exists.
   *
   * @param method The method to call on the client.
   * @param args Arguments to pass to the client function.
   */_withClient(e){let{scope:t,client:n}=this.getStackTop();n&&e(n,t)}/**
   * Calls global extension method and binding current instance to the function call
   */// @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
// eslint-disable-next-line @typescript-eslint/no-explicit-any
_callExtensionMethod(e,...t){let r=u(),i=r.__SENTRY__;if(i&&i.extensions&&"function"==typeof i.extensions[e])return i.extensions[e].apply(this,t);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn(`Extension method ${e} couldn't be found, doing nothing.`)}}/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/function u(){return i.GLOBAL_OBJ.__SENTRY__=i.GLOBAL_OBJ.__SENTRY__||{extensions:{},hub:void 0},i.GLOBAL_OBJ}/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */function d(e){let t=u(),n=h(t);return f(t,e),n}/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */function p(){// Get main carrier (global for every environment)
let e=u();if(e.__SENTRY__&&e.__SENTRY__.acs){let t=e.__SENTRY__.acs.getCurrentHub();if(t)return t}// Return hub that lives on a global object
return function(e=u()){// Return hub that lives on a global object
return(!(e&&e.__SENTRY__&&e.__SENTRY__.hub)||h(e).isOlderThan(4))&&f(e,new c),h(e)}(e)}/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */function h(e){return(0,i.getGlobalSingleton)("hub",()=>new c,e)}/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */function f(e,t){if(!e)return!1;let n=e.__SENTRY__=e.__SENTRY__||{};return n.hub=t,!0}}),W("2ZW7W",function(e,t){w(e.exports,"DEFAULT_ENVIRONMENT",()=>n);let n="production"}),W("b5H6o",function(e,t){w(e.exports,"Scope",()=>o);var n=z("9jSUf"),r=z("lVAot"),i=z("1A3EQ"),s=z("2vdtW"),a=z("kcvLi");/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */class o{/** Flag if notifying is happening. *//** Callback for client to receive scope changes. *//** Callback list that will be called after {@link applyToEvent}. *//** Array of breadcrumbs. *//** User *//** Tags *//** Extra *//** Contexts *//** Attachments *//** Propagation Context for distributed tracing *//**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   *//** Fingerprint *//** Severity */// eslint-disable-next-line deprecation/deprecation
/** Transaction Name *//** Span *//** Session *//** Request Mode Session Status */// NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext=l()}/**
   * Inherit values from the parent scope.
   * @param scope to clone.
   */static clone(e){let t=new o;return e&&(t._breadcrumbs=[...e._breadcrumbs],t._tags={...e._tags},t._extra={...e._extra},t._contexts={...e._contexts},t._user=e._user,t._level=e._level,t._span=e._span,t._session=e._session,t._transactionName=e._transactionName,t._fingerprint=e._fingerprint,t._eventProcessors=[...e._eventProcessors],t._requestSession=e._requestSession,t._attachments=[...e._attachments],t._sdkProcessingMetadata={...e._sdkProcessingMetadata},t._propagationContext={...e._propagationContext}),t}/**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */addScopeListener(e){this._scopeListeners.push(e)}/**
   * @inheritDoc
   */addEventProcessor(e){return this._eventProcessors.push(e),this}/**
   * @inheritDoc
   */setUser(e){return this._user=e||{},this._session&&(0,a.updateSession)(this._session,{user:e}),this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getUser(){return this._user}/**
   * @inheritDoc
   */getRequestSession(){return this._requestSession}/**
   * @inheritDoc
   */setRequestSession(e){return this._requestSession=e,this}/**
   * @inheritDoc
   */setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setLevel(e){return this._level=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setSpan(e){return this._span=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSpan(){return this._span}/**
   * @inheritDoc
   */getTransaction(){// Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
// have a pointer to the currently-active transaction.
let e=this.getSpan();return e&&e.transaction}/**
   * @inheritDoc
   */setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSession(){return this._session}/**
   * @inheritDoc
   */update(e){if(!e)return this;if("function"==typeof e){let t=e(this);return t instanceof o?t:this}return e instanceof o?(this._tags={...this._tags,...e._tags},this._extra={...this._extra,...e._extra},this._contexts={...this._contexts,...e._contexts},e._user&&Object.keys(e._user).length&&(this._user=e._user),e._level&&(this._level=e._level),e._fingerprint&&(this._fingerprint=e._fingerprint),e._requestSession&&(this._requestSession=e._requestSession),e._propagationContext&&(this._propagationContext=e._propagationContext)):(0,i.isPlainObject)(e)&&(this._tags={...this._tags,...e.tags},this._extra={...this._extra,...e.extra},this._contexts={...this._contexts,...e.contexts},e.user&&(this._user=e.user),e.level&&(this._level=e.level),e.fingerprint&&(this._fingerprint=e.fingerprint),e.requestSession&&(this._requestSession=e.requestSession),e.propagationContext&&(this._propagationContext=e.propagationContext)),this}/**
   * @inheritDoc
   */clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this._attachments=[],this._propagationContext=l(),this}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let n="number"==typeof t?t:100;// No data has been changed, so don't notify scope listeners
if(n<=0)return this;let i={timestamp:(0,r.dateTimestampInSeconds)(),...e},s=this._breadcrumbs;return s.push(i),this._breadcrumbs=s.length>n?s.slice(-n):s,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}/**
   * @inheritDoc
   */clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */addAttachment(e){return this._attachments.push(e),this}/**
   * @inheritDoc
   */getAttachments(){return this._attachments}/**
   * @inheritDoc
   */clearAttachments(){return this._attachments=[],this}/**
   * Applies data from the scope to the event and runs all event processors on it.
   *
   * @param event Event
   * @param hint Object containing additional information about the original exception, for use by the event processors.
   * @hidden
   */applyToEvent(e,t={},n){// We want to set the trace context for normal events only if there isn't already
// a trace context on the event. There is a product feature in place where we link
// errors with transaction and it relies on that.
if(this._extra&&Object.keys(this._extra).length&&(e.extra={...this._extra,...e.extra}),this._tags&&Object.keys(this._tags).length&&(e.tags={...this._tags,...e.tags}),this._user&&Object.keys(this._user).length&&(e.user={...this._user,...e.user}),this._contexts&&Object.keys(this._contexts).length&&(e.contexts={...this._contexts,...e.contexts}),this._level&&(e.level=this._level),this._transactionName&&(e.transaction=this._transactionName),this._span){e.contexts={trace:this._span.getTraceContext(),...e.contexts};let t=this._span.transaction;if(t){e.sdkProcessingMetadata={dynamicSamplingContext:t.getDynamicSamplingContext(),...e.sdkProcessingMetadata};let n=t.name;n&&(e.tags={transaction:n,...e.tags})}}this._applyFingerprint(e);let r=this._getBreadcrumbs(),i=[...e.breadcrumbs||[],...r];// TODO (v8): Update this order to be: Global > Client > Scope
return e.breadcrumbs=i.length>0?i:void 0,e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...this._sdkProcessingMetadata,propagationContext:this._propagationContext},(0,s.notifyEventProcessors)([...n||[],...(0,s.getGlobalEventProcessors)(),...this._eventProcessors],e,t)}/**
   * Add data which will be accessible during event processing but won't get sent to Sentry
   */setSDKProcessingMetadata(e){return this._sdkProcessingMetadata={...this._sdkProcessingMetadata,...e},this}/**
   * @inheritDoc
   */setPropagationContext(e){return this._propagationContext=e,this}/**
   * @inheritDoc
   */getPropagationContext(){return this._propagationContext}/**
   * Get the breadcrumbs for this scope.
   */_getBreadcrumbs(){return this._breadcrumbs}/**
   * This will be called on every set call.
   */_notifyScopeListeners(){// We need this check for this._notifyingListeners to be able to work on scope during updates
// If this check is not here we'll produce endless recursion when something is done with the scope
// during the callback.
this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach(e=>{e(this)}),this._notifyingListeners=!1)}/**
   * Applies fingerprint from the scope to the event if there's one,
   * uses message if there's one instead or get rid of empty fingerprint
   */_applyFingerprint(e){// Make sure it's an array first and we actually have something in place
e.fingerprint=e.fingerprint?(0,n.arrayify)(e.fingerprint):[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}}function l(){return{traceId:(0,n.uuid4)(),spanId:(0,n.uuid4)().substring(16)}}}),W("2vdtW",function(e,t){w(e.exports,"getGlobalEventProcessors",()=>a),w(e.exports,"addGlobalEventProcessor",()=>o),w(e.exports,"notifyEventProcessors",()=>/**
 * Process an array of event processors, returning the processed event (or `null` if the event was dropped).
 */function e(t,n,a,o=0){return new s.SyncPromise((s,l)=>{let c=t[o];if(null===n||"function"!=typeof c)s(n);else{let u=c({...n},a);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&c.id&&null===u&&(0,i.logger).log(`Event processor "${c.id}" dropped event`),(0,r.isThenable)(u)?u.then(n=>e(t,n,a,o+1).then(s)).then(null,l):e(t,u,a,o+1).then(s).then(null,l)}})});var n=z("3dCyu"),r=z("1A3EQ"),i=z("ljiYl"),s=z("fErff");/**
 * Returns the global event processors.
 */function a(){return(0,n.getGlobalSingleton)("globalEventProcessors",()=>[])}/**
 * Add a EventProcessor to be kept globally.
 * @param callback EventProcessor to add
 */function o(e){a().push(e)}}),W("fErff",function(e,t){w(e.exports,"resolvedSyncPromise",()=>s),w(e.exports,"SyncPromise",()=>o),w(e.exports,"rejectedSyncPromise",()=>a);var n,r,i=z("1A3EQ");// Overloads so we can call resolvedSyncPromise without arguments and generic argument
/**
 * Creates a resolved sync promise.
 *
 * @param value the value to resolve the promise with
 * @returns the resolved sync promise
 */function s(e){return new o(t=>{t(e)})}/**
 * Creates a rejected sync promise.
 *
 * @param value the value to reject the promise with
 * @returns the rejected sync promise
 */function a(e){return new o((t,n)=>{n(e)})}(n=r||(r={}))[n.PENDING=0]="PENDING",n[n.RESOLVED=1]="RESOLVED",n[n.REJECTED=2]="REJECTED";/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */class o{constructor(e){o.prototype.__init.call(this),o.prototype.__init2.call(this),o.prototype.__init3.call(this),o.prototype.__init4.call(this),this._state=r.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}/** JSDoc */then(e,t){return new o((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else // TODO: FIXME
n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()})}/** JSDoc */catch(e){return this.then(e=>e,e)}/** JSDoc */finally(e){return new o((t,n)=>{let r,i;return this.then(t=>{i=!1,r=t,e&&e()},t=>{i=!0,r=t,e&&e()}).then(()=>{if(i){n(r);return}t(r)})})}/** JSDoc */__init(){this._resolve=e=>{this._setResult(r.RESOLVED,e)}}/** JSDoc */__init2(){this._reject=e=>{this._setResult(r.REJECTED,e)}}/** JSDoc */__init3(){this._setResult=(e,t)=>{if(this._state===r.PENDING){if((0,i.isThenable)(t)){t.then(this._resolve,this._reject);return}this._state=e,this._value=t,this._executeHandlers()}}}/** JSDoc */__init4(){this._executeHandlers=()=>{if(this._state===r.PENDING)return;let e=this._handlers.slice();this._handlers=[],e.forEach(e=>{e[0]||(this._state===r.RESOLVED&&e[1](this._value),this._state===r.REJECTED&&e[2](this._value),e[0]=!0)})}}}}),W("kcvLi",function(e,t){w(e.exports,"makeSession",()=>s),w(e.exports,"updateSession",()=>a),w(e.exports,"closeSession",()=>o);var n=z("csRh4"),r=z("lVAot"),i=z("9jSUf");/**
 * Creates a new `Session` object by setting certain default parameters. If optional @param context
 * is passed, the passed properties are applied to the session object.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns a new `Session` object
 */function s(e){// Both timestamp and started are in seconds since the UNIX epoch.
let t=(0,r.timestampInSeconds)(),s={sid:(0,i.uuid4)(),init:!0,timestamp:t,started:t,duration:0,status:"ok",errors:0,ignoreDuration:!1,toJSON:()=>(0,n.dropUndefinedKeys)({sid:`${s.sid}`,init:s.init,// Make sure that sec is converted to ms for date constructor
    started:new Date(1e3*s.started).toISOString(),timestamp:new Date(1e3*s.timestamp).toISOString(),status:s.status,errors:s.errors,did:"number"==typeof s.did||"string"==typeof s.did?`${s.did}`:void 0,duration:s.duration,attrs:{release:s.release,environment:s.environment,ip_address:s.ipAddress,user_agent:s.userAgent}})};return e&&a(s,e),s}/**
 * Updates a session object with the properties passed in the context.
 *
 * Note that this function mutates the passed object and returns void.
 * (Had to do this instead of returning a new and updated session because closing and sending a session
 * makes an update to the session after it was passed to the sending logic.
 * @see BaseClient.captureSession )
 *
 * @param session the `Session` to update
 * @param context the `SessionContext` holding the properties that should be updated in @param session
 */// eslint-disable-next-line complexity
function a(e,t={}){if(!t.user||(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||(0,r.timestampInSeconds)(),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:(0,i.uuid4)()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),"number"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if("number"==typeof t.duration)e.duration=t.duration;else{let t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),"number"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}/**
 * Closes a session by setting its status and updating the session object with it.
 * Internally calls `updateSession` to update the passed session object.
 *
 * Note that this function mutates the passed session (@see updateSession for explanation).
 *
 * @param session the `Session` object to be closed
 * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,
 *               this function will keep the previously set status, unless it was `'ok'` in which case
 *               it is changed to `'exited'`.
 */function o(e,t){let n={};t?n={status:t}:"ok"===e.status&&(n={status:"exited"}),a(e,n)}}),W("7qvsU",function(e,t){w(e.exports,"defaultIntegrations",()=>E),w(e.exports,"init",()=>T),w(e.exports,"showReportDialog",()=>k),w(e.exports,"forceLoad",()=>x),w(e.exports,"onLoad",()=>I),w(e.exports,"wrap",()=>C),w(e.exports,"captureUserFeedback",()=>N);var n=z("fSbgy"),r=z("i03gv"),i=z("2h8TT"),s=z("4aeFi"),a=z("9V7wl"),o=z("3OPQI"),l=z("ljiYl"),c=z("bWqC9"),u=z("q7nNB"),d=z("1oEwI"),p=z("lJotG"),h=z("jrBuy"),f=z("fa62i"),_=z("5DHQv"),m=z("9zhFP"),g=z("49tkP"),y=z("Yr1pj"),S=z("78zHj"),b=z("iJSIC"),v=z("jE7mF");let E=[new a.InboundFilters,new a.FunctionToString,new f.TryCatch,new _.Breadcrumbs,new h.GlobalHandlers,new m.LinkedErrors,new y.Dedupe,new g.HttpContext];/**
 * A magic string that build tooling can leverage in order to inject a release value into the SDK.
 *//**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * ```
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 *
 * ```
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */function T(e={}){void 0===e.defaultIntegrations&&(e.defaultIntegrations=E),void 0===e.release&&("string"==typeof __SENTRY_RELEASE__&&(e.release=__SENTRY_RELEASE__),p.WINDOW.SENTRY_RELEASE&&p.WINDOW.SENTRY_RELEASE.id&&(e.release=p.WINDOW.SENTRY_RELEASE.id)),void 0===e.autoSessionTracking&&(e.autoSessionTracking=!0),void 0===e.sendClientReports&&(e.sendClientReports=!0);let t={...e,stackParser:(0,c.stackParserFromStackParserOptions)(e.stackParser||S.defaultStackParser),integrations:(0,r.getIntegrationsToSetup)(e),transport:e.transport||((0,u.supportsFetch)()?b.makeFetchTransport:v.makeXHRTransport)};(0,s.initAndBind)(d.BrowserClient,t),e.autoSessionTracking&&/**
 * Enable automatic Session Tracking for the initial page load.
 */function(){if(void 0===p.WINDOW.document){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,l.logger).warn("Session tracking in non-browser environment with @sentry/browser is not supported.");return}let e=(0,n.getCurrentHub)();// The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and
// @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are
// pinned at the same version in package.json, but there are edge cases where it's possible. See
// https://github.com/getsentry/sentry-javascript/issues/3207 and
// https://github.com/getsentry/sentry-javascript/issues/3234 and
// https://github.com/getsentry/sentry-javascript/issues/3278.
e.captureSession&&(// The session duration for browser sessions does not track a meaningful
// concept that can be used as a metric.
// Automatically captured sessions are akin to page views, and thus we
// discard their duration.
R(e),// We want to create a session for every navigation as well
(0,o.addInstrumentationHandler)("history",({from:e,to:t})=>{// Don't create an additional session for the initial route or if the location did not change
void 0===e||e===t||R((0,n.getCurrentHub)())}))}()}/**
 * Present the user with a report dialog.
 *
 * @param options Everything is optional, we try to fetch all info need from the global scope.
 */function k(e={},t=(0,n.getCurrentHub)()){// doesn't work without a document (React Native)
if(!p.WINDOW.document){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,l.logger).error("Global document not defined in showReportDialog call");return}let{client:r,scope:s}=t.getStackTop(),a=e.dsn||r&&r.getDsn();if(!a){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,l.logger).error("DSN not configured for showReportDialog call");return}s&&(e.user={...s.getUser(),...e.user}),e.eventId||(e.eventId=t.lastEventId());let o=(0,p.WINDOW).document.createElement("script");o.async=!0,o.crossOrigin="anonymous",o.src=(0,i.getReportDialogEndpoint)(a,e),e.onLoad&&(o.onload=e.onLoad);let c=p.WINDOW.document.head||p.WINDOW.document.body;c?c.appendChild(o):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,l.logger).error("Not injecting report dialog. No injection point found in HTML")}/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */function x(){// Noop
}/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */function I(e){e()}/**
 * Wrap code within a try/catch block so the SDK is able to capture errors.
 *
 * @deprecated This function will be removed in v8.
 * It is not part of Sentry's official API and it's easily replaceable by using a try/catch block
 * and calling Sentry.captureException.
 *
 * @param fn A function to wrap.
 *
 * @returns The result of wrapped function call.
 */// TODO(v8): Remove this function
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function C(e){return(0,p.wrap)(e)()}function R(e){e.startSession({ignoreDuration:!0}),e.captureSession()}/**
 * Captures user feedback and sends it to Sentry.
 */function N(e){let t=(0,n.getCurrentHub)().getClient();t&&t.captureUserFeedback(e)}}),W("i03gv",function(e,t){w(e.exports,"getIntegrationsToSetup",()=>o),w(e.exports,"setupIntegrations",()=>l),w(e.exports,"setupIntegration",()=>c),w(e.exports,"addIntegration",()=>u);var n=z("9jSUf"),r=z("ljiYl"),i=z("2vdtW"),s=z("fSbgy");let a=[];/** Gets integrations to install */function o(e){let t;let r=e.defaultIntegrations||[],i=e.integrations;// We flag default instances, so that later we can tell them apart from any user-created instances of the same class
r.forEach(e=>{e.isDefaultInstance=!0}),t=Array.isArray(i)?[...r,...i]:"function"==typeof i?(0,n.arrayify)(i(r)):r;let s=/** Map of integrations assigned to a client *//**
 * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to
 * preseve the order of integrations in the array.
 *
 * @private
 */function(e){let t={};return e.forEach(e=>{let{name:n}=e,r=t[n];// We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a
// default instance to overwrite an existing user instance
r&&!r.isDefaultInstance&&e.isDefaultInstance||(t[n]=e)}),Object.keys(t).map(e=>t[e])}(t),a=// Polyfill for Array.findIndex(), which is not supported in ES5
function(e,t){for(let n=0;n<e.length;n++)if(!0===t(e[n]))return n;return -1}(s,e=>"Debug"===e.name);if(-1!==a){let[e]=s.splice(a,1);s.push(e)}return s}/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */function l(e,t){let n={};return t.forEach(t=>{// guard against empty provided integrations
t&&c(e,t,n)}),n}/** Setup a single integration.  */function c(e,t,n){if(n[t.name]=t,-1===a.indexOf(t.name)&&(t.setupOnce(i.addGlobalEventProcessor,s.getCurrentHub),a.push(t.name)),e.on&&"function"==typeof t.preprocessEvent){let n=t.preprocessEvent.bind(t);e.on("preprocessEvent",(t,r)=>n(t,r,e))}if(e.addEventProcessor&&"function"==typeof t.processEvent){let n=t.processEvent.bind(t),r=Object.assign((t,r)=>n(t,r,e),{id:t.name});e.addEventProcessor(r)}("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).log(`Integration installed: ${t.name}`)}/** Add an integration to the current hub's client. */function u(e){let t=(0,s.getCurrentHub)().getClient();if(!t||!t.addIntegration){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Cannot add integration "${e.name}" because no SDK Client is available.`);return}t.addIntegration(e)}}),W("2h8TT",function(e,t){w(e.exports,"getEnvelopeEndpointWithUrlEncodedAuth",()=>s),w(e.exports,"getReportDialogEndpoint",()=>a);var n=z("3gbAm"),r=z("csRh4");/** Returns the prefix to construct Sentry ingestion API endpoints. */function i(e){let t=e.protocol?`${e.protocol}:`:"",n=e.port?`:${e.port}`:"";return`${t}//${e.host}${n}${e.path?`/${e.path}`:""}/api/`}/**
 * Returns the envelope endpoint URL with auth in the query string.
 *
 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
 */function s(e,// options: ClientOptions = {} as ClientOptions,
t={}){// TODO (v8): Use this code instead
// const { tunnel, _metadata = {} } = options;
// return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;
let n="string"==typeof t?t:t.tunnel,s="string"!=typeof t&&t._metadata?t._metadata.sdk:void 0;return n||`${i(e)}${e.projectId}/envelope/?${(0,r.urlEncode)({// We send only the minimum set of required information. See
// https://github.com/getsentry/sentry-javascript/issues/2572.
sentry_key:e.publicKey,sentry_version:"7",...s&&{sentry_client:`${s.name}/${s.version}`}})}`}/** Returns the url to the report dialog endpoint. */function a(e,t){let r=(0,n.makeDsn)(e);if(!r)return"";let s=`${i(r)}embed/error-page/`,a=`dsn=${(0,n.dsnToString)(r)}`;for(let e in t)if("dsn"!==e){if("user"===e){let e=t.user;if(!e)continue;e.name&&(a+=`&name=${encodeURIComponent(e.name)}`),e.email&&(a+=`&email=${encodeURIComponent(e.email)}`)}else a+=`&${encodeURIComponent(e)}=${encodeURIComponent(t[e])}`}return`${s}?${a}`}}),W("3gbAm",function(e,t){w(e.exports,"dsnToString",()=>i),w(e.exports,"dsnFromString",()=>s),w(e.exports,"makeDsn",()=>o);var n=z("ljiYl");/** Regular expression used to parse a Dsn. */let r=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;/**
 * Renders the string representation of this Dsn.
 *
 * By default, this will render the public representation without the password
 * component. To get the deprecated private representation, set `withPassword`
 * to true.
 *
 * @param withPassword When set to true, the password will be included.
 */function i(e,t=!1){let{host:n,path:r,pass:i,port:s,projectId:a,protocol:o,publicKey:l}=e;return`${o}://${l}${t&&i?`:${i}`:""}@${n}${s?`:${s}`:""}/${r?`${r}/`:r}${a}`}/**
 * Parses a Dsn from a given string.
 *
 * @param str A Dsn as string
 * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string
 */function s(e){let t=r.exec(e);if(!t){// This should be logged to the console
// eslint-disable-next-line no-console
console.error(`Invalid Sentry Dsn: ${e}`);return}let[n,i,s="",o,l="",c]=t.slice(1),u="",d=c,p=d.split("/");if(p.length>1&&(u=p.slice(0,-1).join("/"),d=p.pop()),d){let e=d.match(/^\d+/);e&&(d=e[0])}return a({host:o,pass:s,path:u,projectId:d,port:l,protocol:n,publicKey:i})}function a(e){return{protocol:e.protocol,publicKey:e.publicKey||"",pass:e.pass||"",host:e.host,port:e.port||"",path:e.path||"",projectId:e.projectId}}/**
 * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.
 * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source
 */function o(e){let t="string"==typeof e?s(e):a(e);if(t&&function(e){if(!("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__))return!0;let{port:t,projectId:r,protocol:i}=e,s=["protocol","publicKey","host","projectId"].find(t=>!e[t]&&((0,n.logger).error(`Invalid Sentry Dsn: ${t} missing`),!0));return!s&&(r.match(/^\d+$/)?"http"===i||"https"===i?!(t&&isNaN(parseInt(t,10)))||((0,n.logger).error(`Invalid Sentry Dsn: Invalid port ${t}`),!1):((0,n.logger).error(`Invalid Sentry Dsn: Invalid protocol ${i}`),!1):((0,n.logger).error(`Invalid Sentry Dsn: Invalid projectId ${r}`),!1))}(t))return t}}),W("4aeFi",function(e,t){w(e.exports,"initAndBind",()=>i);var n=z("ljiYl"),r=z("fSbgy");/** A class object that can instantiate Client objects. *//**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instantiate.
 * @param options Options to pass to the client.
 */function i(e,t){!0===t.debug&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__?(0,n.logger).enable():// eslint-disable-next-line no-console
console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle."));let i=(0,r.getCurrentHub)(),s=i.getScope();s.update(t.initialScope);let a=new e(t);i.bindClient(a)}}),W("9V7wl",function(e,t){w(e.exports,"FunctionToString",()=>z("5pAFD").FunctionToString),w(e.exports,"InboundFilters",()=>z("aKxAe").InboundFilters),z("5pAFD"),z("aKxAe")}),W("5pAFD",function(e,t){let n;w(e.exports,"FunctionToString",()=>i);var r=z("csRh4");/** Patch toString calls to return proper name for wrapped functions */class i{/**
   * @inheritDoc
   */static __initStatic(){this.id="FunctionToString"}/**
   * @inheritDoc
   */constructor(){this.name=i.id}/**
   * @inheritDoc
   */setupOnce(){// eslint-disable-next-line @typescript-eslint/unbound-method
n=Function.prototype.toString;// intrinsics (like Function.prototype) might be immutable in some environments
// e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)
try{// eslint-disable-next-line @typescript-eslint/no-explicit-any
Function.prototype.toString=function(...e){let t=(0,r.getOriginalFunction)(this)||this;return n.apply(t,e)}}catch(e){// ignore errors here, just don't patch this
}}}i.__initStatic()}),W("aKxAe",function(e,t){w(e.exports,"InboundFilters",()=>o);var n=z("9jSUf"),r=z("ljiYl"),i=z("VBQMn");// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
let s=[/^Script error\.?$/,/^Javascript error: Script error\.? on line 0$/],a=[/^.*\/healthcheck$/,/^.*\/healthy$/,/^.*\/live$/,/^.*\/ready$/,/^.*\/heartbeat$/,/^.*\/health$/,/^.*\/healthz$/];/** Options for the InboundFilters integration *//** Inbound filters configurable by the user */class o{/**
   * @inheritDoc
   */static __initStatic(){this.id="InboundFilters"}/**
   * @inheritDoc
   */constructor(e={}){this.name=o.id,this._options=e}/**
   * @inheritDoc
   */setupOnce(e,t){// noop
}/** @inheritDoc */processEvent(e,t,o){var c;let u=o.getOptions(),d=/** JSDoc */function(e={},t={}){return{allowUrls:[...e.allowUrls||[],...t.allowUrls||[]],denyUrls:[...e.denyUrls||[],...t.denyUrls||[]],ignoreErrors:[...e.ignoreErrors||[],...t.ignoreErrors||[],...e.disableErrorDefaults?[]:s],ignoreTransactions:[...e.ignoreTransactions||[],...t.ignoreTransactions||[],...e.disableTransactionDefaults?[]:a],ignoreInternal:void 0===e.ignoreInternal||e.ignoreInternal}}(this._options,u);return(d.ignoreInternal&&function(e){try{// @ts-expect-error can't be a sentry error if undefined
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return"SentryError"===e.exception.values[0].type}catch(e){// ignore
}return!1}(e)?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Event dropped due to being internal Sentry Error.
Event: ${(0,n.getEventDescription)(e)}`),0):(c=d.ignoreErrors,// If event.type, this is not an error
!e.type&&c&&c.length&&(function(e){let t;let i=[];e.message&&i.push(e.message);try{// @ts-expect-error Try catching to save bundle size
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
t=e.exception.values[e.exception.values.length-1]}catch(e){// try catching to save bundle size checking existence of variables
}return t&&t.value&&(i.push(t.value),t.type&&i.push(`${t.type}: ${t.value}`)),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&0===i.length&&(0,r.logger).error(`Could not extract message for event ${(0,n.getEventDescription)(e)}`),i})(e).some(e=>(0,i.stringMatchesSomePattern)(e,c)))?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${(0,n.getEventDescription)(e)}`),0):!function(e,t){if("transaction"!==e.type||!t||!t.length)return!1;let n=e.transaction;return!!n&&(0,i.stringMatchesSomePattern)(n,t)}(e,d.ignoreTransactions)?!function(e,t){// TODO: Use Glob instead?
if(!t||!t.length)return!1;let n=l(e);return!!n&&(0,i.stringMatchesSomePattern)(n,t)}(e,d.denyUrls)?function(e,t){// TODO: Use Glob instead?
if(!t||!t.length)return!0;let n=l(e);return!n||(0,i.stringMatchesSomePattern)(n,t)}(e,d.allowUrls)||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${(0,n.getEventDescription)(e)}.
Url: ${l(e)}`),0):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${(0,n.getEventDescription)(e)}.
Url: ${l(e)}`),0):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).warn(`Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${(0,n.getEventDescription)(e)}`),0))?e:null}}function l(e){try{let t;try{// @ts-expect-error we only care about frames if the whole thing here is defined
t=e.exception.values[0].stacktrace.frames}catch(e){// ignore
}return t?function(e=[]){for(let t=e.length-1;t>=0;t--){let n=e[t];if(n&&"<anonymous>"!==n.filename&&"[native code]"!==n.filename)return n.filename||null}return null}(t):null}catch(t){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,r.logger).error(`Cannot extract url for event ${(0,n.getEventDescription)(e)}`),null}}o.__initStatic()}),W("3OPQI",function(e,t){let n,r,i;w(e.exports,"SENTRY_XHR_DATA_KEY",()=>h),w(e.exports,"addInstrumentationHandler",()=>m);var s=z("1A3EQ"),a=z("ljiYl"),o=z("csRh4"),l=z("bWqC9"),c=z("q7nNB"),u=z("3dCyu"),d=z("hwYj7");// eslint-disable-next-line deprecation/deprecation
let p=(0,u.getGlobalObject)(),h="__sentry_xhr_v2__",f={},_={};/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */function m(e,t){f[e]=f[e]||[],f[e].push(t),/** Instruments given API */function(e){if(!_[e])switch(_[e]=!0,e){case"console":"console"in u.GLOBAL_OBJ&&(0,a.CONSOLE_LEVELS).forEach(function(e){e in u.GLOBAL_OBJ.console&&(0,o.fill)(u.GLOBAL_OBJ.console,e,function(t){return a.originalConsoleMethods[e]=t,function(...t){g("console",{args:t,level:e});let n=a.originalConsoleMethods[e];n&&n.apply(u.GLOBAL_OBJ.console,t)}})});break;case"dom":/** JSDoc */(function(){if(!p.document)return;// Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
// handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
// we instrument `addEventListener` so that we don't end up attaching this handler twice.
let e=g.bind(null,"dom"),t=b(e,!0);p.document.addEventListener("click",t,!1),p.document.addEventListener("keypress",t,!1),// After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
// clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
// way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
// could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
// guaranteed to fire at least once.)
["EventTarget","Node"].forEach(t=>{// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
let n=p[t]&&p[t].prototype;// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&((0,o.fill)(n,"addEventListener",function(t){return function(n,r,i){if("click"===n||"keypress"==n)try{let r=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},s=r[n]=r[n]||{refCount:0};if(!s.handler){let r=b(e);s.handler=r,t.call(this,n,r,i)}s.refCount++}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return t.call(this,n,r,i)}}),(0,o.fill)(n,"removeEventListener",function(e){return function(t,n,r){if("click"===t||"keypress"==t)try{let n=this.__sentry_instrumentation_handlers__||{},i=n[t];i&&(i.refCount--,i.refCount<=0&&(e.call(this,t,i.handler,r),i.handler=void 0,delete n[t]),0===Object.keys(n).length&&delete this.__sentry_instrumentation_handlers__)}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return e.call(this,t,n,r)}}))})})();break;case"xhr":/** JSDoc */(function(){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
if(!p.XMLHttpRequest)return;let e=XMLHttpRequest.prototype;(0,o.fill)(e,"open",function(e){return function(...t){let n=t[1],r=this[h]={// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
method:(0,s.isString)(t[0])?t[0].toUpperCase():t[0],url:t[1],request_headers:{}};(0,s.isString)(n)&&"POST"===r.method&&n.match(/sentry_key/)&&(this.__sentry_own_request__=!0);let i=()=>{// For whatever reason, this is not the same instance here as from the outer method
let e=this[h];if(e&&4===this.readyState){try{// touching statusCode in some platforms throws
// an exception
e.status_code=this.status}catch(e){/* do nothing */}g("xhr",{args:t,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:this})}};return"onreadystatechange"in this&&"function"==typeof this.onreadystatechange?(0,o.fill)(this,"onreadystatechange",function(e){return function(...t){return i(),e.apply(this,t)}}):this.addEventListener("readystatechange",i),// Intercepting `setRequestHeader` to access the request headers of XHR instance.
// This will only work for user/library defined headers, not for the default/browser-assigned headers.
// Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.
(0,o.fill)(this,"setRequestHeader",function(e){return function(...t){let[n,r]=t,i=this[h];return i&&(i.request_headers[n.toLowerCase()]=r),e.apply(this,t)}}),e.apply(this,t)}}),(0,o.fill)(e,"send",function(e){return function(...t){let n=this[h];return n&&void 0!==t[0]&&(n.body=t[0]),g("xhr",{args:t,startTimestamp:Date.now(),xhr:this}),e.apply(this,t)}})})();break;case"fetch":(0,c.supportsNativeFetch)()&&(0,o.fill)(u.GLOBAL_OBJ,"fetch",function(e){return function(...t){let{method:n,url:r}=/**
 * Parses the fetch arguments to find the used Http method and the url of the request
 */function(e){if(0===e.length)return{method:"GET",url:""};if(2===e.length){let[t,n]=e;return{url:S(t),method:y(n,"method")?String(n.method).toUpperCase():"GET"}}let t=e[0];return{url:S(t),method:y(t,"method")?String(t.method).toUpperCase():"GET"}}(t),i={args:t,fetchData:{method:n,url:r},startTimestamp:Date.now()};// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return g("fetch",{...i}),e.apply(u.GLOBAL_OBJ,t).then(e=>(g("fetch",{...i,endTimestamp:Date.now(),response:e}),e),e=>{// NOTE: If you are a Sentry user, and you are seeing this stack frame,
//       it means the sentry.javascript SDK caught an error invoking your application code.
//       This is expected behavior and NOT indicative of a bug with sentry.javascript.
throw g("fetch",{...i,endTimestamp:Date.now(),error:e}),e})}});break;case"history":/** JSDoc */(function(){if(!(0,d.supportsHistory)())return;let e=p.onpopstate;/** @hidden */function t(e){return function(...t){let r=t.length>2?t[2]:void 0;if(r){// coerce to string (this is what pushState does)
let e=n,t=String(r);// keep track of the current URL state, as we always receive only the updated state
n=t,g("history",{from:e,to:t})}return e.apply(this,t)}}p.onpopstate=function(...t){let r=p.location.href,i=n;if(n=r,g("history",{from:i,to:r}),e)// https://github.com/getsentry/sentry-javascript/issues/3344
// https://github.com/bugsnag/bugsnag-js/issues/469
try{return e.apply(this,t)}catch(e){// no-empty
}},(0,o.fill)(p.history,"pushState",t),(0,o.fill)(p.history,"replaceState",t)})();break;case"error":v=p.onerror,p.onerror=function(e,t,n,r,i){return g("error",{column:r,error:i,line:n,msg:e,url:t}),!!v&&!v.__SENTRY_LOADER__&&v.apply(this,arguments)},p.onerror.__SENTRY_INSTRUMENTED__=!0;break;case"unhandledrejection":E=p.onunhandledrejection,p.onunhandledrejection=function(e){return g("unhandledrejection",e),!E||!!E.__SENTRY_LOADER__||E.apply(this,arguments)},p.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0;break;default:("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,a.logger).warn("unknown instrumentation type:",e);return}}(e)}/** JSDoc */function g(e,t){if(e&&f[e])for(let n of f[e]||[])try{n(t)}catch(t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,a.logger).error(`Error while triggering instrumentation handler.
Type: ${e}
Name: ${(0,l.getFunctionName)(n)}
Error:`,t)}}function y(e,t){return!!e&&"object"==typeof e&&!!e[t]}function S(e){return"string"==typeof e?e:e?y(e,"url")?e.url:e.toString?e.toString():"":""}/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */function b(e,t=!1){return n=>{// It's possible this handler might trigger multiple times for the same
// event (e.g. event propagation through node ancestors).
// Ignore if we've already captured that event.
if(!n||n._sentryCaptured||/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */function(e){// We are only interested in filtering `keypress` events for now.
if("keypress"!==e.type)return!1;try{let t=e.target;if(!t||!t.tagName)return!0;// Only consider keypress events on actual input elements. This will disregard keypresses targeting body
// e.g.tabbing through elements, hotkeys, etc.
if("INPUT"===t.tagName||"TEXTAREA"===t.tagName||t.isContentEditable)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}return!0}(n))return;// Mark event as "seen"
(0,o.addNonEnumerableProperty)(n,"_sentryCaptured",!0);let s="keypress"===n.type?"input":n.type;(void 0===i||!/**
 * Check whether two DOM events are similar to eachother. For example, two click events on the same button.
 */function(e,t){// If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
if(e.type!==t.type)return!1;try{// If both events have the same type, it's still possible that actions were performed on different targets.
// e.g. 2 clicks on different buttons.
if(e.target!==t.target)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}// If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
// to which an event listener was attached), we treat them as the same action, as we want to capture
// only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
return!0}(i,n))&&(e({event:n,name:s,global:t}),i=n),// Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
clearTimeout(r),r=p.setTimeout(()=>{i=void 0},1e3)}}let v=null,E=null}),W("bWqC9",function(e,t){w(e.exports,"createStackParser",()=>i),w(e.exports,"stackParserFromStackParserOptions",()=>s),w(e.exports,"getFunctionName",()=>o),z("cykBA");// Used to sanitize webpack (error: *) wrapped stack errors
let n=/\(error: (.*)\)/,r=/captureMessage|captureException/;/**
 * Creates a stack parser with the supplied line parsers
 *
 * StackFrames are returned in the correct order for Sentry Exception
 * frames and with Sentry SDK internal frames removed from the top and bottom
 *
 */function i(...e){let t=e.sort((e,t)=>e[0]-t[0]).map(e=>e[1]);return(e,i=0)=>{let s=[],a=e.split("\n");for(let e=i;e<a.length;e++){let r=a[e];// Ignore lines over 1kb as they are unlikely to be stack frames.
// Many of the regular expressions use backtracking which results in run time that increases exponentially with
// input size. Huge strings can result in hangs/Denial of Service:
// https://github.com/getsentry/sentry-javascript/issues/2286
if(r.length>1024)continue;// https://github.com/getsentry/sentry-javascript/issues/5459
// Remove webpack (error: *) wrappers
let i=n.test(r)?r.replace(n,"$1"):r;// https://github.com/getsentry/sentry-javascript/issues/7813
// Skip Error: lines
if(!i.match(/\S*Error: /)){for(let e of t){let t=e(i);if(t){s.push(t);break}}if(s.length>=50)break}}return(/**
 * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.
 * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the
 * function that caused the crash is the last frame in the array.
 * @hidden
 */function(e){if(!e.length)return[];let t=Array.from(e);return/sentryWrapped/.test(t[t.length-1].function||"")&&t.pop(),// Reversing in the middle of the procedure allows us to just pop the values off the stack
t.reverse(),r.test(t[t.length-1].function||"")&&(t.pop(),r.test(t[t.length-1].function||"")&&t.pop()),t.slice(0,50).map(e=>({...e,filename:e.filename||t[t.length-1].filename,function:e.function||"?"}))}(s))}}/**
 * Gets a stack parser implementation from Options.stackParser
 * @see Options
 *
 * If options contains an array of line parsers, it is converted into a parser
 */function s(e){return Array.isArray(e)?i(...e):e}let a="<anonymous>";/**
 * Safely extract function name from itself
 */function o(e){try{if(!e||"function"!=typeof e)return a;return e.name||a}catch(e){// Just accessing custom props in some Selenium environments
// can cause a "Permission denied" exception (see raven-js#495).
return a}}}),W("cykBA",function(e,t){w(e.exports,"node",()=>n);/** Node Stack line parser */// eslint-disable-next-line complexity
function n(e){let t=/^\s*[-]{4,}$/,n=/at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/;// eslint-disable-next-line complexity
return r=>{let i=r.match(n);if(i){let t,n,r,s,a;if(i[1]){let e=(r=i[1]).lastIndexOf(".");if("."===r[e-1]&&e--,e>0){t=r.slice(0,e),n=r.slice(e+1);let i=t.indexOf(".Module");i>0&&(r=r.slice(i+1),t=t.slice(0,i))}s=void 0}n&&(s=t,a=n),"<anonymous>"===n&&(a=void 0,r=void 0),void 0===r&&(a=a||"<anonymous>",r=s?`${s}.${a}`:a);let o=i[2]&&i[2].startsWith("file://")?i[2].slice(7):i[2],l="native"===i[5];return o||!i[5]||l||(o=i[5]),{filename:o,module:e?e(o):void 0,function:r,lineno:parseInt(i[3],10)||void 0,colno:parseInt(i[4],10)||void 0,in_app:/**
 * Does this filename look like it's part of the app code?
 */function(e,t=!1){let n=t||e&&// It's not internal if it's an absolute linux path
!e.startsWith("/")&&// It's not internal if it's an absolute windows path
!e.includes(":\\")&&// It's not internal if the path is starting with a dot
!e.startsWith(".")&&// It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack
!e.match(/^[a-zA-Z]([a-zA-Z0-9.\-+])*:\/\//);// Schema from: https://stackoverflow.com/a/3641782
// in_app is all that's not an internal Node function or a module within node_modules
// note that isNative appears to return true even for node core libraries
// see https://github.com/getsentry/raven-node/issues/176
return!n&&void 0!==e&&!e.includes("node_modules/")}(o,l)}}if(r.match(t))return{filename:r}}}}),W("q7nNB",function(e,t){w(e.exports,"supportsFetch",()=>s),w(e.exports,"isNativeFetch",()=>a),w(e.exports,"supportsNativeFetch",()=>o);var n=z("ljiYl"),r=z("3dCyu");// eslint-disable-next-line deprecation/deprecation
let i=(0,r.getGlobalObject)();/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */function s(){if(!("fetch"in i))return!1;try{return new Headers,new Request("http://www.example.com"),new Response,!0}catch(e){return!1}}/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */// eslint-disable-next-line @typescript-eslint/ban-types
function a(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */function o(){if(!s())return!1;// Fast path to avoid DOM I/O
// eslint-disable-next-line @typescript-eslint/unbound-method
if(a(i.fetch))return!0;// window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
// so create a "pure" iframe to see if that has native fetch
let e=!1,t=i.document;// eslint-disable-next-line deprecation/deprecation
if(t&&"function"==typeof t.createElement)try{let n=t.createElement("iframe");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=a(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return e}}),W("hwYj7",function(e,t){w(e.exports,"supportsHistory",()=>i);var n=z("3dCyu");// Based on https://github.com/angular/angular.js/pull/13945/files
// eslint-disable-next-line deprecation/deprecation
let r=(0,n.getGlobalObject)();/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */function i(){// NOTE: in Chrome App environment, touching history.pushState, *even inside
//       a try/catch block*, will cause Chrome to output an error to console.error
// borrowed from: https://github.com/angular/angular.js/pull/13945/files
/* eslint-disable @typescript-eslint/no-unsafe-member-access */// eslint-disable-next-line @typescript-eslint/no-explicit-any
let e=r.chrome,t=e&&e.app&&e.app.runtime,n="history"in r&&!!r.history.pushState&&!!r.history.replaceState;return!t&&n}}),W("1oEwI",function(e,t){w(e.exports,"BrowserClient",()=>d);var n=z("mVPnE"),r=z("kLkMW"),i=z("dWh8i"),s=z("3gbAm"),a=z("kiOPQ"),o=z("ljiYl"),l=z("iltSe"),c=z("lJotG"),u=z("hXEPI");/**
 * Configuration options for the Sentry Browser SDK.
 * @see @sentry/types Options for more information.
 *//**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */class d extends n.BaseClient{/**
   * Creates a new Browser SDK instance.
   *
   * @param options Configuration options for this SDK.
   */constructor(e){let t=c.WINDOW.SENTRY_SDK_SOURCE||(0,a.getSDKSource)();e._metadata=e._metadata||{},e._metadata.sdk=e._metadata.sdk||{name:"sentry.javascript.browser",packages:[{name:`${t}:@sentry/browser`,version:r.SDK_VERSION}],version:r.SDK_VERSION},super(e),e.sendClientReports&&c.WINDOW.document&&(0,c.WINDOW).document.addEventListener("visibilitychange",()=>{"hidden"===c.WINDOW.document.visibilityState&&this._flushOutcomes()})}/**
   * @inheritDoc
   */eventFromException(e,t){return(0,l.eventFromException)(this._options.stackParser,e,t,this._options.attachStacktrace)}/**
   * @inheritDoc
   */eventFromMessage(e,t="info",n){return(0,l.eventFromMessage)(this._options.stackParser,e,t,n,this._options.attachStacktrace)}/**
   * Sends user feedback to Sentry.
   */captureUserFeedback(e){if(!this._isEnabled()){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).warn("SDK not enabled, will not capture user feedback.");return}let t=(0,u.createUserFeedbackEnvelope)(e,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this._sendEnvelope(t)}/**
   * @inheritDoc
   */_prepareEvent(e,t,n){return e.platform=e.platform||"javascript",super._prepareEvent(e,t,n)}/**
   * Sends client reports as an envelope.
   */_flushOutcomes(){let e=this._clearOutcomes();if(0===e.length){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).log("No outcomes to send");return}// This is really the only place where we want to check for a DSN and only send outcomes then
if(!this._dsn){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).log("No dsn provided, will not send outcomes");return}("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).log("Sending outcomes:",e);let t=(0,i.createClientReportEnvelope)(e,this._options.tunnel&&(0,s.dsnToString)(this._dsn));this._sendEnvelope(t)}}}),W("mVPnE",function(e,t){w(e.exports,"BaseClient",()=>m);var n=z("37cNF"),r=z("9jSUf"),i=z("1A3EQ"),s=z("ljiYl"),a=z("3gbAm"),o=z("fErff"),l=z("1ZuTv"),c=z("2h8TT"),u=z("fJXuW"),d=z("i03gv"),p=z("kcvLi"),h=z("4YSTT"),f=z("3MASE");let _="Not capturing exception because it's already been captured.";/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event, it is passed through
 * {@link BaseClient._prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(options);
 *   }
 *
 *   // ...
 * }
 */class m{/** Options passed to the SDK. *//** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. *//** Array of set up integrations. *//** Indicates whether this client's integrations have been set up. *//** Number of calls being processed *//** Holds flushable  */// eslint-disable-next-line @typescript-eslint/ban-types
/**
   * Initializes this client instance.
   *
   * @param options Options for the client.
   */constructor(e){if(this._options=e,this._integrations={},this._integrationsInitialized=!1,this._numProcessing=0,this._outcomes={},this._hooks={},this._eventProcessors=[],e.dsn?this._dsn=(0,a.makeDsn)(e.dsn):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).warn("No DSN provided, client will not send events."),this._dsn){let t=(0,c.getEnvelopeEndpointWithUrlEncodedAuth)(this._dsn,e);this._transport=e.transport({recordDroppedEvent:this.recordDroppedEvent.bind(this),...e.transportOptions,url:t})}}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
captureException(e,t,n){// ensure we haven't captured this very object before
if((0,r.checkOrSetAlreadyCaught)(e)){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).log(_);return}let i=t&&t.event_id;return this._process(this.eventFromException(e,t).then(e=>this._captureEvent(e,t,n)).then(e=>{i=e})),i}/**
   * @inheritDoc
   */captureMessage(e,t,n,r){let s=n&&n.event_id,a=(0,i.isPrimitive)(e)?this.eventFromMessage(String(e),t,n):this.eventFromException(e,n);return this._process(a.then(e=>this._captureEvent(e,n,r)).then(e=>{s=e})),s}/**
   * @inheritDoc
   */captureEvent(e,t,n){// ensure we haven't captured this very object before
if(t&&t.originalException&&(0,r.checkOrSetAlreadyCaught)(t.originalException)){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).log(_);return}let i=t&&t.event_id;return this._process(this._captureEvent(e,t,n).then(e=>{i=e})),i}/**
   * @inheritDoc
   */captureSession(e){"string"!=typeof e.release?("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).warn("Discarded session because of missing or non-string release"):(this.sendSession(e),// After sending, we set init false to indicate it's not the first occurrence
(0,p.updateSession)(e,{init:!1}))}/**
   * @inheritDoc
   */getDsn(){return this._dsn}/**
   * @inheritDoc
   */getOptions(){return this._options}/**
   * @see SdkMetadata in @sentry/types
   *
   * @return The metadata of the SDK
   */getSdkMetadata(){return this._options._metadata}/**
   * @inheritDoc
   */getTransport(){return this._transport}/**
   * @inheritDoc
   */flush(e){let t=this._transport;return t?this._isClientDoneProcessing(e).then(n=>t.flush(e).then(e=>n&&e)):(0,o.resolvedSyncPromise)(!0)}/**
   * @inheritDoc
   */close(e){return this.flush(e).then(e=>(this.getOptions().enabled=!1,e))}/** Get all installed event processors. */getEventProcessors(){return this._eventProcessors}/** @inheritDoc */addEventProcessor(e){this._eventProcessors.push(e)}/**
   * Sets up the integrations
   */setupIntegrations(e){(e&&!this._integrationsInitialized||this._isEnabled()&&!this._integrationsInitialized)&&(this._integrations=(0,d.setupIntegrations)(this,this._options.integrations),this._integrationsInitialized=!0)}/**
   * Gets an installed integration by its `id`.
   *
   * @returns The installed integration or `undefined` if no integration with that `id` was installed.
   */getIntegrationById(e){return this._integrations[e]}/**
   * @inheritDoc
   */getIntegration(e){try{return this._integrations[e.id]||null}catch(t){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).warn(`Cannot retrieve integration ${e.id} from the current Client`),null}}/**
   * @inheritDoc
   */addIntegration(e){(0,d.setupIntegration)(this,e,this._integrations)}/**
   * @inheritDoc
   */sendEvent(e,t={}){this.emit("beforeSendEvent",e,t);let r=(0,u.createEventEnvelope)(e,this._dsn,this._options._metadata,this._options.tunnel);for(let e of t.attachments||[])r=(0,n.addItemToEnvelope)(r,(0,n.createAttachmentEnvelopeItem)(e,this._options.transportOptions&&this._options.transportOptions.textEncoder));let i=this._sendEnvelope(r);i&&i.then(t=>this.emit("afterSendEvent",e,t),null)}/**
   * @inheritDoc
   */sendSession(e){let t=(0,u.createSessionEnvelope)(e,this._dsn,this._options._metadata,this._options.tunnel);this._sendEnvelope(t)}/**
   * @inheritDoc
   */recordDroppedEvent(e,t,n){// Note: we use `event` in replay, where we overwrite this hook.
if(this._options.sendClientReports){// We want to track each category (error, transaction, session, replay_event) separately
// but still keep the distinction between different type of outcomes.
// We could use nested maps, but it's much easier to read and type this way.
// A correct type for map-based implementation if we want to go that route
// would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`
// With typescript 4.1 we could even use template literal types
let n=`${e}:${t}`;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).log(`Adding outcome: "${n}"`),// The following works because undefined + 1 === NaN and NaN is falsy
this._outcomes[n]=this._outcomes[n]+1||1}}// Keep on() & emit() signatures in sync with types' client.ts interface
/* eslint-disable @typescript-eslint/unified-signatures *//** @inheritdoc *//** @inheritdoc */on(e,t){this._hooks[e]||(this._hooks[e]=[]),// @ts-expect-error We assue the types are correct
this._hooks[e].push(t)}/** @inheritdoc *//** @inheritdoc */emit(e,...t){this._hooks[e]&&this._hooks[e].forEach(e=>e(...t))}/* eslint-enable @typescript-eslint/unified-signatures *//** Updates existing session based on the provided event */_updateSessionFromEvent(e,t){let n=!1,r=!1,i=t.exception&&t.exception.values;if(i)for(let e of(r=!0,i)){let t=e.mechanism;if(t&&!1===t.handled){n=!0;break}}// A session is updated and that session update is sent in only one of the two following scenarios:
// 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
// 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
let s="ok"===e.status,a=s&&0===e.errors||s&&n;a&&((0,p.updateSession)(e,{...n&&{status:"crashed"},errors:e.errors||Number(r||n)}),this.captureSession(e))}/**
   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
   * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
   * `false` otherwise
   */_isClientDoneProcessing(e){return new o.SyncPromise(t=>{let n=0,r=setInterval(()=>{0==this._numProcessing?(clearInterval(r),t(!0)):(n+=1,e&&n>=e&&(clearInterval(r),t(!1)))},1)})}/** Determines whether this SDK is enabled and a transport is present. */_isEnabled(){return!1!==this.getOptions().enabled&&void 0!==this._transport}/**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A new event with more information.
   */_prepareEvent(e,t,n){let r=this.getOptions(),i=Object.keys(this._integrations);return!t.integrations&&i.length>0&&(t.integrations=i),this.emit("preprocessEvent",e,t),(0,f.prepareEvent)(r,e,t,n,this).then(e=>{if(null===e)return e;// If a trace context is not set on the event, we use the propagationContext set on the event to
// generate a trace context. If the propagationContext does not have a dynamic sampling context, we
// also generate one for it.
let{propagationContext:t}=e.sdkProcessingMetadata||{},r=e.contexts&&e.contexts.trace;if(!r&&t){let{traceId:r,spanId:i,parentSpanId:s,dsc:a}=t;e.contexts={trace:{trace_id:r,span_id:i,parent_span_id:s},...e.contexts};let o=a||(0,h.getDynamicSamplingContextFromClient)(r,this,n);e.sdkProcessingMetadata={dynamicSamplingContext:o,...e.sdkProcessingMetadata}}return e})}/**
   * Processes the event and logs an error in case of rejection
   * @param event
   * @param hint
   * @param scope
   */_captureEvent(e,t={},n){return this._processEvent(e,t,n).then(e=>e.event_id,e=>{("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&("log"===e.logLevel?(0,s.logger).log(e.message):(0,s.logger).warn(e))})}/**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */_processEvent(e,t,n){let r=this.getOptions(),{sampleRate:s}=r,a=y(e),c=g(e),u=e.type||"error",d=`before send for type \`${u}\``;// 1.0 === 100% events are sent
// 0.0 === 0% events are sent
// Sampling for transaction happens somewhere else
if(c&&"number"==typeof s&&Math.random()>s)return this.recordDroppedEvent("sample_rate","error",e),(0,o.rejectedSyncPromise)(new l.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${s})`,"log"));let p="replay_event"===u?"replay":u;return this._prepareEvent(e,t,n).then(n=>{if(null===n)throw this.recordDroppedEvent("event_processor",p,e),new l.SentryError("An event processor returned `null`, will not send event.","log");let s=t.data&&!0===t.data.__sentry__;if(s)return n;let a=/**
 * Process the matching `beforeSendXXX` callback.
 */function(e,t,n){let{beforeSend:r,beforeSendTransaction:i}=e;return g(t)&&r?r(t,n):y(t)&&i?i(t,n):t}(r,n,t);return(/**
 * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.
 */function(e,t){let n=`${t} must return \`null\` or a valid event.`;if((0,i.isThenable)(e))return e.then(e=>{if(!(0,i.isPlainObject)(e)&&null!==e)throw new l.SentryError(n);return e},e=>{throw new l.SentryError(`${t} rejected with ${e}`)});if(!(0,i.isPlainObject)(e)&&null!==e)throw new l.SentryError(n);return e}(a,d))}).then(r=>{if(null===r)throw this.recordDroppedEvent("before_send",p,e),new l.SentryError(`${d} returned \`null\`, will not send event.`,"log");let i=n&&n.getSession();!a&&i&&this._updateSessionFromEvent(i,r);// None of the Sentry built event processor will update transaction name,
// so if the transaction name has been changed by an event processor, we know
// it has to come from custom event processor added by a user
let s=r.transaction_info;return a&&s&&r.transaction!==e.transaction&&(r.transaction_info={...s,source:"custom"}),this.sendEvent(r,t),r}).then(null,e=>{if(e instanceof l.SentryError)throw e;throw this.captureException(e,{data:{__sentry__:!0},originalException:e}),new l.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${e}`)})}/**
   * Occupies the client with processing and event
   */_process(e){this._numProcessing++,e.then(e=>(this._numProcessing--,e),e=>(this._numProcessing--,e))}/**
   * @inheritdoc
   */_sendEnvelope(e){if(this.emit("beforeEnvelope",e),this._isEnabled()&&this._transport)return this._transport.send(e).then(null,e=>{("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).error("Error while sending event:",e)});("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,s.logger).error("Transport disabled")}/**
   * Clears outcomes on this client and returns them.
   */_clearOutcomes(){let e=this._outcomes;return this._outcomes={},Object.keys(e).map(t=>{let[n,r]=t.split(":");return{reason:n,category:r,quantity:e[t]}})}}function g(e){return void 0===e.type}function y(e){return"transaction"===e.type}}),W("37cNF",function(e,t){w(e.exports,"createEnvelope",()=>s),w(e.exports,"addItemToEnvelope",()=>a),w(e.exports,"forEachEnvelopeItem",()=>o),w(e.exports,"envelopeContainsItemType",()=>l),w(e.exports,"serializeEnvelope",()=>u),w(e.exports,"parseEnvelope",()=>d),w(e.exports,"createAttachmentEnvelopeItem",()=>p),w(e.exports,"envelopeItemTypeToDataCategory",()=>f),w(e.exports,"getSdkMetadataForEnvelopeHeader",()=>_),w(e.exports,"createEventEnvelopeHeaders",()=>m);var n=z("3gbAm"),r=z("gKnoh"),i=z("csRh4");/**
 * Creates an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */function s(e,t=[]){return[e,t]}/**
 * Add an item to an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */function a(e,t){let[n,r]=e;return[n,[...r,t]]}/**
 * Convenience function to loop through the items and item types of an envelope.
 * (This function was mostly created because working with envelope types is painful at the moment)
 *
 * If the callback returns true, the rest of the items will be skipped.
 */function o(e,t){let n=e[1];for(let e of n){let n=e[0].type,r=t(e,n);if(r)return!0}return!1}/**
 * Returns true if the envelope contains any of the given envelope item types
 */function l(e,t){return o(e,(e,n)=>t.includes(n))}/**
 * Encode a string to UTF8.
 */function c(e,t){let n=t||new TextEncoder;return n.encode(e)}/**
 * Serializes an envelope.
 */function u(e,t){let[n,i]=e,s=JSON.stringify(n);function a(e){"string"==typeof s?s="string"==typeof e?s+e:[c(s,t),e]:s.push("string"==typeof e?c(e,t):e)}for(let e of i){let[t,n]=e;if(a(`
${JSON.stringify(t)}
`),"string"==typeof n||n instanceof Uint8Array)a(n);else{let e;try{e=JSON.stringify(n)}catch(t){// In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still
// fails, we try again after normalizing it again with infinite normalization depth. This of course has a
// performance impact but in this case a performance hit is better than throwing.
e=JSON.stringify((0,r.normalize)(n))}a(e)}}return"string"==typeof s?s:function(e){let t=e.reduce((e,t)=>e+t.length,0),n=new Uint8Array(t),r=0;for(let t of e)n.set(t,r),r+=t.length;return n}(s)}/**
 * Parses an envelope
 */function d(e,t,n){let r="string"==typeof e?t.encode(e):e;function i(e){let t=r.subarray(0,e);return(// Replace the buffer with the remaining data excluding trailing newline
r=r.subarray(e+1),t)}function s(){let e=r.indexOf(10);return e<0&&(e=r.length),JSON.parse(n.decode(i(e)))}let a=s(),o=[];for(;r.length;){let e=s(),t="number"==typeof e.length?e.length:void 0;o.push([e,t?i(t):s()])}return[a,o]}/**
 * Creates attachment envelope items
 */function p(e,t){let n="string"==typeof e.data?c(e.data,t):e.data;return[(0,i.dropUndefinedKeys)({type:"attachment",length:n.length,filename:e.filename,content_type:e.contentType,attachment_type:e.attachmentType}),n]}let h={session:"session",sessions:"session",attachment:"attachment",transaction:"transaction",event:"error",client_report:"internal",user_report:"default",profile:"profile",replay_event:"replay",replay_recording:"replay",check_in:"monitor"};/**
 * Maps the type of an envelope item to a data category.
 */function f(e){return h[e]}/** Extracts the minimal SDK info from from the metadata or an events */function _(e){if(!e||!e.sdk)return;let{name:t,version:n}=e.sdk;return{name:t,version:n}}/**
 * Creates event envelope headers, based on event, sdk info and tunnel
 * Note: This function was extracted from the core package to make it available in Replay
 */function m(e,t,r,s){let a=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:new Date().toISOString(),...t&&{sdk:t},...!!r&&s&&{dsn:(0,n.dsnToString)(s)},...a&&{trace:(0,i.dropUndefinedKeys)({...a})}}}}),W("gKnoh",function(e,t){w(e.exports,"normalize",()=>a),w(e.exports,"normalizeToSize",()=>/** JSDoc */function e(t,n=3,r=102400){let i=a(t,n);return~-encodeURI(JSON.stringify(i)).split(/%..|./).length>r?e(t,n-1,r):i});var n=z("1A3EQ"),r=z("lr3rL"),i=z("csRh4"),s=z("bWqC9");/**
 * Recursively normalizes the given object.
 *
 * - Creates a copy to prevent original input mutation
 * - Skips non-enumerable properties
 * - When stringifying, calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format
 * - Translates known global objects/classes to a string representations
 * - Takes care of `Error` object serialization
 * - Optionally limits depth of final output
 * - Optionally limits number of properties/elements included in any single object/array
 *
 * @param input The object to be normalized.
 * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)
 * @param maxProperties The max number of elements or properties to be included in any single array or
 * object in the normallized output.
 * @returns A normalized version of the object, or `"**non-serializable**"` if any errors are thrown during normalization.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function a(e,t=100,a=1/0){try{// since we're at the outermost level, we don't provide a key
return(/**
 * Visits a node to perform normalization on it
 *
 * @param key The key corresponding to the given node
 * @param value The node to be visited
 * @param depth Optional number indicating the maximum recursion depth
 * @param maxProperties Optional maximum number of properties/elements included in any single object/array
 * @param memo Optional Memo class handling decycling
 */function e(t,a,o=1/0,l=1/0,c=(0,r.memoBuilder)()){let[u,d]=c;// Get the simple cases out of the way first
if(null==a||// this matches null and undefined -> eqeq not eqeqeq
["number","boolean","string"].includes(typeof a)&&!(0,n.isNaN)(a))return a;let p=/* eslint-disable complexity *//**
 * Stringify the given value. Handles various known special values and types.
 *
 * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn
 * the number 1231 into "[Object Number]", nor on `null`, as it will throw.
 *
 * @param value The value to stringify
 * @returns A stringified representation of the given value
 */function(e,// our internal use, it'll do
t){try{if("domain"===e&&t&&"object"==typeof t&&t._events)return"[Domain]";if("domainEmitter"===e)return"[DomainEmitter]";// It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first
// which won't throw if they are not present.
if(void 0!==P&&t===P)return"[Global]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof window&&t===window)return"[Window]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof document&&t===document)return"[Document]";if((0,n.isVueViewModel)(t))return"[VueViewModel]";// React's SyntheticEvent thingy
if((0,n.isSyntheticEvent)(t))return"[SyntheticEvent]";if("number"==typeof t&&t!=t)return"[NaN]";if("function"==typeof t)return`[Function: ${(0,s.getFunctionName)(t)}]`;if("symbol"==typeof t)return`[${String(t)}]`;// stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion
if("bigint"==typeof t)return`[BigInt: ${String(t)}]`;// Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting
// them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as
// `"[object Object]"`. If we instead look at the constructor's name (which is the same as the name of the class),
// we can make sure that only plain objects come out that way.
let r=/* eslint-enable complexity */function(e){let t=Object.getPrototypeOf(e);return t?t.constructor.name:"null prototype"}(t);// Handle HTML Elements
if(/^HTML(\w*)Element$/.test(r))return`[HTMLElement: ${r}]`;return`[object ${r}]`}catch(e){return`**non-serializable** (${e})`}}(t,a);// Anything we could potentially dig into more (objects or arrays) will have come back as `"[object XXXX]"`.
// Everything else will have already been serialized, so if we don't see that pattern, we're done.
if(!p.startsWith("[object "))return p;// From here on, we can assert that `value` is either an object or an array.
// Do not normalize objects that we know have already been normalized. As a general rule, the
// "__sentry_skip_normalization__" property should only be used sparingly and only should only be set on objects that
// have already been normalized.
if(a.__sentry_skip_normalization__)return a;// We can set `__sentry_override_normalization_depth__` on an object to ensure that from there
// We keep a certain amount of depth.
// This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.
let h="number"==typeof a.__sentry_override_normalization_depth__?a.__sentry_override_normalization_depth__:o;// We're also done if we've reached the max depth
if(0===h)return p.replace("object ","");// If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.
if(u(a))return"[Circular ~]";if(a&&"function"==typeof a.toJSON)try{let t=a.toJSON();// We need to normalize the return value of `.toJSON()` in case it has circular references
return e("",t,h-1,l,c)}catch(e){// pass (The built-in `toJSON` failed, but we can still try to do it ourselves)
}// At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse
// because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each
// property/entry, and keep track of the number of items we add to it.
let f=Array.isArray(a)?[]:{},_=0,m=(0,i.convertToPlainObject)(a);for(let t in m){// Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
if(!Object.prototype.hasOwnProperty.call(m,t))continue;if(_>=l){f[t]="[MaxProperties ~]";break}// Recursively visit all the child nodes
let n=m[t];f[t]=e(t,n,h-1,l,c),_++}// Return accumulated values
return(// Once we've visited all the branches, remove the parent from memo storage
d(a),f)}("",e,t,a))}catch(e){return{ERROR:`**non-serializable** (${e})`}}}}),W("lr3rL",function(e,t){w(e.exports,"memoBuilder",()=>n);/* eslint-disable @typescript-eslint/no-unsafe-member-access *//* eslint-disable @typescript-eslint/no-explicit-any *//**
 * Helper to decycle json objects
 */function n(){let e="function"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);// eslint-disable-next-line @typescript-eslint/prefer-for-of
for(let e=0;e<t.length;e++){let r=t[e];if(r===n)return!0}return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}}),W("1ZuTv",function(e,t){w(e.exports,"SentryError",()=>n);/** An error emitted by Sentry SDKs and related utilities. */class n extends Error{/** Display name of this error instance. */constructor(e,t="warn"){super(e),this.message=e,this.name=new.target.prototype.constructor.name,// This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line
// out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes
// instances of `SentryError` fail `obj instanceof SentryError` checks.
Object.setPrototypeOf(this,new.target.prototype),this.logLevel=t}}}),W("fJXuW",function(e,t){w(e.exports,"createSessionEnvelope",()=>i),w(e.exports,"createEventEnvelope",()=>s);var n=z("37cNF"),r=z("3gbAm");/** Creates an envelope from a Session */function i(e,t,i,s){let a=(0,n.getSdkMetadataForEnvelopeHeader)(i),o={sent_at:new Date().toISOString(),...a&&{sdk:a},...!!s&&t&&{dsn:(0,r.dsnToString)(t)}},l="aggregates"in e?[{type:"sessions"},e]:[{type:"session"},e.toJSON()];return(0,n.createEnvelope)(o,[l])}/**
 * Create an Envelope from an event.
 */function s(e,t,r,i){var s;let a=(0,n.getSdkMetadataForEnvelopeHeader)(r),o=e.type&&"replay_event"!==e.type?e.type:"event";(s=r&&r.sdk)&&(e.sdk=e.sdk||{},e.sdk.name=e.sdk.name||s.name,e.sdk.version=e.sdk.version||s.version,e.sdk.integrations=[...e.sdk.integrations||[],...s.integrations||[]],e.sdk.packages=[...e.sdk.packages||[],...s.packages||[]]);let l=(0,n.createEventEnvelopeHeaders)(e,a,i,t);// Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to
// sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may
// have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid
// of this `delete`, lest we miss putting it back in the next time the property is in use.)
delete e.sdkProcessingMetadata;let c=[{type:o},e];return(0,n.createEnvelope)(l,[c])}}),W("4YSTT",function(e,t){w(e.exports,"getDynamicSamplingContextFromClient",()=>i);var n=z("csRh4"),r=z("2ZW7W");/**
 * Creates a dynamic sampling context from a client.
 *
 * Dispatchs the `createDsc` lifecycle hook as a side effect.
 */function i(e,t,i){let s=t.getOptions(),{publicKey:a}=t.getDsn()||{},{segment:o}=i&&i.getUser()||{},l=(0,n.dropUndefinedKeys)({environment:s.environment||r.DEFAULT_ENVIRONMENT,release:s.release,user_segment:o,public_key:a,trace_id:e});return t.emit&&t.emit("createDsc",l),l}}),W("3MASE",function(e,t){w(e.exports,"prepareEvent",()=>d);var n=z("lVAot"),r=z("3dCyu"),i=z("gKnoh"),s=z("fErff"),a=z("VBQMn"),o=z("9jSUf"),l=z("2ZW7W"),c=z("2vdtW"),u=z("b5H6o");/**
 * Adds common information to events.
 *
 * The information includes release and environment from `options`,
 * breadcrumbs and context (extra, tags and user) from the scope.
 *
 * Information that is already present in the event is never overwritten. For
 * nested objects, such as the context, keys are merged.
 *
 * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.
 *
 * @param event The original event.
 * @param hint May contain additional information about the original exception.
 * @param scope A scope containing event metadata.
 * @returns A new event with more information.
 * @hidden
 */function d(e,t,d,h,f){let{normalizeDepth:_=3,normalizeMaxBreadth:m=1e3}=e,g={...t,event_id:t.event_id||d.event_id||(0,o.uuid4)(),timestamp:t.timestamp||(0,n.dateTimestampInSeconds)()},y=d.integrations||e.integrations.map(e=>e.name);/**
 *  Enhances event using the client configuration.
 *  It takes care of all "static" values like environment, release and `dist`,
 *  as well as truncating overly long values.
 * @param event event instance to be enhanced
 */(function(e,t){let{environment:n,release:r,dist:i,maxValueLength:s=250}=t;"environment"in e||(e.environment="environment"in t?n:l.DEFAULT_ENVIRONMENT),void 0===e.release&&void 0!==r&&(e.release=r),void 0===e.dist&&void 0!==i&&(e.dist=i),e.message&&(e.message=(0,a.truncate)(e.message,s));let o=e.exception&&e.exception.values&&e.exception.values[0];o&&o.value&&(o.value=(0,a.truncate)(o.value,s));let c=e.request;c&&c.url&&(c.url=(0,a.truncate)(c.url,s))})(g,e),y.length>0&&(g.sdk=g.sdk||{},g.sdk.integrations=[...g.sdk.integrations||[],...y]),void 0===t.type&&/**
 * Puts debug IDs into the stack frames of an error event.
 */function(e,t){let n;let i=r.GLOBAL_OBJ._sentryDebugIds;if(!i)return;let s=p.get(t);s?n=s:(n=new Map,p.set(t,n));// Build a map of filename -> debug_id
let a=Object.keys(i).reduce((e,r)=>{let s;let a=n.get(r);a?s=a:(s=t(r),n.set(r,s));for(let t=s.length-1;t>=0;t--){let n=s[t];if(n.filename){e[n.filename]=i[r];break}}return e},{});try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.exception.values.forEach(e=>{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.stacktrace.frames.forEach(e=>{e.filename&&(e.debug_id=a[e.filename])})})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
}}(g,e.stackParser);// If we have scope given to us, use it as the base for further modifications.
// This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
let S=h;d.captureContext&&(S=(0,u.Scope).clone(S).update(d.captureContext));// We prepare the result here with a resolved Event.
let b=(0,s.resolvedSyncPromise)(g),v=f&&f.getEventProcessors?f.getEventProcessors():[];// This should be the last thing called, since we want that
// {@link Hub.addEventProcessor} gets the finished prepared event.
//
// We need to check for the existence of `finalScope.getAttachments`
// because `getAttachments` can be undefined if users are using an older version
// of `@sentry/core` that does not have the `getAttachments` method.
// See: https://github.com/getsentry/sentry-javascript/issues/5229
if(S){// Collect attachments from the hint and scope
if(S.getAttachments){let e=[...d.attachments||[],...S.getAttachments()];e.length&&(d.attachments=e)}// In case we have a hub we reassign it.
b=S.applyToEvent(g,d,v)}else // TODO (v8): Update the order to be Global > Client
b=(0,c.notifyEventProcessors)([...v,...(0,c.getGlobalEventProcessors)()],g,d);return b.then(e=>(e&&// file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.
    // This should not cause any PII issues, since we're only moving data that is already on the event and not adding
    // any new data
    /**
 * Moves debug IDs from the stack frames of an error event into the debug_meta field.
 */function(e){// Extract debug IDs and filenames from the stack frames on the event.
    let t={};try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    e.exception.values.forEach(e=>{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    e.stacktrace.frames.forEach(e=>{e.debug_id&&(e.abs_path?t[e.abs_path]=e.debug_id:e.filename&&(t[e.filename]=e.debug_id),delete e.debug_id)})})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }if(0===Object.keys(t).length)return;// Fill debug_meta information
    e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];let n=e.debug_meta.images;Object.keys(t).forEach(e=>{n.push({type:"sourcemap",code_file:e,debug_id:t[e]})})}(e),"number"==typeof _&&_>0)?/**
 * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
 * Normalized keys:
 * - `breadcrumbs.data`
 * - `user`
 * - `contexts`
 * - `extra`
 * @param event Event
 * @returns Normalized event
 */function(e,t,n){if(!e)return null;let r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map(e=>({...e,...e.data&&{data:(0,i.normalize)(e.data,t,n)}}))},...e.user&&{user:(0,i.normalize)(e.user,t,n)},...e.contexts&&{contexts:(0,i.normalize)(e.contexts,t,n)},...e.extra&&{extra:(0,i.normalize)(e.extra,t,n)}};return e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=(0,i.normalize)(e.contexts.trace.data,t,n))),e.spans&&(r.spans=e.spans.map(e=>(e.data&&(e.data=(0,i.normalize)(e.data,t,n)),e))),r}(e,_,m):e)}let p=new WeakMap}),W("kLkMW",function(e,t){w(e.exports,"SDK_VERSION",()=>n);let n="7.74.1"}),W("dWh8i",function(e,t){w(e.exports,"createClientReportEnvelope",()=>i);var n=z("37cNF"),r=z("lVAot");/**
 * Creates client report envelope
 * @param discarded_events An array of discard events
 * @param dsn A DSN that can be set on the header. Optional.
 */function i(e,t,i){let s=[{type:"client_report"},{timestamp:i||(0,r.dateTimestampInSeconds)(),discarded_events:e}];return(0,n.createEnvelope)(t?{dsn:t}:{},[s])}}),W("iltSe",function(e,t){w(e.exports,"exceptionFromError",()=>l),w(e.exports,"eventFromException",()=>p),w(e.exports,"eventFromUnknownInput",()=>f),w(e.exports,"eventFromMessage",()=>h);var n=z("fSbgy"),r=z("9jSUf"),i=z("csRh4"),s=z("1A3EQ"),a=z("gKnoh"),o=z("fErff");/**
 * This function creates an exception from a JavaScript Error
 */function l(e,t){// Get the frames first since Opera can lose the stack if we touch anything else first
let n=u(e,t),r={type:t&&t.name,value:/**
 * There are cases where stacktrace.message is an Event object
 * https://github.com/getsentry/sentry-javascript/issues/1949
 * In this specific case we try to extract stacktrace.message.error.message
 */function(e){let t=e&&e.message;return t?t.error&&"string"==typeof t.error.message?t.error.message:t:"No error message"}(t)};return n.length&&(r.stacktrace={frames:n}),void 0===r.type&&""===r.value&&(r.value="Unrecoverable error caught"),r}/**
 * @hidden
 */function c(e,t){return{exception:{values:[l(e,t)]}}}/** Parses stack frames from an error */function u(e,t){// Access and store the stacktrace property before doing ANYTHING
// else to it because Opera is not very good at providing it
// reliably in other circumstances.
let n=t.stacktrace||t.stack||"",r=function(e){if(e){if("number"==typeof e.framesToPop)return e.framesToPop;if(d.test(e.message))return 1}return 0}(t);try{return e(n,r)}catch(e){// no-empty
}return[]}// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108
let d=/Minified React error #\d+;/i;/**
 * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.
 * @hidden
 */function p(e,t,n,i){let s=n&&n.syntheticException||void 0,a=f(e,t,s,i);return(0,r.addExceptionMechanism)(a),a.level="error",n&&n.event_id&&(a.event_id=n.event_id),(0,o.resolvedSyncPromise)(a)}/**
 * Builds and Event from a Message
 * @hidden
 */function h(e,t,n="info",r,i){let s=r&&r.syntheticException||void 0,a=_(e,t,s,i);return a.level=n,r&&r.event_id&&(a.event_id=r.event_id),(0,o.resolvedSyncPromise)(a)}/**
 * @hidden
 */function f(e,t,o,l,d){let p;if((0,s.isErrorEvent)(t)&&t.error)return c(e,t.error);// If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name
// and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be
// `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.
//
// https://developer.mozilla.org/en-US/docs/Web/API/DOMError
// https://developer.mozilla.org/en-US/docs/Web/API/DOMException
// https://webidl.spec.whatwg.org/#es-DOMException-specialness
if((0,s.isDOMError)(t)||(0,s.isDOMException)(t)){if("stack"in t)p=c(e,t);else{let n=t.name||((0,s.isDOMError)(t)?"DOMError":"DOMException"),i=t.message?`${n}: ${t.message}`:n;p=_(e,i,o,l),(0,r.addExceptionTypeValue)(p,i)}return"code"in t&&(p.tags={...p.tags,"DOMException.code":`${t.code}`}),p}return(0,s.isError)(t)?c(e,t):((0,s.isPlainObject)(t)||(0,s.isEvent)(t)?p=/**
 * @hidden
 */function(e,t,r,o){let l=(0,n.getCurrentHub)(),c=l.getClient(),d=c&&c.getOptions().normalizeDepth,p={exception:{values:[{type:(0,s.isEvent)(t)?t.constructor.name:o?"UnhandledRejection":"Error",value:function(e,{isUnhandledRejection:t}){let n=(0,i.extractExceptionKeysForMessage)(e),r=t?"promise rejection":"exception";// Some ErrorEvent instances do not have an `error` property, which is why they are not handled before
// We still want to try to get a decent message for these cases
if((0,s.isErrorEvent)(e))return`Event \`ErrorEvent\` captured as ${r} with message \`${e.message}\``;if((0,s.isEvent)(e)){let t=function(e){try{let t=Object.getPrototypeOf(e);return t?t.constructor.name:void 0}catch(e){// ignore errors here
}}(e);return`Event \`${t}\` (type=${e.type}) captured as ${r}`}return`Object captured as ${r} with keys: ${n}`}(t,{isUnhandledRejection:o})}]},extra:{__serialized__:(0,a.normalizeToSize)(t,d)}};if(r){let t=u(e,r);t.length&&(p.exception.values[0].stacktrace={frames:t})}return p}(e,t,o,d):(// If none of previous checks were valid, then it means that it's not:
// - an instance of DOMError
// - an instance of DOMException
// - an instance of Event
// - an instance of Error
// - a valid ErrorEvent (one with an error property)
// - a plain Object
//
// So bail out and capture it as a simple message:
p=_(e,t,o,l),(0,r.addExceptionTypeValue)(p,`${t}`,void 0)),(0,r.addExceptionMechanism)(p,{synthetic:!0}),p)}/**
 * @hidden
 */function _(e,t,n,r){let i={message:t};if(r&&n){let r=u(e,n);r.length&&(i.exception={values:[{value:t,stacktrace:{frames:r}}]})}return i}}),W("lJotG",function(e,t){w(e.exports,"WINDOW",()=>a),w(e.exports,"shouldIgnoreOnError",()=>l),w(e.exports,"wrap",()=>/**
 * Instruments the given function and sends an event to Sentry every time the
 * function throws an exception.
 *
 * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always
 * has a correct `this` context.
 * @returns The wrapped function.
 * @hidden
 */function e(t,s={},a){// for future readers what this does is wrap a function and then create
    // a bi-directional wrapping between them.
    //
    // example: wrapped = wrap(original);
    //  original.__sentry_wrapped__ -> wrapped
    //  wrapped.__sentry_original__ -> original
    if("function"!=typeof t)return t;try{// if we're dealing with a function that was previously wrapped, return
    // the original wrapper.
    let e=t.__sentry_wrapped__;if(e)return e;// We don't wanna wrap it twice
    if((0,i.getOriginalFunction)(t))return t}catch(e){// Just accessing custom props in some Selenium environments
    // can cause a "Permission denied" exception (see raven-js#495).
    // Bail on wrapping and return the function as-is (defers to window.onerror).
    return t}/* eslint-disable prefer-rest-params */// It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`
    let l=function(){let i=Array.prototype.slice.call(arguments);try{a&&"function"==typeof a&&a.apply(this,arguments);// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
    let n=i.map(t=>e(t,s));// Attempt to invoke user-land function
    // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
    //       means the sentry.javascript SDK caught an error invoking your application code. This
    //       is expected behavior and NOT indicative of a bug with sentry.javascript.
    return t.apply(this,n)}catch(e){throw(// onerror should trigger before setTimeout
    o++,setTimeout(()=>{o--}),(0,n.withScope)(t=>{t.addEventProcessor(e=>(s.mechanism&&((0,r.addExceptionTypeValue)(e,void 0,void 0),(0,r.addExceptionMechanism)(e,s.mechanism)),e.extra={...e.extra,arguments:i},e)),(0,n.captureException)(e)}),e)}};/* eslint-enable prefer-rest-params */// Accessing some objects may throw
    // ref: https://github.com/getsentry/sentry-javascript/issues/1168
    try{for(let e in t)Object.prototype.hasOwnProperty.call(t,e)&&(l[e]=t[e])}catch(e){}// eslint-disable-line no-empty
    // Signal that this function has been wrapped/filled already
    // for both debugging and to prevent it to being wrapped/filled twice
    (0,i.markFunctionWrapped)(l,t),(0,i.addNonEnumerableProperty)(t,"__sentry_wrapped__",l);// Restore original function name (not all browsers allow that)
    try{let e=Object.getOwnPropertyDescriptor(l,"name");e.configurable&&Object.defineProperty(l,"name",{get:()=>t.name});// eslint-disable-next-line no-empty
    }catch(e){}return l});var n=z("5X2BG"),r=z("9jSUf"),i=z("csRh4"),s=z("3dCyu");let a=s.GLOBAL_OBJ,o=0;/**
 * @hidden
 */function l(){return o>0}}),W("hXEPI",function(e,t){w(e.exports,"createUserFeedbackEnvelope",()=>i);var n=z("37cNF"),r=z("3gbAm");/**
 * Creates an envelope from a user feedback.
 */function i(e,{metadata:t,tunnel:i,dsn:s}){let a={event_id:e.event_id,sent_at:new Date().toISOString(),...t&&t.sdk&&{sdk:{name:t.sdk.name,version:t.sdk.version}},...!!i&&!!s&&{dsn:(0,r.dsnToString)(s)}},o=[{type:"user_report"},e];return(0,n.createEnvelope)(a,[o])}}),W("jrBuy",function(e,t){w(e.exports,"GlobalHandlers",()=>u);var n=z("fSbgy"),r=z("9jSUf"),i=z("3OPQI"),s=z("cuGn6"),a=z("1A3EQ"),o=z("ljiYl"),l=z("iltSe"),c=z("lJotG");/* eslint-disable @typescript-eslint/no-unsafe-member-access *//** Global handlers */class u{/**
   * @inheritDoc
   */static __initStatic(){this.id="GlobalHandlers"}/**
   * @inheritDoc
   *//** JSDoc *//**
   * Stores references functions to installing handlers. Will set to undefined
   * after they have been run so that they are not used twice.
   *//** JSDoc */constructor(e){this.name=u.id,this._options={onerror:!0,onunhandledrejection:!0,...e},this._installFunc={onerror:d,onunhandledrejection:p}}/**
   * @inheritDoc
   */setupOnce(){Error.stackTraceLimit=50;let e=this._options;// We can disable guard-for-in as we construct the options object above + do checks against
// `this._installFunc` for the property.
// eslint-disable-next-line guard-for-in
for(let t in e){let n=this._installFunc[t];n&&e[t]&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,o.logger).log(`Global Handler attached: ${t}`),n(),this._installFunc[t]=void 0)}}}/** JSDoc */function d(){(0,i.addInstrumentationHandler)("error",e=>{let[t,n,r]=_();if(!t.getIntegration(u))return;let{msg:i,url:s,line:o,column:d,error:p}=e;if((0,c.shouldIgnoreOnError)()||p&&p.__sentry_own_request__)return;let m=void 0===p&&(0,a.isString)(i)?/**
 * This function creates a stack from an old, error-less onerror handler.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function(e,t,n,r){// If 'message' is ErrorEvent, get real message from inside
let i=(0,a.isErrorEvent)(e)?e.message:e,s="Error",o=i.match(/^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i);o&&(s=o[1],i=o[2]);let l={exception:{values:[{type:s,value:i}]}};return h(l,t,n,r)}(i,s,o,d):h((0,l.eventFromUnknownInput)(n,p||i,void 0,r,!1),s,o,d);m.level="error",f(t,p,m,"onerror")})}/** JSDoc */function p(){(0,i.addInstrumentationHandler)("unhandledrejection",e=>{var t;let[n,r,i]=_();if(!n.getIntegration(u))return;let s=e;// dig the object of the rejection out of known event types
try{// PromiseRejectionEvents store the object of the rejection under 'reason'
// see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
"reason"in e?s=e.reason:"detail"in e&&"reason"in e.detail&&(s=e.detail.reason)}catch(e){// no-empty
}if((0,c.shouldIgnoreOnError)()||s&&s.__sentry_own_request__)return!0;let o=(0,a.isPrimitive)(s)?(t=s,{exception:{values:[{type:"UnhandledRejection",// String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
value:`Non-Error promise rejection captured with value: ${String(t)}`}]}}):(0,l.eventFromUnknownInput)(r,s,void 0,i,!0);o.level="error",f(n,s,o,"onunhandledrejection")})}/** JSDoc */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function h(e,t,n,r){// event.exception
let i=e.exception=e.exception||{},o=i.values=i.values||[],l=o[0]=o[0]||{},c=l.stacktrace=l.stacktrace||{},u=c.frames=c.frames||[],d=isNaN(parseInt(r,10))?void 0:r,p=isNaN(parseInt(n,10))?void 0:n,h=(0,a.isString)(t)&&t.length>0?t:(0,s.getLocationHref)();return 0===u.length&&u.push({colno:d,filename:h,function:"?",in_app:!0,lineno:p}),e}function f(e,t,n,i){(0,r.addExceptionMechanism)(n,{handled:!1,type:i}),e.captureEvent(n,{originalException:t})}function _(){let e=(0,n.getCurrentHub)(),t=e.getClient(),r=t&&t.getOptions()||{stackParser:()=>[],attachStacktrace:!1};return[e,r.stackParser,r.attachStacktrace]}u.__initStatic()}),W("fa62i",function(e,t){w(e.exports,"TryCatch",()=>a);var n=z("csRh4"),r=z("bWqC9"),i=z("lJotG");let s=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","BroadcastChannel","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","SharedWorker","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"];/** Wrap timer functions and event targets to catch errors and provide better meta data */class a{/**
   * @inheritDoc
   */static __initStatic(){this.id="TryCatch"}/**
   * @inheritDoc
   *//** JSDoc *//**
   * @inheritDoc
   */constructor(e){this.name=a.id,this._options={XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0,...e}}/**
   * Wrap timer functions and event targets to catch errors
   * and provide better metadata.
   */setupOnce(){this._options.setTimeout&&(0,n.fill)(i.WINDOW,"setTimeout",o),this._options.setInterval&&(0,n.fill)(i.WINDOW,"setInterval",o),this._options.requestAnimationFrame&&(0,n.fill)(i.WINDOW,"requestAnimationFrame",l),this._options.XMLHttpRequest&&"XMLHttpRequest"in i.WINDOW&&(0,n.fill)(XMLHttpRequest.prototype,"send",c);let e=this._options.eventTarget;if(e){let t=Array.isArray(e)?e:s;t.forEach(u)}}}/** JSDoc */function o(e){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return function(...t){let n=t[0];return t[0]=(0,i.wrap)(n,{mechanism:{data:{function:(0,r.getFunctionName)(e)},handled:!1,type:"instrument"}}),e.apply(this,t)}}/** JSDoc */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function l(e){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return function(t){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return e.apply(this,[(0,i.wrap)(t,{mechanism:{data:{function:"requestAnimationFrame",handler:(0,r.getFunctionName)(e)},handled:!1,type:"instrument"}})])}}/** JSDoc */function c(e){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return function(...t){// eslint-disable-next-line @typescript-eslint/no-this-alias
let s=this;return["onload","onerror","onprogress","onreadystatechange"].forEach(e=>{e in s&&"function"==typeof s[e]&&(0,n.fill)(s,e,function(t){let s={mechanism:{data:{function:e,handler:(0,r.getFunctionName)(t)},handled:!1,type:"instrument"}},a=(0,n.getOriginalFunction)(t);// Otherwise wrap directly
return a&&(s.mechanism.data.handler=(0,r.getFunctionName)(a)),(0,i.wrap)(t,s)})}),e.apply(this,t)}}/** JSDoc */function u(e){// eslint-disable-next-line @typescript-eslint/no-explicit-any
let t=i.WINDOW,s=t[e]&&t[e].prototype;// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
s&&s.hasOwnProperty&&s.hasOwnProperty("addEventListener")&&((0,n.fill)(s,"addEventListener",function(t){return function(n,s,a){try{"function"==typeof s.handleEvent&&//  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would
//  introduce a bug here, because bind returns a new function that doesn't have our
//  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.
//  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.
// eslint-disable-next-line @typescript-eslint/unbound-method
(s.handleEvent=(0,i.wrap)(s.handleEvent,{mechanism:{data:{function:"handleEvent",handler:(0,r.getFunctionName)(s),target:e},handled:!1,type:"instrument"}}))}catch(e){// can sometimes get 'Permission denied to access property "handle Event'
}return t.apply(this,[n,// eslint-disable-next-line @typescript-eslint/no-explicit-any
(0,i.wrap)(s,{mechanism:{data:{function:"addEventListener",handler:(0,r.getFunctionName)(s),target:e},handled:!1,type:"instrument"}}),a])}}),(0,n.fill)(s,"removeEventListener",function(e){return function(t,n,r){try{let i=n&&n.__sentry_wrapped__;i&&e.call(this,t,i,r)}catch(e){// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
}return e.call(this,t,n,r)}}))}a.__initStatic()}),W("5DHQv",function(e,t){w(e.exports,"Breadcrumbs",()=>d);var n=z("fSbgy"),r=z("3OPQI"),i=z("9jSUf"),s=z("cuGn6"),a=z("ljiYl"),o=z("70TMV"),l=z("VBQMn"),c=z("hEms9"),u=z("lJotG");/**
 * Default Breadcrumbs instrumentations
 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
 */class d{/**
   * @inheritDoc
   */static __initStatic(){this.id="Breadcrumbs"}/**
   * @inheritDoc
   *//**
   * Options of the breadcrumbs integration.
   */// This field is public, because we use it in the browser client to check if the `sentry` option is enabled.
/**
   * @inheritDoc
   */constructor(e){this.name=d.id,this.options={console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0,...e}}/**
   * Instrument browser built-ins w/ breadcrumb capturing
   *  - Console API
   *  - DOM API (click/typing)
   *  - XMLHttpRequest API
   *  - Fetch API
   *  - History API
   */setupOnce(){var e;if(this.options.console&&(0,r.addInstrumentationHandler)("console",h),this.options.dom&&(0,r.addInstrumentationHandler)("dom",(e=this.options.dom,function(t){let r;let i="object"==typeof e?e.serializeAttribute:void 0,o="object"==typeof e&&"number"==typeof e.maxStringLength?e.maxStringLength:void 0;o&&o>1024&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,a.logger).warn(`\`dom.maxStringLength\` cannot exceed 1024, but a value of ${o} was configured. Sentry will use 1024 instead.`),o=1024),"string"==typeof i&&(i=[i]);// Accessing event.target can throw (see getsentry/raven-js#838, #768)
try{let e=t.event;r=e&&e.target?(0,s.htmlTreeAsString)(e.target,{keyAttrs:i,maxStringLength:o}):(0,s.htmlTreeAsString)(e,{keyAttrs:i,maxStringLength:o})}catch(e){r="<unknown>"}0!==r.length&&(0,n.getCurrentHub)().addBreadcrumb({category:`ui.${t.name}`,message:r},{event:t.event,name:t.name,global:t.global})})),this.options.xhr&&(0,r.addInstrumentationHandler)("xhr",f),this.options.fetch&&(0,r.addInstrumentationHandler)("fetch",_),this.options.history&&(0,r.addInstrumentationHandler)("history",m),this.options.sentry){let e=(0,n.getCurrentHub)().getClient();e&&e.on&&e.on("beforeSendEvent",p)}}}/**
 * Adds a breadcrumb for Sentry events or transactions if this option is enabled.
 */function p(e){(0,n.getCurrentHub)().addBreadcrumb({category:`sentry.${"transaction"===e.type?"transaction":"event"}`,event_id:e.event_id,level:e.level,message:(0,i.getEventDescription)(e)},{event:e})}/**
 * Creates breadcrumbs from console API calls
 */function h(e){let t={category:"console",data:{arguments:e.args,logger:"console"},level:(0,c.severityLevelFromString)(e.level),message:(0,l.safeJoin)(e.args," ")};if("assert"===e.level){if(!1!==e.args[0])return;t.message=`Assertion failed: ${(0,l.safeJoin)(e.args.slice(1)," ")||"console.assert"}`,t.data.arguments=e.args.slice(1)}(0,n.getCurrentHub)().addBreadcrumb(t,{input:e.args,level:e.level})}/**
 * Creates breadcrumbs from XHR API calls
 */function f(e){let{startTimestamp:t,endTimestamp:i}=e,s=e.xhr[r.SENTRY_XHR_DATA_KEY];// We only capture complete, non-sentry requests
if(!t||!i||!s)return;let{method:a,url:o,status_code:l,body:c}=s,u={xhr:e.xhr,input:c,startTimestamp:t,endTimestamp:i};(0,n.getCurrentHub)().addBreadcrumb({category:"xhr",data:{method:a,url:o,status_code:l},type:"http"},u)}/**
 * Creates breadcrumbs from fetch API calls
 */function _(e){let{startTimestamp:t,endTimestamp:r}=e;// We only capture complete fetch requests
if(r&&(!e.fetchData.url.match(/sentry_key/)||"POST"!==e.fetchData.method)){if(e.error){let i=e.fetchData,s={data:e.error,input:e.args,startTimestamp:t,endTimestamp:r};(0,n.getCurrentHub)().addBreadcrumb({category:"fetch",data:i,level:"error",type:"http"},s)}else{let i={...e.fetchData,status_code:e.response&&e.response.status},s={input:e.args,response:e.response,startTimestamp:t,endTimestamp:r};(0,n.getCurrentHub)().addBreadcrumb({category:"fetch",data:i,type:"http"},s)}}}/**
 * Creates breadcrumbs from history API calls
 */function m(e){let t=e.from,r=e.to,i=(0,o.parseUrl)(u.WINDOW.location.href),s=(0,o.parseUrl)(t),a=(0,o.parseUrl)(r);s.path||(s=i),i.protocol===a.protocol&&i.host===a.host&&(r=a.relative),i.protocol===s.protocol&&i.host===s.host&&(t=s.relative),(0,n.getCurrentHub)().addBreadcrumb({category:"navigation",data:{from:t,to:r}})}d.__initStatic()}),W("70TMV",function(e,t){/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */function n(e){if(!e)return{};let t=e.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!t)return{};// coerce to undefined values to empty string so we don't get 'undefined'
let n=t[6]||"",r=t[8]||"";return{host:t[4],path:t[5],protocol:t[2],search:n,hash:r,relative:t[5]+n+r}}/**
 * Returns number of URL segments of a passed string URL.
 */function r(e){// split at '/' or at '\/' to split regex urls correctly
return e.split(/\\?\//).filter(e=>e.length>0&&","!==e).length}w(e.exports,"parseUrl",()=>n),w(e.exports,"getNumberOfUrlSegments",()=>r)}),W("hEms9",function(e,t){w(e.exports,"severityLevelFromString",()=>r);// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either
//
// a) moving `validSeverityLevels` to `@sentry/types`,
// b) moving the`SeverityLevel` type here, or
// c) importing `validSeverityLevels` from here into `@sentry/types`.
//
// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would
// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the
// type, reminding anyone who changes it to change this list also, will have to do.
let n=["fatal","error","warning","log","info","debug"];/**
 * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.
 *
 * @param level String representation of desired `SeverityLevel`.
 * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.
 */function r(e){return"warn"===e?"warning":n.includes(e)?e:"log"}}),W("9zhFP",function(e,t){w(e.exports,"LinkedErrors",()=>i);var n=z("bvosW"),r=z("iltSe");/** Adds SDK info to an event. */class i{/**
   * @inheritDoc
   */static __initStatic(){this.id="LinkedErrors"}/**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   */constructor(e={}){this.name=i.id,this._key=e.key||"cause",this._limit=e.limit||5}/** @inheritdoc */setupOnce(){// noop
}/**
   * @inheritDoc
   */preprocessEvent(e,t,i){let s=i.getOptions();(0,n.applyAggregateErrorsToEvent)(r.exceptionFromError,s.stackParser,s.maxValueLength,this._key,this._limit,e,t)}}i.__initStatic()}),W("bvosW",function(e,t){w(e.exports,"applyAggregateErrorsToEvent",()=>i);var n=z("1A3EQ"),r=z("VBQMn");/**
 * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.
 */function i(e,t,i=250,o,l,c,u){if(!c.exception||!c.exception.values||!u||!(0,n.isInstanceOf)(u.originalException,Error))return;// Generally speaking the last item in `event.exception.values` is the exception originating from the original Error
let d=c.exception.values.length>0?c.exception.values[c.exception.values.length-1]:void 0;// We only create exception grouping if there is an exception in the event.
d&&(c.exception.values=(function e(t,r,i,o,l,c,u,d){if(c.length>=i+1)return c;let p=[...c];if((0,n.isInstanceOf)(o[l],Error)){s(u,d);let n=t(r,o[l]),c=p.length;a(n,l,c,d),p=e(t,r,i,o[l],l,[n,...p],n,c)}return Array.isArray(o.errors)&&o.errors.forEach((o,c)=>{if((0,n.isInstanceOf)(o,Error)){s(u,d);let n=t(r,o),h=p.length;a(n,`errors[${c}]`,h,d),p=e(t,r,i,o,l,[n,...p],n,h)}}),p})(e,t,l,u.originalException,o,c.exception.values,d,0).map(e=>(e.value&&(e.value=(0,r.truncate)(e.value,i)),e)))}function s(e,t){// Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.
e.mechanism=e.mechanism||{type:"generic",handled:!0},e.mechanism={...e.mechanism,is_exception_group:!0,exception_id:t}}function a(e,t,n,r){// Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.
e.mechanism=e.mechanism||{type:"generic",handled:!0},e.mechanism={...e.mechanism,type:"chained",source:t,exception_id:n,parent_id:r}}}),W("49tkP",function(e,t){w(e.exports,"HttpContext",()=>r);var n=z("lJotG");/** HttpContext integration collects information about HTTP request headers */class r{/**
   * @inheritDoc
   */static __initStatic(){this.id="HttpContext"}/**
   * @inheritDoc
   */constructor(){this.name=r.id}/**
   * @inheritDoc
   */setupOnce(){// noop
}/** @inheritDoc */preprocessEvent(e){// if none of the information we want exists, don't bother
if(!n.WINDOW.navigator&&!n.WINDOW.location&&!n.WINDOW.document)return;// grab as much info as exists and add it to the event
let t=e.request&&e.request.url||n.WINDOW.location&&n.WINDOW.location.href,{referrer:r}=n.WINDOW.document||{},{userAgent:i}=n.WINDOW.navigator||{},s={...e.request&&e.request.headers,...r&&{Referer:r},...i&&{"User-Agent":i}},a={...e.request,...t&&{url:t},headers:s};e.request=a}}r.__initStatic()}),W("Yr1pj",function(e,t){w(e.exports,"Dedupe",()=>r);var n=z("ljiYl");/** Deduplication filter */class r{/**
   * @inheritDoc
   */static __initStatic(){this.id="Dedupe"}/**
   * @inheritDoc
   *//**
   * @inheritDoc
   */constructor(){this.name=r.id}/** @inheritDoc */setupOnce(e,t){// noop
}/**
   * @inheritDoc
   */processEvent(e){// We want to ignore any non-error type events, e.g. transactions or replays
// These should never be deduped, and also not be compared against as _previousEvent.
if(e.type)return e;// Juuust in case something goes wrong
try{var t;if((t=this._previousEvent)&&(/** JSDoc */function(e,t){let n=e.message,r=t.message;return!!((n||r)&&(!n||r)&&(n||!r)&&n===r&&s(e,t)&&i(e,t))}(e,t)||/** JSDoc */function(e,t){let n=a(t),r=a(e);return!!(n&&r&&n.type===r.type&&n.value===r.value&&s(e,t)&&i(e,t))}(e,t)))return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,n.logger).warn("Event dropped due to being a duplicate of previously captured event."),null}catch(e){}// eslint-disable-line no-empty
return this._previousEvent=e}}/** JSDoc */function i(e,t){let n=o(e),r=o(t);// If neither event has a stacktrace, they are assumed to be the same
if(!n&&!r)return!0;// If only one event has a stacktrace, but not the other one, they are not the same
if(n&&!r||!n&&r||r.length!==n.length)return!1;// Otherwise, compare the two
for(let e=0;e<r.length;e++){let t=r[e],i=n[e];if(t.filename!==i.filename||t.lineno!==i.lineno||t.colno!==i.colno||t.function!==i.function)return!1}return!0}/** JSDoc */function s(e,t){let n=e.fingerprint,r=t.fingerprint;// If neither event has a fingerprint, they are assumed to be the same
if(!n&&!r)return!0;// If only one event has a fingerprint, but not the other one, they are not the same
if(n&&!r||!n&&r)return!1;// Otherwise, compare the two
try{return!(n.join("")!==r.join(""))}catch(e){return!1}}/** JSDoc */function a(e){return e.exception&&e.exception.values&&e.exception.values[0]}/** JSDoc */function o(e){let t=e.exception;if(t)try{// @ts-expect-error Object could be undefined
return t.values[0].stacktrace.frames}catch(e){}}r.__initStatic()}),W("78zHj",function(e,t){w(e.exports,"chromeStackLineParser",()=>a),w(e.exports,"geckoStackLineParser",()=>c),w(e.exports,"winjsStackLineParser",()=>d),w(e.exports,"opera10StackLineParser",()=>h),w(e.exports,"opera11StackLineParser",()=>_),w(e.exports,"defaultStackLineParsers",()=>m),w(e.exports,"defaultStackParser",()=>g);var n=z("bWqC9");function r(e,t,n,r){let i={filename:e,function:t,in_app:!0};return void 0!==n&&(i.lineno=n),void 0!==r&&(i.colno=r),i}// Chromium based browsers: Chrome, Brave, new Opera, new Edge
let i=/^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,s=/\((\S*)(?::(\d+))(?::(\d+))\)/,a=[30,e=>{let t=i.exec(e);if(t){let e=t[2]&&0===t[2].indexOf("eval");// start of line
if(e){let e=s.exec(t[2]);e&&(// throw out eval line/column and use top-most line/column number
t[2]=e[1],t[3]=e[2],t[4]=e[3])}// Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now
// would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)
let[n,i]=y(t[1]||"?",t[2]);return r(i,n,t[3]?+t[3]:void 0,t[4]?+t[4]:void 0)}}],o=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i,l=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,c=[50,e=>{let t=o.exec(e);if(t){let e=t[3]&&t[3].indexOf(" > eval")>-1;if(e){let e=l.exec(t[3]);e&&(// throw out eval line/column and use top-most line number
t[1]=t[1]||"eval",t[3]=e[1],t[4]=e[2],t[5]="")}let n=t[3],i=t[1]||"?";return[i,n]=y(i,n),r(n,i,t[4]?+t[4]:void 0,t[5]?+t[5]:void 0)}}],u=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:[-a-z]+):.*?):(\d+)(?::(\d+))?\)?\s*$/i,d=[40,e=>{let t=u.exec(e);return t?r(t[2],t[1]||"?",+t[3],t[4]?+t[4]:void 0):void 0}],p=/ line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,h=[10,e=>{let t=p.exec(e);return t?r(t[2],t[3]||"?",+t[1]):void 0}],f=/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\(.*\))? in (.*):\s*$/i,_=[20,e=>{let t=f.exec(e);return t?r(t[5],t[3]||t[4]||"?",+t[1],+t[2]):void 0}],m=[a,c,d],g=(0,n.createStackParser)(...m),y=(e,t)=>{let n=-1!==e.indexOf("safari-extension"),r=-1!==e.indexOf("safari-web-extension");return n||r?[-1!==e.indexOf("@")?e.split("@")[0]:"?",n?`safari-extension:${t}`:`safari-web-extension:${t}`]:[e,t]}}),W("iJSIC",function(e,t){w(e.exports,"makeFetchTransport",()=>s);var n=z("aSaUS"),r=z("fErff"),i=z("kbkW4");/**
 * Creates a Transport that uses the Fetch API to send events to Sentry.
 */function s(e,t=(0,i.getNativeFetchImplementation)()){let s=0,a=0;return(0,n.createTransport)(e,function(n){let o=n.body.length;s+=o,a++;let l={body:n.body,method:"POST",referrerPolicy:"origin",headers:e.headers,// Outgoing requests are usually cancelled when navigating to a different page, causing a "TypeError: Failed to
// fetch" error and sending a "network_error" client-outcome - in Chrome, the request status shows "(cancelled)".
// The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're
// frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).
// Gotchas:
// - `keepalive` isn't supported by Firefox
// - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):
//   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.
//   We will therefore only activate the flag when we're below that limit.
// There is also a limit of requests that can be open at the same time, so we also limit this to 15
// See https://github.com/getsentry/sentry-javascript/pull/7553 for details
keepalive:s<=6e4&&a<15,...e.fetchOptions};try{return t(e.url,l).then(e=>(s-=o,a--,{statusCode:e.status,headers:{"x-sentry-rate-limits":e.headers.get("X-Sentry-Rate-Limits"),"retry-after":e.headers.get("Retry-After")}}))}catch(e){return(0,i.clearCachedFetchImplementation)(),s-=o,a--,(0,r.rejectedSyncPromise)(e)}})}}),W("aSaUS",function(e,t){w(e.exports,"createTransport",()=>l);var n=z("37cNF"),r=z("3z36P"),i=z("ljiYl"),s=z("cJJ9u"),a=z("fErff"),o=z("1ZuTv");/**
 * Creates an instance of a Sentry `Transport`
 *
 * @param options
 * @param makeRequest
 */function l(e,t,l=(0,s.makePromiseBuffer)(e.bufferSize||30)){let u={};function d(s){let d=[];// Skip sending if envelope is empty after filtering out rate limited events
if(// Drop rate limited items from envelope
(0,n.forEachEnvelopeItem)(s,(t,i)=>{let s=(0,n.envelopeItemTypeToDataCategory)(i);if((0,r.isRateLimited)(u,s)){let n=c(t,i);e.recordDroppedEvent("ratelimit_backoff",s,n)}else d.push(t)}),0===d.length)return(0,a.resolvedSyncPromise)();// eslint-disable-next-line @typescript-eslint/no-explicit-any
let p=(0,n.createEnvelope)(s[0],d),h=t=>{(0,n.forEachEnvelopeItem)(p,(r,i)=>{let s=c(r,i);e.recordDroppedEvent(t,(0,n.envelopeItemTypeToDataCategory)(i),s)})};return l.add(()=>t({body:(0,n.serializeEnvelope)(p,e.textEncoder)}).then(e=>(void 0!==e.statusCode&&(e.statusCode<200||e.statusCode>=300)&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,i.logger).warn(`Sentry responded with status code ${e.statusCode} to sent event.`),u=(0,r.updateRateLimits)(u,e),e),e=>{throw h("network_error"),e})).then(e=>e,e=>{if(e instanceof o.SentryError)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,i.logger).error("Skipped sending event because buffer is full."),h("queue_overflow"),(0,a.resolvedSyncPromise)();throw e})}return(// We use this to identifify if the transport is the base transport
// TODO (v8): Remove this again as we'll no longer need it
d.__sentry__baseTransport__=!0,{send:d,flush:e=>l.drain(e)})}function c(e,t){if("event"===t||"transaction"===t)return Array.isArray(e)?e[1]:void 0}}),W("3z36P",function(e,t){/**
 * Extracts Retry-After value from the request header or returns default value
 * @param header string representation of 'Retry-After' header
 * @param now current unix timestamp
 *
 */function n(e,t=Date.now()){let n=parseInt(`${e}`,10);if(!isNaN(n))return 1e3*n;let r=Date.parse(`${e}`);return isNaN(r)?6e4:r-t}/**
 * Checks if a category is rate limited
 */function r(e,t,n=Date.now()){return(e[t]||e.all||0)>n}/**
 * Update ratelimits from incoming headers.
 *
 * @return the updated RateLimits object.
 */function i(e,{statusCode:t,headers:r},i=Date.now()){let s={...e},a=r&&r["x-sentry-rate-limits"],o=r&&r["retry-after"];if(a)/**
     * rate limit headers are of the form
     *     <header>,<header>,..
     * where each <header> is of the form
     *     <retry_after>: <categories>: <scope>: <reason_code>
     * where
     *     <retry_after> is a delay in seconds
     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
     *         <category>;<category>;...
     *     <scope> is what's being limited (org, project, or key) - ignored by SDK
     *     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
     */for(let e of a.trim().split(",")){let[t,n]=e.split(":",2),r=parseInt(t,10),a=(isNaN(r)?60:r)*1e3;if(n)for(let e of n.split(";"))s[e]=i+a;else s.all=i+a}else o?s.all=i+n(o,i):429===t&&(s.all=i+6e4);return s}w(e.exports,"parseRetryAfterHeader",()=>n),w(e.exports,"isRateLimited",()=>r),w(e.exports,"updateRateLimits",()=>i)}),W("cJJ9u",function(e,t){w(e.exports,"makePromiseBuffer",()=>i);var n=z("1ZuTv"),r=z("fErff");/**
 * Creates an new PromiseBuffer object with the specified limit
 * @param limit max number of promises that can be stored in the buffer
 */function i(e){let t=[];/**
   * Remove a promise from the queue.
   *
   * @param task Can be any PromiseLike<T>
   * @returns Removed promise.
   */function i(e){return t.splice(t.indexOf(e),1)[0]}return{$:t,add:/**
   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
   *
   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
   *        limit check.
   * @returns The original promise.
   */function(s){if(!(void 0===e||t.length<e))return(0,r.rejectedSyncPromise)(new n.SentryError("Not adding Promise because buffer limit was reached."));// start the task and add its promise to the queue
let a=s();return -1===t.indexOf(a)&&t.push(a),a.then(()=>i(a))// Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
// rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
// have promises, so TS has to polyfill when down-compiling.)
.then(null,()=>i(a).then(null,()=>{// We have to add another catch here because `remove()` starts a new promise chain.
    })),a},drain:/**
   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
   * `false` otherwise
   */function(e){return new r.SyncPromise((n,i)=>{let s=t.length;if(!s)return n(!0);// wait for `timeout` ms and then resolve to `false` (if not cancelled first)
let a=setTimeout(()=>{e&&e>0&&n(!1)},e);// if all promises resolve in time, cancel the timer and resolve to `true`
t.forEach(e=>{(0,r.resolvedSyncPromise)(e).then(()=>{--s||(clearTimeout(a),n(!0))},i)})})}}}}),W("kbkW4",function(e,t){let n;w(e.exports,"getNativeFetchImplementation",()=>a),w(e.exports,"clearCachedFetchImplementation",()=>o);var r=z("q7nNB"),i=z("ljiYl"),s=z("lJotG");/**
 * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.
 * Whenever someone wraps the Fetch API and returns the wrong promise chain,
 * this chain becomes orphaned and there is no possible way to capture it's rejections
 * other than allowing it bubble up to this very handler. eg.
 *
 * const f = window.fetch;
 * window.fetch = function () {
 *   const p = f.apply(this, arguments);
 *
 *   p.then(function() {
 *     console.log('hi.');
 *   });
 *
 *   return p;
 * }
 *
 * `p.then(function () { ... })` is producing a completely separate promise chain,
 * however, what's returned is `p` - the result of original `fetch` call.
 *
 * This mean, that whenever we use the Fetch API to send our own requests, _and_
 * some ad-blocker blocks it, this orphaned chain will _always_ reject,
 * effectively causing another event to be captured.
 * This makes a whole process become an infinite loop, which we need to somehow
 * deal with, and break it in one way or another.
 *
 * To deal with this issue, we are making sure that we _always_ use the real
 * browser Fetch API, instead of relying on what `window.fetch` exposes.
 * The only downside to this would be missing our own requests as breadcrumbs,
 * but because we are already not doing this, it should be just fine.
 *
 * Possible failed fetch error messages per-browser:
 *
 * Chrome:  Failed to fetch
 * Edge:    Failed to Fetch
 * Firefox: NetworkError when attempting to fetch resource
 * Safari:  resource blocked by content blocker
 */function a(){if(n)return n;/* eslint-disable @typescript-eslint/unbound-method */// Fast path to avoid DOM I/O
if((0,r.isNativeFetch)(s.WINDOW.fetch))return n=(0,s.WINDOW).fetch.bind(s.WINDOW);let e=s.WINDOW.document,t=s.WINDOW.fetch;// eslint-disable-next-line deprecation/deprecation
if(e&&"function"==typeof e.createElement)try{let n=e.createElement("iframe");n.hidden=!0,e.head.appendChild(n);let r=n.contentWindow;r&&r.fetch&&(t=r.fetch),e.head.removeChild(n)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,i.logger).warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return n=t.bind(s.WINDOW);/* eslint-enable @typescript-eslint/unbound-method */}/** Clears cached fetch impl */function o(){n=void 0}}),W("jE7mF",function(e,t){w(e.exports,"makeXHRTransport",()=>i);var n=z("aSaUS"),r=z("fErff");/**
 * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.
 */function i(e){return(0,n.createTransport)(e,function(t){return new r.SyncPromise((n,r)=>{let i=new XMLHttpRequest;for(let t in i.onerror=r,i.onreadystatechange=()=>{4===i.readyState&&n({statusCode:i.status,headers:{"x-sentry-rate-limits":i.getResponseHeader("X-Sentry-Rate-Limits"),"retry-after":i.getResponseHeader("Retry-After")}})},i.open("POST",e.url),e.headers)Object.prototype.hasOwnProperty.call(e.headers,t)&&i.setRequestHeader(t,e.headers[t]);i.send(t.body)})})}}),W("e5i1Q",function(e,t){w(e.exports,"environment",()=>n),w(e.exports,"getTargetOrigin",()=>i),w(e.exports,"getClientId",()=>s),w(e.exports,"sentryDsn",()=>a),w(e.exports,"version",()=>o);let n=function(){let{hostname:e}=window.location;if("trello-slack.services.atlassian.com"===e)return"production";if("trello-slack.stg.services.atlassian.com"===e)return"staging";if(e.endsWith(".public.atlastunnel.com"))return"local";throw Error(`Unknown environment for "${e}"`)}(),r={local:"*",staging:"https://trellis.coffee",production:"https://trello.com"};function i(){return r[n]}function s(){return({local:void 0,staging:"937e53d4db0c326943b159f1f1524b7b",production:"864a04734808f534c44741e723a3b8e1"})[n]}let a="https://02534db8e45845239137d482cf4fb3b6@o55978.ingest.sentry.io/6534227",o="build-3793"});// eslint-disable-next-line @typescript-eslint/unbound-method
const $=Object.prototype.toString;/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function H(e){switch($.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return q(e,Error)}}/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */function V(e,t){return $.call(e)===`[object ${t}]`}/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function Z(e){return V(e,"Object")}/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */function q(e,t){try{return e instanceof t}catch(e){return!1}}/** Internal global with common properties and Sentry extensions  */// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification
// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js
// core-js has the following licence:
//
// Copyright (c) 2014-2022 Denis Pushkarev
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/** Returns 'obj' if it's the global object, otherwise returns undefined */function J(e){return e&&e.Math==Math?e:void 0}/** Get's the global object for the current JavaScript runtime */const K="object"==typeof globalThis&&J(globalThis)||// eslint-disable-next-line no-restricted-globals
"object"==typeof window&&J(window)||"object"==typeof self&&J(self)||"object"==typeof P&&J(P)||function(){return this}()||{},X=["debug","info","warn","error","log","assert","trace"],Q={},ee=function(){let e=!1,t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return"undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__?X.forEach(n=>{// eslint-disable-next-line @typescript-eslint/no-explicit-any
t[n]=(...t)=>{e&&/** JSDoc *//**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */function(e){if(!("console"in K))return e();let t=K.console,n={},r=Object.keys(Q);// Restore all wrapped console methods
r.forEach(e=>{let r=Q[e];n[e]=t[e],t[e]=r});try{return e()}finally{// Revert restoration to wrapped state
r.forEach(e=>{t[e]=n[e]})}}(()=>{K.console[n](`Sentry Logger [${n}]:`,...t)})}}):X.forEach(e=>{t[e]=()=>void 0}),t}();/** Creates a string representation of the target of an `Event` object */function et(e){try{return"undefined"!=typeof Element&&q(e,Element)?/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */function(e,t={}){// try/catch both:
// - accessing event.target (see getsentry/raven-js#838, #768)
// - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
// - can throw an exception in some circumstances.
try{let n,r=e,i=[],s=0,a=0,o=Array.isArray(t)?t:t.keyAttrs,l=!Array.isArray(t)&&t.maxStringLength||80;for(;// bail out if
// - nextStr is the 'html' element
// - the length of the string that would be created exceeds maxStringLength
//   (ignore this limit if we are on the first iteration)
r&&s++<5&&(n=/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */function(e,t){let n,r,i,s,a;let o=[];if(!e||!e.tagName)return"";o.push(e.tagName.toLowerCase());// Pairs of attribute keys defined in `serializeAttribute` and their values on element.
let l=t&&t.length?t.filter(t=>e.getAttribute(t)).map(t=>[t,e.getAttribute(t)]):null;if(l&&l.length)l.forEach(e=>{o.push(`[${e[0]}="${e[1]}"]`)});else if(e.id&&o.push(`#${e.id}`),// eslint-disable-next-line prefer-const
(n=e.className)&&V(n,"String"))for(a=0,r=n.split(/\s+/);a<r.length;a++)o.push(`.${r[a]}`);let c=["aria-label","type","name","title","alt"];for(a=0;a<c.length;a++)i=c[a],(s=e.getAttribute(i))&&o.push(`[${i}="${s}"]`);return o.join("")}(r,o),"html"!==n&&(!(s>1)||!(a+3*i.length+n.length>=l)));)i.push(n),a+=n.length,r=r.parentNode;return i.reverse().join(" > ")}catch(e){return"<unknown>"}}(e):Object.prototype.toString.call(e)}catch(e){return"<unknown>"}}/** Filters out all but an object's own properties */function en(e){if("object"!=typeof e||null===e)return{};{let t={};for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}}const er="<anonymous>";/** JSDoc *//** Patch toString calls to return proper name for wrapped functions */class ei{/**
   * @inheritDoc
   */static __initStatic(){this.id="ExtraErrorData"}/**
   * @inheritDoc
   *//** JSDoc *//**
   * @inheritDoc
   */constructor(e){this.name=ei.id,this._options={depth:3,...e}}/**
   * @inheritDoc
   */setupOnce(e,t){// noop
}/** @inheritDoc */processEvent(e,t){return this.enhanceEventWithErrorData(e,t)}/**
   * Attaches extracted information from the Error object to extra field in the Event.
   *
   * TODO (v8): Drop this public function.
   */enhanceEventWithErrorData(e,t={}){return function(e,t={},n){if(!t.originalException||!H(t.originalException))return e;let r=t.originalException.name||t.originalException.constructor.name,i=/**
 * Extract extra information from the Error object
 */function(e){// We are trying to enhance already existing event, so no harm done if it won't succeed
try{let t=["name","message","stack","line","column","fileName","lineNumber","columnNumber","toJSON"],n={};// We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.
for(let r of Object.keys(e)){if(-1!==t.indexOf(r))continue;let i=e[r];n[r]=H(i)?i.toString():i}// Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)
if("function"==typeof e.toJSON){let t=e.toJSON();for(let e of Object.keys(t)){let r=t[e];n[e]=H(r)?r.toString():r}}return n}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&ee.error("Unable to extract extra data from the Error object:",e)}return null}(t.originalException);if(i){let t={...e.contexts},s=/**
 * Recursively normalizes the given object.
 *
 * - Creates a copy to prevent original input mutation
 * - Skips non-enumerable properties
 * - When stringifying, calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format
 * - Translates known global objects/classes to a string representations
 * - Takes care of `Error` object serialization
 * - Optionally limits depth of final output
 * - Optionally limits number of properties/elements included in any single object/array
 *
 * @param input The object to be normalized.
 * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)
 * @param maxProperties The max number of elements or properties to be included in any single array or
 * object in the normallized output.
 * @returns A normalized version of the object, or `"**non-serializable**"` if any errors are thrown during normalization.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function(e,t=100,n=1/0){try{// since we're at the outermost level, we don't provide a key
return(/**
 * Visits a node to perform normalization on it
 *
 * @param key The key corresponding to the given node
 * @param value The node to be visited
 * @param depth Optional number indicating the maximum recursion depth
 * @param maxProperties Optional maximum number of properties/elements included in any single object/array
 * @param memo Optional Memo class handling decycling
 */function e(t,n,r=1/0,i=1/0,s=/* eslint-disable @typescript-eslint/no-unsafe-member-access *//* eslint-disable @typescript-eslint/no-explicit-any *//**
 * Helper to decycle json objects
 */function(){let e="function"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);// eslint-disable-next-line @typescript-eslint/prefer-for-of
for(let e=0;e<t.length;e++){let r=t[e];if(r===n)return!0}return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}()){let[a,o]=s;// Get the simple cases out of the way first
if(null==n||// this matches null and undefined -> eqeq not eqeqeq
["number","boolean","string"].includes(typeof n)&&!("number"==typeof n&&n!=n))return n;let l=/* eslint-disable complexity *//**
 * Stringify the given value. Handles various known special values and types.
 *
 * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn
 * the number 1231 into "[Object Number]", nor on `null`, as it will throw.
 *
 * @param value The value to stringify
 * @returns A stringified representation of the given value
 */function(e,// our internal use, it'll do
t){try{if("domain"===e&&t&&"object"==typeof t&&t._events)return"[Domain]";if("domainEmitter"===e)return"[DomainEmitter]";// It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first
// which won't throw if they are not present.
if(void 0!==P&&t===P)return"[Global]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof window&&t===window)return"[Window]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof document&&t===document)return"[Document]";if("object"==typeof t&&null!==t&&(t.__isVue||t._isVue))return"[VueViewModel]";// React's SyntheticEvent thingy
if(Z(t)&&"nativeEvent"in t&&"preventDefault"in t&&"stopPropagation"in t)return"[SyntheticEvent]";if("number"==typeof t&&t!=t)return"[NaN]";if("function"==typeof t)return`[Function: ${/**
 * Safely extract function name from itself
 */function(e){try{if(!e||"function"!=typeof e)return er;return e.name||er}catch(e){// Just accessing custom props in some Selenium environments
// can cause a "Permission denied" exception (see raven-js#495).
return er}}(t)}]`;if("symbol"==typeof t)return`[${String(t)}]`;// stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion
if("bigint"==typeof t)return`[BigInt: ${String(t)}]`;// Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting
// them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as
// `"[object Object]"`. If we instead look at the constructor's name (which is the same as the name of the class),
// we can make sure that only plain objects come out that way.
let n=/* eslint-enable complexity */function(e){let t=Object.getPrototypeOf(e);return t?t.constructor.name:"null prototype"}(t);// Handle HTML Elements
if(/^HTML(\w*)Element$/.test(n))return`[HTMLElement: ${n}]`;return`[object ${n}]`}catch(e){return`**non-serializable** (${e})`}}(t,n);// Anything we could potentially dig into more (objects or arrays) will have come back as `"[object XXXX]"`.
// Everything else will have already been serialized, so if we don't see that pattern, we're done.
if(!l.startsWith("[object "))return l;// From here on, we can assert that `value` is either an object or an array.
// Do not normalize objects that we know have already been normalized. As a general rule, the
// "__sentry_skip_normalization__" property should only be used sparingly and only should only be set on objects that
// have already been normalized.
if(n.__sentry_skip_normalization__)return n;// We can set `__sentry_override_normalization_depth__` on an object to ensure that from there
// We keep a certain amount of depth.
// This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.
let c="number"==typeof n.__sentry_override_normalization_depth__?n.__sentry_override_normalization_depth__:r;// We're also done if we've reached the max depth
if(0===c)return l.replace("object ","");// If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.
if(a(n))return"[Circular ~]";if(n&&"function"==typeof n.toJSON)try{let t=n.toJSON();// We need to normalize the return value of `.toJSON()` in case it has circular references
return e("",t,c-1,i,s)}catch(e){// pass (The built-in `toJSON` failed, but we can still try to do it ourselves)
}// At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse
// because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each
// property/entry, and keep track of the number of items we add to it.
let u=Array.isArray(n)?[]:{},d=0,p=/**
 * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their
 * non-enumerable properties attached.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor
 *  an Error.
 */function(e){if(H(e))return{message:e.message,name:e.name,stack:e.stack,...en(e)};if(!("undefined"!=typeof Event&&q(e,Event)))return e;{let t={type:e.type,target:et(e.target),currentTarget:et(e.currentTarget),...en(e)};return"undefined"!=typeof CustomEvent&&q(e,CustomEvent)&&(t.detail=e.detail),t}}(n);for(let t in p){// Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
if(!Object.prototype.hasOwnProperty.call(p,t))continue;if(d>=i){u[t]="[MaxProperties ~]";break}// Recursively visit all the child nodes
let n=p[t];u[t]=e(t,n,c-1,i,s),d++}// Return accumulated values
return(// Once we've visited all the branches, remove the parent from memo storage
o(n),u)}("",e,t,n))}catch(e){return{ERROR:`**non-serializable** (${e})`}}}(i,n);return Z(s)&&(/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */function(e,t,n){try{Object.defineProperty(e,t,{// enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
value:n,writable:!0,configurable:!0})}catch(n){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&ee.log(`Failed to add non-enumerable property "${t}" to object`,e)}}(s,"__sentry_skip_normalization__",!0),t[r]=s),{...e,contexts:t}}return e}(e,t,this._options.depth)}}ei.__initStatic();var es={};w(es,"init",()=>ak),w(es,"Profiler",()=>aA),w(es,"useProfiler",()=>aO),w(es,"withProfiler",()=>aD),w(es,"ErrorBoundary",()=>z("9CQuz").ErrorBoundary),w(es,"withErrorBoundary",()=>z("9CQuz").withErrorBoundary),w(es,"createReduxEnhancer",()=>aM),w(es,"reactRouterV3Instrumentation",()=>aL),w(es,"reactRouterV4Instrumentation",()=>aP),w(es,"reactRouterV5Instrumentation",()=>aY),w(es,"withSentryRouting",()=>aj),w(es,"reactRouterV6Instrumentation",()=>aH),w(es,"withSentryReactRouterV6Routing",()=>aJ),w(es,"wrapCreateBrowserRouter",()=>aX),w(es,"wrapUseRoutes",()=>aK);var ea={};w(ea,"Integrations",()=>aw),w(ea,"FunctionToString",()=>z("5pAFD").FunctionToString),w(ea,"Hub",()=>z("fSbgy").Hub),w(ea,"InboundFilters",()=>z("aKxAe").InboundFilters),w(ea,"ModuleMetadata",()=>eq),w(ea,"SDK_VERSION",()=>z("kLkMW").SDK_VERSION),w(ea,"Scope",()=>z("b5H6o").Scope),w(ea,"addBreadcrumb",()=>z("5X2BG").addBreadcrumb),w(ea,"addGlobalEventProcessor",()=>z("2vdtW").addGlobalEventProcessor),w(ea,"addIntegration",()=>z("i03gv").addIntegration),w(ea,"addTracingExtensions",()=>eA),w(ea,"captureEvent",()=>z("5X2BG").captureEvent),w(ea,"captureException",()=>z("5X2BG").captureException),w(ea,"captureMessage",()=>z("5X2BG").captureMessage),w(ea,"close",()=>z("5X2BG").close),w(ea,"configureScope",()=>z("5X2BG").configureScope),w(ea,"continueTrace",()=>eL),w(ea,"createTransport",()=>z("aSaUS").createTransport),w(ea,"extractTraceparentData",()=>eE),w(ea,"flush",()=>z("5X2BG").flush),w(ea,"getActiveSpan",()=>eM),w(ea,"getActiveTransaction",()=>ep),w(ea,"getCurrentHub",()=>z("fSbgy").getCurrentHub),w(ea,"getHubFromCarrier",()=>z("fSbgy").getHubFromCarrier),w(ea,"lastEventId",()=>z("5X2BG").lastEventId),w(ea,"makeMain",()=>z("fSbgy").makeMain),w(ea,"makeMultiplexedTransport",()=>e$),w(ea,"setContext",()=>z("5X2BG").setContext),w(ea,"setExtra",()=>z("5X2BG").setExtra),w(ea,"setExtras",()=>z("5X2BG").setExtras),w(ea,"setMeasurement",()=>eK),w(ea,"setTag",()=>z("5X2BG").setTag),w(ea,"setTags",()=>z("5X2BG").setTags),w(ea,"setUser",()=>z("5X2BG").setUser),w(ea,"spanStatusfromHttpCode",()=>ek),w(ea,"startInactiveSpan",()=>eU),w(ea,"startSpan",()=>eO),w(ea,"startSpanManual",()=>eB),w(ea,"startTransaction",()=>z("5X2BG").startTransaction),w(ea,"trace",()=>eD),w(ea,"withScope",()=>z("5X2BG").withScope),w(ea,"WINDOW",()=>z("lJotG").WINDOW),w(ea,"BrowserClient",()=>z("1oEwI").BrowserClient),w(ea,"makeFetchTransport",()=>z("iJSIC").makeFetchTransport),w(ea,"makeXHRTransport",()=>z("jE7mF").makeXHRTransport),w(ea,"chromeStackLineParser",()=>z("78zHj").chromeStackLineParser),w(ea,"defaultStackLineParsers",()=>z("78zHj").defaultStackLineParsers),w(ea,"defaultStackParser",()=>z("78zHj").defaultStackParser),w(ea,"geckoStackLineParser",()=>z("78zHj").geckoStackLineParser),w(ea,"opera10StackLineParser",()=>z("78zHj").opera10StackLineParser),w(ea,"opera11StackLineParser",()=>z("78zHj").opera11StackLineParser),w(ea,"winjsStackLineParser",()=>z("78zHj").winjsStackLineParser),w(ea,"eventFromException",()=>z("iltSe").eventFromException),w(ea,"eventFromMessage",()=>z("iltSe").eventFromMessage),w(ea,"exceptionFromError",()=>z("iltSe").exceptionFromError),w(ea,"createUserFeedbackEnvelope",()=>z("hXEPI").createUserFeedbackEnvelope),w(ea,"captureUserFeedback",()=>z("7qvsU").captureUserFeedback),w(ea,"defaultIntegrations",()=>z("7qvsU").defaultIntegrations),w(ea,"forceLoad",()=>z("7qvsU").forceLoad),w(ea,"init",()=>z("7qvsU").init),w(ea,"onLoad",()=>z("7qvsU").onLoad),w(ea,"showReportDialog",()=>z("7qvsU").showReportDialog),w(ea,"wrap",()=>z("7qvsU").wrap),w(ea,"Replay",()=>iR),w(ea,"BrowserTracing",()=>ae),w(ea,"defaultRequestInstrumentationOptions",()=>s3),w(ea,"instrumentOutgoingRequests",()=>s6),w(ea,"makeBrowserOfflineTransport",()=>ao),w(ea,"onProfilingStartRouteTransaction",()=>ab),w(ea,"BrowserProfilingIntegration",()=>aE),w(ea,"GlobalHandlers",()=>z("jrBuy").GlobalHandlers),w(ea,"TryCatch",()=>z("fa62i").TryCatch),w(ea,"Breadcrumbs",()=>z("5DHQv").Breadcrumbs),w(ea,"LinkedErrors",()=>z("9zhFP").LinkedErrors),w(ea,"HttpContext",()=>z("49tkP").HttpContext),w(ea,"Dedupe",()=>z("Yr1pj").Dedupe);var eo=z("5X2BG"),el=z("2vdtW");z("i03gv");var ec=z("ljiYl"),eu=z("fSbgy"),ed=z("3OPQI"),ec=z("ljiYl"),eu=z("fSbgy");/** Grabs active transaction off scope, if any */function ep(e){let t=e||(0,eu.getCurrentHub)(),n=t.getScope();return n.getTransaction()}let eh=!1;/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */function ef(){let e=ep();if(e){let t="internal_error";("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Tracing] Transaction: ${t} -> Global error occured`),e.setStatus(t)}}// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the
// node.js default exit behaviour
ef.tag="sentry_tracingErrorCallback";var ec=z("ljiYl"),e_=z("lVAot"),em=z("csRh4"),eg=z("1A3EQ"),ec=z("ljiYl");const ey=/^sentry-/;/**
 * Will parse a baggage header, which is a simple key-value map, into a flat object.
 *
 * @param baggageHeader The baggage header to parse.
 * @returns a flat object containing all the key-value pairs from `baggageHeader`.
 */function eS(e){return e.split(",").map(e=>e.split("=").map(e=>decodeURIComponent(e.trim()))).reduce((e,[t,n])=>(e[t]=n,e),{})}var eb=z("9jSUf");const ev=RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */function eE(e){let t;if(!e)return;let n=e.match(ev);if(n)return"1"===n[3]?t=!0:"0"===n[3]&&(t=!1),{traceId:n[1],parentSampled:t,parentSpanId:n[2]}}var ec=z("ljiYl"),e_=z("lVAot"),eb=z("9jSUf");/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */class eT{constructor(e=1e3){this._maxlen=e,this.spans=[]}/**
   * This is just so that we don't run out of memory while recording a lot
   * of spans. At some point we just stop and flush out the start of the
   * trace tree (i.e.the first n spans with the smallest
   * start_timestamp).
   */add(e){this.spans.length>this._maxlen?e.spanRecorder=void 0:this.spans.push(e)}}/**
 * Span contains all data about a span
 */class ew{/**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * Internal keeper of the status
   *//**
   * @inheritDoc
   *//**
   * Timestamp in seconds when the span was created.
   *//**
   * Timestamp in seconds when the span ended.
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any
/**
   * List of spans that were finalized
   *//**
   * @inheritDoc
   *//**
   * The instrumenter that created this span.
   *//**
   * The origin of the span, giving context about what created the span.
   *//**
   * You should never call the constructor manually, always use `Sentry.startTransaction()`
   * or call `startChild()` on an existing span.
   * @internal
   * @hideconstructor
   * @hidden
   */constructor(e={}){this.traceId=e.traceId||(0,eb.uuid4)(),this.spanId=e.spanId||(0,eb.uuid4)().substring(16),this.startTimestamp=e.startTimestamp||(0,e_.timestampInSeconds)(),this.tags=e.tags||{},this.data=e.data||{},this.instrumenter=e.instrumenter||"sentry",this.origin=e.origin||"manual",e.parentSpanId&&(this.parentSpanId=e.parentSpanId),"sampled"in e&&(this.sampled=e.sampled),e.op&&(this.op=e.op),e.description&&(this.description=e.description),e.name&&(this.description=e.name),e.status&&(this.status=e.status),e.endTimestamp&&(this.endTimestamp=e.endTimestamp)}/** An alias for `description` of the Span. */get name(){return this.description||""}/** Update the name of the span. */set name(e){this.setName(e)}/**
   * @inheritDoc
   */startChild(e){let t=new ew({...e,parentSpanId:this.spanId,sampled:this.sampled,traceId:this.traceId});if(t.spanRecorder=this.spanRecorder,t.spanRecorder&&t.spanRecorder.add(t),t.transaction=this.transaction,("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&t.transaction){let n=e&&e.op||"< unknown op >",r=t.transaction.name||"< unknown name >",i=t.transaction.spanId,s=`[Tracing] Starting '${n}' span on transaction '${r}' (${i}).`;t.transaction.metadata.spanMetadata[t.spanId]={logMessage:s},(0,ec.logger).log(s)}return t}/**
   * @inheritDoc
   */setTag(e,t){return this.tags={...this.tags,[e]:t},this}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
setData(e,t){return this.data={...this.data,[e]:t},this}/**
   * @inheritDoc
   */setStatus(e){return this.status=e,this}/**
   * @inheritDoc
   */setHttpStatus(e){this.setTag("http.status_code",String(e)),this.setData("http.response.status_code",e);let t=ek(e);return"unknown_error"!==t&&this.setStatus(t),this}/**
   * @inheritDoc
   */setName(e){this.description=e}/**
   * @inheritDoc
   */isSuccess(){return"ok"===this.status}/**
   * @inheritDoc
   */finish(e){if(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&// Don't call this for transactions
this.transaction&&this.transaction.spanId!==this.spanId){let{logMessage:e}=this.transaction.metadata.spanMetadata[this.spanId];e&&(0,ec.logger).log(e.replace("Starting","Finishing"))}this.endTimestamp="number"==typeof e?e:(0,e_.timestampInSeconds)()}/**
   * @inheritDoc
   */toTraceparent(){return(/**
 * Create sentry-trace header from span context values.
 */function(e=(0,eb.uuid4)(),t=(0,eb.uuid4)().substring(16),n){let r="";return void 0!==n&&(r=n?"-1":"-0"),`${e}-${t}${r}`}(this.traceId,this.spanId,this.sampled))}/**
   * @inheritDoc
   */toContext(){return(0,em.dropUndefinedKeys)({data:this.data,description:this.description,endTimestamp:this.endTimestamp,op:this.op,parentSpanId:this.parentSpanId,sampled:this.sampled,spanId:this.spanId,startTimestamp:this.startTimestamp,status:this.status,tags:this.tags,traceId:this.traceId})}/**
   * @inheritDoc
   */updateWithContext(e){return this.data=e.data||{},this.description=e.description,this.endTimestamp=e.endTimestamp,this.op=e.op,this.parentSpanId=e.parentSpanId,this.sampled=e.sampled,this.spanId=e.spanId||this.spanId,this.startTimestamp=e.startTimestamp||this.startTimestamp,this.status=e.status,this.tags=e.tags||{},this.traceId=e.traceId||this.traceId,this}/**
   * @inheritDoc
   */getTraceContext(){return(0,em.dropUndefinedKeys)({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,trace_id:this.traceId})}/**
   * @inheritDoc
   */toJSON(){return(0,em.dropUndefinedKeys)({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,start_timestamp:this.startTimestamp,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,timestamp:this.endTimestamp,trace_id:this.traceId,origin:this.origin})}}/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */function ek(e){if(e<400&&e>=100)return"ok";if(e>=400&&e<500)switch(e){case 401:return"unauthenticated";case 403:return"permission_denied";case 404:return"not_found";case 409:return"already_exists";case 413:return"failed_precondition";case 429:return"resource_exhausted";default:return"invalid_argument"}if(e>=500&&e<600)switch(e){case 501:return"unimplemented";case 503:return"unavailable";case 504:return"deadline_exceeded";default:return"internal_error"}return"unknown_error"}var em=z("csRh4"),ec=z("ljiYl"),eu=z("fSbgy"),ex=z("4YSTT");/** JSDoc */class eI extends ew{/**
   * The reference to the current hub.
   *//**
   * This constructor should never be called manually. Those instrumenting tracing should use
   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
   * @internal
   * @hideconstructor
   * @hidden
   */constructor(e,t){super(e),// We need to delete description since it's set by the Span class constructor
// but not needed for transactions.
delete this.description,this._measurements={},this._contexts={},this._hub=t||(0,eu.getCurrentHub)(),this._name=e.name||"",this.metadata={source:"custom",...e.metadata,spanMetadata:{}},this._trimEnd=e.trimEnd,// this is because transactions are also spans, and spans have a transaction pointer
this.transaction=this;// If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means
// there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)
let n=this.metadata.dynamicSamplingContext;n&&(this._frozenDynamicSamplingContext={...n})}/** Getter for `name` property */get name(){return this._name}/** Setter for `name` property, which also sets `source` as custom */set name(e){this.setName(e)}/**
   * JSDoc
   */setName(e,t="custom"){this._name=e,this.metadata.source=t}/**
   * Attaches SpanRecorder to the span itself
   * @param maxlen maximum number of spans that can be recorded
   */initSpanRecorder(e=1e3){this.spanRecorder||(this.spanRecorder=new eT(e)),this.spanRecorder.add(this)}/**
   * @inheritDoc
   */setContext(e,t){null===t?delete this._contexts[e]:this._contexts[e]=t}/**
   * @inheritDoc
   */setMeasurement(e,t,n=""){this._measurements[e]={value:t,unit:n}}/**
   * @inheritDoc
   */setMetadata(e){this.metadata={...this.metadata,...e}}/**
   * @inheritDoc
   */finish(e){let t=this._finishTransaction(e);if(t)return this._hub.captureEvent(t)}/**
   * @inheritDoc
   */toContext(){let e=super.toContext();return(0,em.dropUndefinedKeys)({...e,name:this.name,trimEnd:this._trimEnd})}/**
   * @inheritDoc
   */updateWithContext(e){return super.updateWithContext(e),this.name=e.name||"",this._trimEnd=e.trimEnd,this}/**
   * @inheritdoc
   *
   * @experimental
   */getDynamicSamplingContext(){if(this._frozenDynamicSamplingContext)return this._frozenDynamicSamplingContext;let e=this._hub||(0,eu.getCurrentHub)(),t=e.getClient();if(!t)return{};let n=e.getScope(),r=(0,ex.getDynamicSamplingContextFromClient)(this.traceId,t,n),i=this.metadata.sampleRate;void 0!==i&&(r.sample_rate=`${i}`);// We don't want to have a transaction name in the DSC if the source is "url" because URLs might contain PII
let s=this.metadata.source;// Uncomment if we want to make DSC immutable
// this._frozenDynamicSamplingContext = dsc;
return s&&"url"!==s&&(r.transaction=this.name),void 0!==this.sampled&&(r.sampled=String(this.sampled)),r}/**
   * Override the current hub with a new one.
   * Used if you want another hub to finish the transaction.
   *
   * @internal
   */setHub(e){this._hub=e}/**
   * Finish the transaction & prepare the event to send to Sentry.
   */_finishTransaction(e){// This transaction is already finished, so we should not flush it again.
if(void 0!==this.endTimestamp)return;this.name||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn("Transaction has no name, falling back to `<unlabeled transaction>`."),this.name="<unlabeled transaction>"),// just sets the end timestamp
super.finish(e);let t=this._hub.getClient();if(t&&t.emit&&t.emit("finishTransaction",this),!0!==this.sampled){// At this point if `sampled !== true` we want to discard the transaction.
("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Tracing] Discarding transaction because its trace was not chosen to be sampled."),t&&t.recordDroppedEvent("sample_rate","transaction");return}let n=this.spanRecorder?this.spanRecorder.spans.filter(e=>e!==this&&e.endTimestamp):[];this._trimEnd&&n.length>0&&(this.endTimestamp=n.reduce((e,t)=>e.endTimestamp&&t.endTimestamp?e.endTimestamp>t.endTimestamp?e:t:e).endTimestamp);let r=this.metadata,i={contexts:{...this._contexts,// We don't want to override trace context
trace:this.getTraceContext()},spans:n,start_timestamp:this.startTimestamp,tags:this.tags,timestamp:this.endTimestamp,transaction:this.name,type:"transaction",sdkProcessingMetadata:{...r,dynamicSamplingContext:this.getDynamicSamplingContext()},...r.source&&{transaction_info:{source:r.source}}},s=Object.keys(this._measurements).length>0;return s&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Measurements] Adding measurements to transaction",JSON.stringify(this._measurements,void 0,2)),i.measurements=this._measurements),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`),i}}var eg=z("1A3EQ"),ec=z("ljiYl"),eu=z("fSbgy");// Treeshakable guard to remove all code related to tracing
/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */function eC(e){if("boolean"==typeof __SENTRY_TRACING__&&!__SENTRY_TRACING__)return!1;let t=(0,eu.getCurrentHub)().getClient(),n=e||t&&t.getOptions();return!!n&&(n.enableTracing||"tracesSampleRate"in n||"tracesSampler"in n)}/** Returns all trace headers that are currently on the top scope. */function eR(){let e=this.getScope(),t=e.getSpan();return t?{"sentry-trace":t.toTraceparent()}:{}}/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */function eN(e,t){var n,r,i;let s;let a=this.getClient(),o=a&&a.getOptions()||{},l=o.instrumenter||"sentry",c=e.instrumenter||"sentry";l!==c&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).error(`A transaction was started with instrumenter=\`${c}\`, but the SDK is configured with the \`${l}\` instrumenter.
The transaction will not be sampled. Please use the ${l} instrumentation to start transactions.`),e.sampled=!1);let u=new eI(e,this);return n=u,r={parentSampled:e.parentSampled,transactionContext:e,...t},(eC(o)?void 0!==n.sampled?n.setMetadata({sampleRate:Number(n.sampled)}):("function"==typeof o.tracesSampler?(s=o.tracesSampler(r),n.setMetadata({sampleRate:Number(s)})):void 0!==r.parentSampled?s=r.parentSampled:void 0!==o.tracesSampleRate?(s=o.tracesSampleRate,n.setMetadata({sampleRate:Number(s)})):(// When `enableTracing === true`, we use a sample rate of 100%
s=1,n.setMetadata({sampleRate:s})),i=s,// we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(0,eg.isNaN)(i)||!("number"==typeof i||"boolean"==typeof i)?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(i)} of type ${JSON.stringify(typeof i)}.`),1):(i<0||i>1)&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${i}.`),1))?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn("[Tracing] Discarding transaction because of invalid sample rate."),n.sampled=!1):s?(// Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
// a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
n.sampled=Math.random()<s,n.sampled)?("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Tracing] starting ${n.op} transaction - ${n.name}`):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(s)})`):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Tracing] Discarding transaction because ${"function"==typeof o.tracesSampler?"tracesSampler returned 0 or false":"a negative sampling decision was inherited or tracesSampleRate is set to 0"}`),n.sampled=!1):n.sampled=!1,u=n).sampled&&u.initSpanRecorder(o._experiments&&o._experiments.maxSpans),a&&a.emit&&a.emit("startTransaction",u),u}/**
 * Adds tracing extensions to the global hub.
 */function eA(){let e=(0,eu.getMainCarrier)();e.__SENTRY__&&(e.__SENTRY__.extensions=e.__SENTRY__.extensions||{},e.__SENTRY__.extensions.startTransaction||(e.__SENTRY__.extensions.startTransaction=eN),e.__SENTRY__.extensions.traceHeaders||(e.__SENTRY__.extensions.traceHeaders=eR),eh||(eh=!0,(0,ed.addInstrumentationHandler)("error",ef),(0,ed.addInstrumentationHandler)("unhandledrejection",ef)))}var em=z("csRh4"),eg=z("1A3EQ"),ec=z("ljiYl"),eu=z("fSbgy");/**
 * Wraps a function with a transaction/span and finishes the span after the function is done.
 *
 * Note that if you have not enabled tracing extensions via `addTracingExtensions`
 * or you didn't set `tracesSampleRate`, this function will not generate spans
 * and the `span` returned from the callback will be undefined.
 *
 * This function is meant to be used internally and may break at any time. Use at your own risk.
 *
 * @internal
 * @private
 */function eD(e,t,n=()=>{}){let r;let i=eP(e),s=(0,eu.getCurrentHub)(),a=s.getScope(),o=a.getSpan(),l=eG(s,o,i);function c(){l&&l.finish(),s.getScope().setSpan(o)}a.setSpan(l);try{r=t(l)}catch(e){throw l&&l.setStatus("internal_error"),n(e),c(),e}return(0,eg.isThenable)(r)?Promise.resolve(r).then(()=>{c()},e=>{l&&l.setStatus("internal_error"),n(e),c()}):c(),r}/**
 * Wraps a function with a transaction/span and finishes the span after the function is done.
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.
 *
 * If you want to create a span that is not set as active, use {@link startInactiveSpan}.
 *
 * Note that if you have not enabled tracing extensions via `addTracingExtensions`
 * or you didn't set `tracesSampleRate`, this function will not generate spans
 * and the `span` returned from the callback will be undefined.
 */function eO(e,t){let n;let r=eP(e),i=(0,eu.getCurrentHub)(),s=i.getScope(),a=s.getSpan(),o=eG(i,a,r);function l(){o&&o.finish(),i.getScope().setSpan(a)}s.setSpan(o);try{n=t(o)}catch(e){throw o&&o.setStatus("internal_error"),l(),e}return(0,eg.isThenable)(n)?Promise.resolve(n).then(()=>{l()},()=>{o&&o.setStatus("internal_error"),l()}):l(),n}/**
 * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span
 * after the function is done automatically.
 *
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.
 *
 * Note that if you have not enabled tracing extensions via `addTracingExtensions`
 * or you didn't set `tracesSampleRate`, this function will not generate spans
 * and the `span` returned from the callback will be undefined.
 */function eB(e,t){let n;let r=eP(e),i=(0,eu.getCurrentHub)(),s=i.getScope(),a=s.getSpan(),o=eG(i,a,r);s.setSpan(o);try{n=t(o,function(){o&&o.finish(),i.getScope().setSpan(a)})}catch(e){throw o&&o.setStatus("internal_error"),e}return(0,eg.isThenable)(n)&&Promise.resolve(n).then(void 0,()=>{o&&o.setStatus("internal_error")}),n}/**
 * Creates a span. This span is not set as active, so will not get automatic instrumentation spans
 * as children or be able to be accessed via `Sentry.getSpan()`.
 *
 * If you want to create a span that is set as active, use {@link startSpan}.
 *
 * Note that if you have not enabled tracing extensions via `addTracingExtensions`
 * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans
 * and the `span` returned from the callback will be undefined.
 */function eU(e){if(!eC())return;let t={...e};// If a name is set and a description is not, set the description to the name.
void 0!==t.name&&void 0===t.description&&(t.description=t.name);let n=(0,eu.getCurrentHub)(),r=eM();return r?r.startChild(t):n.startTransaction(t)}/**
 * Returns the currently active span.
 */function eM(){return(0,eu.getCurrentHub)().getScope().getSpan()}/**
 * Continue a trace from `sentry-trace` and `baggage` values.
 * These values can be obtained from incoming request headers,
 * or in the browser from `<meta name="sentry-trace">` and `<meta name="baggage">` HTML tags.
 *
 * It also takes an optional `request` option, which if provided will also be added to the scope & transaction metadata.
 * The callback receives a transactionContext that may be used for `startTransaction` or `startSpan`.
 */function eL({sentryTrace:e,baggage:t},n){let r=(0,eu.getCurrentHub)(),i=r.getScope(),{traceparentData:s,dynamicSamplingContext:a,propagationContext:o}=/**
 * Create tracing context from incoming headers.
 */function(e,t){let n=eE(e),r=/**
 * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the "sentry-" prefixed values
 * from it.
 *
 * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.
 * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.
 */function(e){if(!(0,eg.isString)(e)&&!Array.isArray(e))return;// Intermediary object to store baggage key value pairs of incoming baggage headers on.
// It is later used to read Sentry-DSC-values from.
let t={};if(Array.isArray(e))t=e.reduce((e,t)=>{let n=eS(t);return{...e,...n}},{});else{// Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but
// this is how we choose to handle it)
if(!e)return;t=eS(e)}// Read all "sentry-" prefixed values out of the baggage object and put it onto a dynamic sampling context object.
let n=Object.entries(t).reduce((e,[t,n])=>{if(t.match(ey)){let r=t.slice(7);e[r]=n}return e},{});return(// Only return a dynamic sampling context object if there are keys in it.
// A keyless object means there were no sentry values on the header, which means that there is no DSC.
Object.keys(n).length>0?n:void 0)}(t),{traceId:i,parentSpanId:s,parentSampled:a}=n||{},o={traceId:i||(0,eb.uuid4)(),spanId:(0,eb.uuid4)().substring(16),sampled:a};return s&&(o.parentSpanId=s),r&&(o.dsc=r),{traceparentData:n,dynamicSamplingContext:r,propagationContext:o}}(e,t);i.setPropagationContext(o),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&s&&(0,ec.logger).log(`[Tracing] Continuing trace ${s.traceId}.`);let l={...s,metadata:(0,em.dropUndefinedKeys)({dynamicSamplingContext:s&&!a?{}:a})};return n(l)}function eG(e,t,n){if(eC())return t?t.startChild(n):e.startTransaction(n)}function eP(e){let t={...e};return void 0!==t.name&&void 0===t.description&&(t.description=t.name),t}z("aSaUS"),z("5pAFD");var eu=z("fSbgy");z("aKxAe");var eY=z("9V7wl"),eF=z("3gbAm"),ej=z("37cNF"),ez=z("2h8TT");/**
 * Gets an event from an envelope.
 *
 * This is only exported for use in the tests
 */function eW(e,t){let n;return(0,ej.forEachEnvelopeItem)(e,(e,r)=>(t.includes(r)&&(n=Array.isArray(e)?e[1]:void 0),!!n)),n}/**
 * Creates a transport that can send events to different DSNs depending on the envelope contents.
 */function e$(e,t){return n=>{let r=e(n),i={};function s(t,r){// We create a transport for every unique dsn/release combination as there may be code from multiple releases in
// use at the same time
let s=r?`${t}:${r}`:t;if(!i[s]){let a=(0,eF.dsnFromString)(t);if(!a)return;let o=(0,ez.getEnvelopeEndpointWithUrlEncodedAuth)(a);i[s]=r?(t=>{let n=e(t);return{send:async e=>{let t=eW(e,["event","transaction","profile","replay_event"]);return t&&(t.release=r),n.send(e)},flush:e=>n.flush(e)}})({...n,url:o}):e({...n,url:o})}return i[s]}return{send:async function(e){let n=t({envelope:e,getEvent:function(t){let n=t&&t.length?t:["event"];return eW(e,n)}}).map(e=>"string"==typeof e?s(e,void 0):s(e.dsn,e.release)).filter(e=>!!e);// If we have no transports to send to, use the fallback transport
0===n.length&&n.push(r);let i=await Promise.all(n.map(t=>t.send(e)));return i[0]},flush:async function(e){let t=[...Object.keys(i).map(e=>i[e]),r],n=await Promise.all(t.map(t=>t.flush(e)));return n.every(e=>e)}}}}var ej=z("37cNF"),eH=z("3dCyu");/** Keys are source filename/url, values are metadata objects. */// eslint-disable-next-line @typescript-eslint/no-explicit-any
const eV=new Map,eZ=new Set;/**
 * Adds module metadata to stack frames.
 *
 * Metadata can be injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.
 *
 * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events
 * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams
 * our sources
 */class eq{/*
   * @inheritDoc
   */static __initStatic(){this.id="ModuleMetadata"}/**
   * @inheritDoc
   */constructor(){this.name=eq.id}/**
   * @inheritDoc
   */setupOnce(e,t){let n=t().getClient();if(!n||"function"!=typeof n.on)return;// We need to strip metadata from stack frames before sending them to Sentry since these are client side only.
n.on("beforeEnvelope",e=>{(0,ej.forEachEnvelopeItem)(e,(e,t)=>{if("event"===t){let t=Array.isArray(e)?e[1]:void 0;t&&(!/**
 * Strips metadata from stack frames.
 */function(e){try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.exception.values.forEach(e=>{if(e.stacktrace)for(let t of e.stacktrace.frames||[])delete t.module_metadata})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
}}(t),e[1]=t)}})});let r=n.getOptions().stackParser;e(e=>(!/**
 * Adds metadata to stack frames.
 *
 * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.
 */function(e,t){try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    t.exception.values.forEach(t=>{if(t.stacktrace)for(let r of t.stacktrace.frames||[]){var n;if(!r.filename)continue;let t=(n=r.filename,function(e){if(eH.GLOBAL_OBJ._sentryModuleMetadata)for(let t of Object.keys(eH.GLOBAL_OBJ._sentryModuleMetadata)){let n=eH.GLOBAL_OBJ._sentryModuleMetadata[t];if(eZ.has(t))continue;// Ensure this stack doesn't get parsed again
    eZ.add(t);let r=e(t);// Go through the frames starting from the top of the stack and find the first one with a filename
    for(let e of r.reverse())if(e.filename){// Save the metadata for this filename
    eV.set(e.filename,n);break}}}(e),eV.get(n));t&&(r.module_metadata=t)}})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }}(r,e),e))}}eq.__initStatic(),z("b5H6o");var eJ=z("kLkMW");/**
 * Adds a measurement to the current active transaction.
 */function eK(e,t,n){let r=ep();r&&r.setMeasurement(e,t,n)}var eX=z("lJotG");z("1oEwI"),z("iJSIC"),z("jE7mF"),z("78zHj"),z("iltSe"),z("hXEPI");var eQ=z("7qvsU"),e0={};w(e0,"GlobalHandlers",()=>z("jrBuy").GlobalHandlers),w(e0,"TryCatch",()=>z("fa62i").TryCatch),w(e0,"Breadcrumbs",()=>z("5DHQv").Breadcrumbs),w(e0,"LinkedErrors",()=>z("9zhFP").LinkedErrors),w(e0,"HttpContext",()=>z("49tkP").HttpContext),w(e0,"Dedupe",()=>z("Yr1pj").Dedupe),z("jrBuy"),z("fa62i"),z("5DHQv"),z("9zhFP"),z("49tkP"),z("Yr1pj");var e1=z("5OM0g");// eslint-disable-next-line @typescript-eslint/unbound-method
const e2=Object.prototype.toString;/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */function e5(e,t){return e2.call(e)===`[object ${t}]`}/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function e3(e){return e5(e,"String")}/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function e6(e){return e5(e,"Object")}/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */function e4(e){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return!!(e&&e.then&&"function"==typeof e.then)}/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */function e9(e,t){try{return e instanceof t}catch(e){return!1}}var e1=z("5OM0g");const e8=["debug","info","warn","error","log","assert","trace"],e7={};/** JSDoc *//**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */function te(e){if(!("console"in e1.GLOBAL_OBJ))return e();let t=e1.GLOBAL_OBJ.console,n={},r=Object.keys(e7);// Restore all wrapped console methods
r.forEach(e=>{let r=e7[e];n[e]=t[e],t[e]=r});try{return e()}finally{// Revert restoration to wrapped state
r.forEach(e=>{t[e]=n[e]})}}const tt=function(){let e=!1,t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return"undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__?e8.forEach(n=>{// eslint-disable-next-line @typescript-eslint/no-explicit-any
t[n]=(...t)=>{e&&te(()=>{(0,e1.GLOBAL_OBJ).console[n](`Sentry Logger [${n}]:`,...t)})}}):e8.forEach(e=>{t[e]=()=>void 0}),t}();(k=U||(U={}))[k.PENDING=0]="PENDING",k[k.RESOLVED=1]="RESOLVED",k[k.REJECTED=2]="REJECTED";/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */class tn{constructor(e){tn.prototype.__init.call(this),tn.prototype.__init2.call(this),tn.prototype.__init3.call(this),tn.prototype.__init4.call(this),this._state=U.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}/** JSDoc */then(e,t){return new tn((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else // TODO: FIXME
n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()})}/** JSDoc */catch(e){return this.then(e=>e,e)}/** JSDoc */finally(e){return new tn((t,n)=>{let r,i;return this.then(t=>{i=!1,r=t,e&&e()},t=>{i=!0,r=t,e&&e()}).then(()=>{if(i){n(r);return}t(r)})})}/** JSDoc */__init(){this._resolve=e=>{this._setResult(U.RESOLVED,e)}}/** JSDoc */__init2(){this._reject=e=>{this._setResult(U.REJECTED,e)}}/** JSDoc */__init3(){this._setResult=(e,t)=>{if(this._state===U.PENDING){if(e4(t)){t.then(this._resolve,this._reject);return}this._state=e,this._value=t,this._executeHandlers()}}}/** JSDoc */__init4(){this._executeHandlers=()=>{if(this._state===U.PENDING)return;let e=this._handlers.slice();this._handlers=[],e.forEach(e=>{e[0]||(this._state===U.RESOLVED&&e[1](this._value),this._state===U.REJECTED&&e[2](this._value),e[0]=!0)})}}}/**
 * Returns the global event processors.
 */function tr(){return(0,e1.getGlobalSingleton)("globalEventProcessors",()=>[])}/**
 * Process an array of event processors, returning the processed event (or `null` if the event was dropped).
 */function ti(e,t,n,r=0){return new tn((i,s)=>{let a=e[r];if(null===t||"function"!=typeof a)i(t);else{let o=a({...t},n);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.id&&null===o&&tt.log(`Event processor "${a.id}" dropped event`),e4(o)?o.then(t=>ti(e,t,n,r+1).then(i)).then(null,s):ti(e,o,n,r+1).then(i).then(null,s)}})}var e1=z("5OM0g");/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */function ts(e,t={}){// try/catch both:
// - accessing event.target (see getsentry/raven-js#838, #768)
// - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
// - can throw an exception in some circumstances.
try{let n,r=e,i=[],s=0,a=0,o=Array.isArray(t)?t:t.keyAttrs,l=!Array.isArray(t)&&t.maxStringLength||80;for(;// bail out if
// - nextStr is the 'html' element
// - the length of the string that would be created exceeds maxStringLength
//   (ignore this limit if we are on the first iteration)
r&&s++<5&&(n=/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */function(e,t){let n,r,i,s,a;let o=[];if(!e||!e.tagName)return"";o.push(e.tagName.toLowerCase());// Pairs of attribute keys defined in `serializeAttribute` and their values on element.
let l=t&&t.length?t.filter(t=>e.getAttribute(t)).map(t=>[t,e.getAttribute(t)]):null;if(l&&l.length)l.forEach(e=>{o.push(`[${e[0]}="${e[1]}"]`)});else if(e.id&&o.push(`#${e.id}`),// eslint-disable-next-line prefer-const
(n=e.className)&&e3(n))for(a=0,r=n.split(/\s+/);a<r.length;a++)o.push(`.${r[a]}`);let c=["aria-label","type","name","title","alt"];for(a=0;a<c.length;a++)i=c[a],(s=e.getAttribute(i))&&o.push(`[${i}="${s}"]`);return o.join("")}(r,o),"html"!==n&&(!(s>1)||!(a+3*i.length+n.length>=l)));)i.push(n),a+=n.length,r=r.parentNode;return i.reverse().join(" > ")}catch(e){return"<unknown>"}}/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */function ta(e,t=0){return"string"!=typeof e||0===t?e:e.length<=t?e:`${e.slice(0,t)}...`}/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */function to(e,t,n){if(!(t in e))return;let r=e[t],i=n(r);"function"==typeof i&&/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */function(e,t){try{let n=t.prototype||{};e.prototype=t.prototype=n,tl(e,"__sentry_original__",t)}catch(e){}// eslint-disable-line no-empty
}(i,r),e[t]=i}/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */function tl(e,t,n){try{Object.defineProperty(e,t,{// enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
value:n,writable:!0,configurable:!0})}catch(n){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.log(`Failed to add non-enumerable property "${t}" to object`,e)}}/** Creates a string representation of the target of an `Event` object */function tc(e){try{return"undefined"!=typeof Element&&e9(e,Element)?ts(e):Object.prototype.toString.call(e)}catch(e){return"<unknown>"}}/** Filters out all but an object's own properties */function tu(e){if("object"!=typeof e||null===e)return{};{let t={};for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}}/**
 * Given any object, return a new object having removed all fields whose value was `undefined`.
 * Works recursively on objects and arrays.
 *
 * Attention: This function keeps circular references in the returned object.
 */function td(e){// This map keeps track of what already visited nodes map to.
// Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular
// references as the input object.
let t=new Map;// This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API
return function e(t,n){if(e6(t)){// If this node has already been visited due to a circular reference, return the object it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i={};for(let r of(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),Object.keys(t)))void 0!==t[r]&&(i[r]=e(t[r],n));return i}if(Array.isArray(t)){// If this node has already been visited due to a circular reference, return the array it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i=[];return(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),t.forEach(t=>{i.push(e(t,n))}),i)}return t}(e,t)}(0,e1.getGlobalObject)();var e1=z("5OM0g");/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */function tp(){let e=e1.GLOBAL_OBJ,t=e.crypto||e.msCrypto,n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,"");t&&t.getRandomValues&&(n=()=>t.getRandomValues(new Uint8Array(1))[0])}catch(e){// some runtimes can crash invoking crypto
// https://github.com/getsentry/sentry-javascript/issues/8935
}// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
// Concatenating the following numbers as strings results in '10000000100040008000100000000000'
return"10000000100040008000100000000000".replace(/[018]/g,e=>(e^(15&n())>>e/4).toString(16))}var th=z("3hXCz"),e1=z("5OM0g");const tf="production";var th=(z("3hXCz"),z("3hXCz"));/**
 * Updates a session object with the properties passed in the context.
 *
 * Note that this function mutates the passed object and returns void.
 * (Had to do this instead of returning a new and updated session because closing and sending a session
 * makes an update to the session after it was passed to the sending logic.
 * @see BaseClient.captureSession )
 *
 * @param session the `Session` to update
 * @param context the `SessionContext` holding the properties that should be updated in @param session
 */// eslint-disable-next-line complexity
function t_(e,t={}){if(!t.user||(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||(0,th.timestampInSeconds)(),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:tp()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),"number"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if("number"==typeof t.duration)e.duration=t.duration;else{let t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),"number"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */class tm{/** Flag if notifying is happening. *//** Callback for client to receive scope changes. *//** Callback list that will be called after {@link applyToEvent}. *//** Array of breadcrumbs. *//** User *//** Tags *//** Extra *//** Contexts *//** Attachments *//** Propagation Context for distributed tracing *//**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   *//** Fingerprint *//** Severity */// eslint-disable-next-line deprecation/deprecation
/** Transaction Name *//** Span *//** Session *//** Request Mode Session Status */// NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext=tg()}/**
   * Inherit values from the parent scope.
   * @param scope to clone.
   */static clone(e){let t=new tm;return e&&(t._breadcrumbs=[...e._breadcrumbs],t._tags={...e._tags},t._extra={...e._extra},t._contexts={...e._contexts},t._user=e._user,t._level=e._level,t._span=e._span,t._session=e._session,t._transactionName=e._transactionName,t._fingerprint=e._fingerprint,t._eventProcessors=[...e._eventProcessors],t._requestSession=e._requestSession,t._attachments=[...e._attachments],t._sdkProcessingMetadata={...e._sdkProcessingMetadata},t._propagationContext={...e._propagationContext}),t}/**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */addScopeListener(e){this._scopeListeners.push(e)}/**
   * @inheritDoc
   */addEventProcessor(e){return this._eventProcessors.push(e),this}/**
   * @inheritDoc
   */setUser(e){return this._user=e||{},this._session&&t_(this._session,{user:e}),this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getUser(){return this._user}/**
   * @inheritDoc
   */getRequestSession(){return this._requestSession}/**
   * @inheritDoc
   */setRequestSession(e){return this._requestSession=e,this}/**
   * @inheritDoc
   */setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setLevel(e){return this._level=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setSpan(e){return this._span=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSpan(){return this._span}/**
   * @inheritDoc
   */getTransaction(){// Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
// have a pointer to the currently-active transaction.
let e=this.getSpan();return e&&e.transaction}/**
   * @inheritDoc
   */setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSession(){return this._session}/**
   * @inheritDoc
   */update(e){if(!e)return this;if("function"==typeof e){let t=e(this);return t instanceof tm?t:this}return e instanceof tm?(this._tags={...this._tags,...e._tags},this._extra={...this._extra,...e._extra},this._contexts={...this._contexts,...e._contexts},e._user&&Object.keys(e._user).length&&(this._user=e._user),e._level&&(this._level=e._level),e._fingerprint&&(this._fingerprint=e._fingerprint),e._requestSession&&(this._requestSession=e._requestSession),e._propagationContext&&(this._propagationContext=e._propagationContext)):e6(e)&&(this._tags={...this._tags,...e.tags},this._extra={...this._extra,...e.extra},this._contexts={...this._contexts,...e.contexts},e.user&&(this._user=e.user),e.level&&(this._level=e.level),e.fingerprint&&(this._fingerprint=e.fingerprint),e.requestSession&&(this._requestSession=e.requestSession),e.propagationContext&&(this._propagationContext=e.propagationContext)),this}/**
   * @inheritDoc
   */clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this._attachments=[],this._propagationContext=tg(),this}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let n="number"==typeof t?t:100;// No data has been changed, so don't notify scope listeners
if(n<=0)return this;let r={timestamp:(0,th.dateTimestampInSeconds)(),...e},i=this._breadcrumbs;return i.push(r),this._breadcrumbs=i.length>n?i.slice(-n):i,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}/**
   * @inheritDoc
   */clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */addAttachment(e){return this._attachments.push(e),this}/**
   * @inheritDoc
   */getAttachments(){return this._attachments}/**
   * @inheritDoc
   */clearAttachments(){return this._attachments=[],this}/**
   * Applies data from the scope to the event and runs all event processors on it.
   *
   * @param event Event
   * @param hint Object containing additional information about the original exception, for use by the event processors.
   * @hidden
   */applyToEvent(e,t={},n){// We want to set the trace context for normal events only if there isn't already
// a trace context on the event. There is a product feature in place where we link
// errors with transaction and it relies on that.
if(this._extra&&Object.keys(this._extra).length&&(e.extra={...this._extra,...e.extra}),this._tags&&Object.keys(this._tags).length&&(e.tags={...this._tags,...e.tags}),this._user&&Object.keys(this._user).length&&(e.user={...this._user,...e.user}),this._contexts&&Object.keys(this._contexts).length&&(e.contexts={...this._contexts,...e.contexts}),this._level&&(e.level=this._level),this._transactionName&&(e.transaction=this._transactionName),this._span){e.contexts={trace:this._span.getTraceContext(),...e.contexts};let t=this._span.transaction;if(t){e.sdkProcessingMetadata={dynamicSamplingContext:t.getDynamicSamplingContext(),...e.sdkProcessingMetadata};let n=t.name;n&&(e.tags={transaction:n,...e.tags})}}this._applyFingerprint(e);let r=this._getBreadcrumbs(),i=[...e.breadcrumbs||[],...r];// TODO (v8): Update this order to be: Global > Client > Scope
return e.breadcrumbs=i.length>0?i:void 0,e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...this._sdkProcessingMetadata,propagationContext:this._propagationContext},ti([...n||[],...tr(),...this._eventProcessors],e,t)}/**
   * Add data which will be accessible during event processing but won't get sent to Sentry
   */setSDKProcessingMetadata(e){return this._sdkProcessingMetadata={...this._sdkProcessingMetadata,...e},this}/**
   * @inheritDoc
   */setPropagationContext(e){return this._propagationContext=e,this}/**
   * @inheritDoc
   */getPropagationContext(){return this._propagationContext}/**
   * Get the breadcrumbs for this scope.
   */_getBreadcrumbs(){return this._breadcrumbs}/**
   * This will be called on every set call.
   */_notifyScopeListeners(){// We need this check for this._notifyingListeners to be able to work on scope during updates
// If this check is not here we'll produce endless recursion when something is done with the scope
// during the callback.
this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach(e=>{e(this)}),this._notifyingListeners=!1)}/**
   * Applies fingerprint from the scope to the event if there's one,
   * uses message if there's one instead or get rid of empty fingerprint
   */_applyFingerprint(e){var t;// Make sure it's an array first and we actually have something in place
e.fingerprint=e.fingerprint?Array.isArray(t=e.fingerprint)?t:[t]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}}function tg(){return{traceId:tp(),spanId:tp().substring(16)}}/**
 * @inheritDoc
 */class ty{/** Is a {@link Layer}[] containing the client and scope *//** Contains the last event id of a captured event.  *//**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   */constructor(e,t=new tm,n=4){this._version=n,this._stack=[{scope:t}],e&&this.bindClient(e)}/**
   * @inheritDoc
   */isOlderThan(e){return this._version<e}/**
   * @inheritDoc
   */bindClient(e){let t=this.getStackTop();t.client=e,e&&e.setupIntegrations&&e.setupIntegrations()}/**
   * @inheritDoc
   */pushScope(){// We want to clone the content of prev scope
let e=tm.clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:e}),e}/**
   * @inheritDoc
   */popScope(){return!(this.getStack().length<=1)&&!!this.getStack().pop()}/**
   * @inheritDoc
   */withScope(e){let t=this.pushScope();try{e(t)}finally{this.popScope()}}/**
   * @inheritDoc
   */getClient(){return this.getStackTop().client}/** Returns the scope of the top stack. */getScope(){return this.getStackTop().scope}/** Returns the scope stack for domains or the process. */getStack(){return this._stack}/** Returns the topmost scope layer in the order domain > local > process. */getStackTop(){return this._stack[this._stack.length-1]}/**
   * @inheritDoc
   */captureException(e,t){let n=this._lastEventId=t&&t.event_id?t.event_id:tp(),r=Error("Sentry syntheticException");return this._withClient((i,s)=>{i.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},s)}),n}/**
   * @inheritDoc
   */captureMessage(e,t,n){let r=this._lastEventId=n&&n.event_id?n.event_id:tp(),i=Error(e);return this._withClient((s,a)=>{s.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},a)}),r}/**
   * @inheritDoc
   */captureEvent(e,t){let n=t&&t.event_id?t.event_id:tp();return e.type||(this._lastEventId=n),this._withClient((r,i)=>{r.captureEvent(e,{...t,event_id:n},i)}),n}/**
   * @inheritDoc
   */lastEventId(){return this._lastEventId}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let{scope:n,client:r}=this.getStackTop();if(!r)return;let{beforeBreadcrumb:i=null,maxBreadcrumbs:s=100}=r.getOptions&&r.getOptions()||{};if(s<=0)return;let a=(0,th.dateTimestampInSeconds)(),o={timestamp:a,...e},l=i?te(()=>i(o,t)):o;null!==l&&(r.emit&&r.emit("beforeAddBreadcrumb",l,t),n.addBreadcrumb(l,s))}/**
   * @inheritDoc
   */setUser(e){this.getScope().setUser(e)}/**
   * @inheritDoc
   */setTags(e){this.getScope().setTags(e)}/**
   * @inheritDoc
   */setExtras(e){this.getScope().setExtras(e)}/**
   * @inheritDoc
   */setTag(e,t){this.getScope().setTag(e,t)}/**
   * @inheritDoc
   */setExtra(e,t){this.getScope().setExtra(e,t)}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any
setContext(e,t){this.getScope().setContext(e,t)}/**
   * @inheritDoc
   */configureScope(e){let{scope:t,client:n}=this.getStackTop();n&&e(t)}/**
   * @inheritDoc
   */run(e){let t=tb(this);try{e(this)}finally{tb(t)}}/**
   * @inheritDoc
   */getIntegration(e){let t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn(`Cannot retrieve integration ${e.id} from the current Hub`),null}}/**
   * @inheritDoc
   */startTransaction(e,t){let n=this._callExtensionMethod("startTransaction",e,t);if(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&!n){let e=this.getClient();e?console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`):console.warn("Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'")}return n}/**
   * @inheritDoc
   */traceHeaders(){return this._callExtensionMethod("traceHeaders")}/**
   * @inheritDoc
   */captureSession(e=!1){// both send the update and pull the session from the scope
if(e)return this.endSession();// only send the update
this._sendSessionUpdate()}/**
   * @inheritDoc
   */endSession(){let e=this.getStackTop(),t=e.scope,n=t.getSession();if(n){var r;let e;e={},r?e={status:r}:"ok"===n.status&&(e={status:"exited"}),t_(n,e)}this._sendSessionUpdate(),// the session is over; take it off of the scope
t.setSession()}/**
   * @inheritDoc
   */startSession(e){let{scope:t,client:n}=this.getStackTop(),{release:r,environment:i=tf}=n&&n.getOptions()||{},{userAgent:s}=e1.GLOBAL_OBJ.navigator||{},a=/**
 * Creates a new `Session` object by setting certain default parameters. If optional @param context
 * is passed, the passed properties are applied to the session object.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns a new `Session` object
 */function(e){// Both timestamp and started are in seconds since the UNIX epoch.
let t=(0,th.timestampInSeconds)(),n={sid:tp(),init:!0,timestamp:t,started:t,duration:0,status:"ok",errors:0,ignoreDuration:!1,toJSON:()=>td({sid:`${n.sid}`,init:n.init,// Make sure that sec is converted to ms for date constructor
    started:new Date(1e3*n.started).toISOString(),timestamp:new Date(1e3*n.timestamp).toISOString(),status:n.status,errors:n.errors,did:"number"==typeof n.did||"string"==typeof n.did?`${n.did}`:void 0,duration:n.duration,attrs:{release:n.release,environment:n.environment,ip_address:n.ipAddress,user_agent:n.userAgent}})};return e&&t_(n,e),n}({release:r,environment:i,user:t.getUser(),...s&&{userAgent:s},...e}),o=t.getSession&&t.getSession();return o&&"ok"===o.status&&t_(o,{status:"exited"}),this.endSession(),// Afterwards we set the new session on the scope
t.setSession(a),a}/**
   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
   * when Tracing is used.
   */shouldSendDefaultPii(){let e=this.getClient(),t=e&&e.getOptions();return!!(t&&t.sendDefaultPii)}/**
   * Sends the current Session on the scope
   */_sendSessionUpdate(){let{scope:e,client:t}=this.getStackTop(),n=e.getSession();n&&t&&t.captureSession&&t.captureSession(n)}/**
   * Internal helper function to call a method on the top client if it exists.
   *
   * @param method The method to call on the client.
   * @param args Arguments to pass to the client function.
   */_withClient(e){let{scope:t,client:n}=this.getStackTop();n&&e(n,t)}/**
   * Calls global extension method and binding current instance to the function call
   */// @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
// eslint-disable-next-line @typescript-eslint/no-explicit-any
_callExtensionMethod(e,...t){let n=tS(),r=n.__SENTRY__;if(r&&r.extensions&&"function"==typeof r.extensions[e])return r.extensions[e].apply(this,t);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn(`Extension method ${e} couldn't be found, doing nothing.`)}}/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/function tS(){return e1.GLOBAL_OBJ.__SENTRY__=e1.GLOBAL_OBJ.__SENTRY__||{extensions:{},hub:void 0},e1.GLOBAL_OBJ}/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */function tb(e){let t=tS(),n=tE(t);return tT(t,e),n}/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */function tv(){// Get main carrier (global for every environment)
let e=tS();if(e.__SENTRY__&&e.__SENTRY__.acs){let t=e.__SENTRY__.acs.getCurrentHub();if(t)return t}// Return hub that lives on a global object
return function(e=tS()){// Return hub that lives on a global object
return(!(e&&e.__SENTRY__&&e.__SENTRY__.hub)||tE(e).isOlderThan(4))&&tT(e,new ty),tE(e)}(e)}/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */function tE(e){return(0,e1.getGlobalSingleton)("hub",()=>new ty,e)}/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */function tT(e,t){if(!e)return!1;let n=e.__SENTRY__=e.__SENTRY__||{};return n.hub=t,!0}// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,
// where HUB_FUNCTION is some method on the Hub class.
//
// This is done to make sure the top level SDK methods stay in sync with the hub methods.
// Although every method here has an explicit return type, some of them (that map to void returns) do not
// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @param captureContext Additional scope data to apply to exception event.
 * @returns The generated eventId.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function tw(e,t){return tv().captureException(e,{captureContext:t})}function tk(e){return"/"===e[e.length-1]?e.slice(0,-1):e}var th=z("3hXCz"),e1=z("5OM0g");const tx="<anonymous>";/**
 * Safely extract function name from itself
 */function tI(e){try{if(!e||"function"!=typeof e)return tx;return e.name||tx}catch(e){// Just accessing custom props in some Selenium environments
// can cause a "Permission denied" exception (see raven-js#495).
return tx}}/**
 * Recursively normalizes the given object.
 *
 * - Creates a copy to prevent original input mutation
 * - Skips non-enumerable properties
 * - When stringifying, calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format
 * - Translates known global objects/classes to a string representations
 * - Takes care of `Error` object serialization
 * - Optionally limits depth of final output
 * - Optionally limits number of properties/elements included in any single object/array
 *
 * @param input The object to be normalized.
 * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)
 * @param maxProperties The max number of elements or properties to be included in any single array or
 * object in the normallized output.
 * @returns A normalized version of the object, or `"**non-serializable**"` if any errors are thrown during normalization.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function tC(e,t=100,n=1/0){try{// since we're at the outermost level, we don't provide a key
return(/**
 * Visits a node to perform normalization on it
 *
 * @param key The key corresponding to the given node
 * @param value The node to be visited
 * @param depth Optional number indicating the maximum recursion depth
 * @param maxProperties Optional maximum number of properties/elements included in any single object/array
 * @param memo Optional Memo class handling decycling
 */function e(t,n,r=1/0,i=1/0,s=/* eslint-disable @typescript-eslint/no-unsafe-member-access *//* eslint-disable @typescript-eslint/no-explicit-any *//**
 * Helper to decycle json objects
 */function(){let e="function"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);// eslint-disable-next-line @typescript-eslint/prefer-for-of
for(let e=0;e<t.length;e++){let r=t[e];if(r===n)return!0}return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}()){let[a,o]=s;// Get the simple cases out of the way first
if(null==n||// this matches null and undefined -> eqeq not eqeqeq
["number","boolean","string"].includes(typeof n)&&!("number"==typeof n&&n!=n))return n;let l=/* eslint-disable complexity *//**
 * Stringify the given value. Handles various known special values and types.
 *
 * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn
 * the number 1231 into "[Object Number]", nor on `null`, as it will throw.
 *
 * @param value The value to stringify
 * @returns A stringified representation of the given value
 */function(e,// our internal use, it'll do
t){try{if("domain"===e&&t&&"object"==typeof t&&t._events)return"[Domain]";if("domainEmitter"===e)return"[DomainEmitter]";// It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first
// which won't throw if they are not present.
if(void 0!==P&&t===P)return"[Global]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof window&&t===window)return"[Window]";// eslint-disable-next-line no-restricted-globals
if("undefined"!=typeof document&&t===document)return"[Document]";if("object"==typeof t&&null!==t&&(t.__isVue||t._isVue))return"[VueViewModel]";// React's SyntheticEvent thingy
if(e6(t)&&"nativeEvent"in t&&"preventDefault"in t&&"stopPropagation"in t)return"[SyntheticEvent]";if("number"==typeof t&&t!=t)return"[NaN]";if("function"==typeof t)return`[Function: ${tI(t)}]`;if("symbol"==typeof t)return`[${String(t)}]`;// stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion
if("bigint"==typeof t)return`[BigInt: ${String(t)}]`;// Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting
// them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as
// `"[object Object]"`. If we instead look at the constructor's name (which is the same as the name of the class),
// we can make sure that only plain objects come out that way.
let n=/* eslint-enable complexity */function(e){let t=Object.getPrototypeOf(e);return t?t.constructor.name:"null prototype"}(t);// Handle HTML Elements
if(/^HTML(\w*)Element$/.test(n))return`[HTMLElement: ${n}]`;return`[object ${n}]`}catch(e){return`**non-serializable** (${e})`}}(t,n);// Anything we could potentially dig into more (objects or arrays) will have come back as `"[object XXXX]"`.
// Everything else will have already been serialized, so if we don't see that pattern, we're done.
if(!l.startsWith("[object "))return l;// From here on, we can assert that `value` is either an object or an array.
// Do not normalize objects that we know have already been normalized. As a general rule, the
// "__sentry_skip_normalization__" property should only be used sparingly and only should only be set on objects that
// have already been normalized.
if(n.__sentry_skip_normalization__)return n;// We can set `__sentry_override_normalization_depth__` on an object to ensure that from there
// We keep a certain amount of depth.
// This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.
let c="number"==typeof n.__sentry_override_normalization_depth__?n.__sentry_override_normalization_depth__:r;// We're also done if we've reached the max depth
if(0===c)return l.replace("object ","");// If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.
if(a(n))return"[Circular ~]";if(n&&"function"==typeof n.toJSON)try{let t=n.toJSON();// We need to normalize the return value of `.toJSON()` in case it has circular references
return e("",t,c-1,i,s)}catch(e){// pass (The built-in `toJSON` failed, but we can still try to do it ourselves)
}// At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse
// because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each
// property/entry, and keep track of the number of items we add to it.
let u=Array.isArray(n)?[]:{},d=0,p=/**
 * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their
 * non-enumerable properties attached.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor
 *  an Error.
 */function(e){if(/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function(e){switch(e2.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return e9(e,Error)}}(e))return{message:e.message,name:e.name,stack:e.stack,...tu(e)};if(!("undefined"!=typeof Event&&e9(e,Event)))return e;{let t={type:e.type,target:tc(e.target),currentTarget:tc(e.currentTarget),...tu(e)};return"undefined"!=typeof CustomEvent&&e9(e,CustomEvent)&&(t.detail=e.detail),t}}(n);for(let t in p){// Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
if(!Object.prototype.hasOwnProperty.call(p,t))continue;if(d>=i){u[t]="[MaxProperties ~]";break}// Recursively visit all the child nodes
let n=p[t];u[t]=e(t,n,c-1,i,s),d++}// Return accumulated values
return(// Once we've visited all the branches, remove the parent from memo storage
o(n),u)}("",e,t,n))}catch(e){return{ERROR:`**non-serializable** (${e})`}}}const tR=new WeakMap;var e1=z("5OM0g");// eslint-disable-next-line deprecation/deprecation
const tN=(0,e1.getGlobalObject)();/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */// eslint-disable-next-line @typescript-eslint/ban-types
function tA(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}var e1=(z("5OM0g"),z("5OM0g"));// Based on https://github.com/angular/angular.js/pull/13945/files
// eslint-disable-next-line deprecation/deprecation
const tD=(0,e1.getGlobalObject)(),tO=(0,e1.getGlobalObject)(),tB="__sentry_xhr_v2__",tU={},tM={};/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */function tL(t,n){tU[t]=tU[t]||[],tU[t].push(n),/** Instruments given API */function(t){if(!tM[t])switch(tM[t]=!0,t){case"console":"console"in e1.GLOBAL_OBJ&&e8.forEach(function(e){e in e1.GLOBAL_OBJ.console&&to(e1.GLOBAL_OBJ.console,e,function(t){return e7[e]=t,function(...t){tG("console",{args:t,level:e});let n=e7[e];n&&n.apply(e1.GLOBAL_OBJ.console,t)}})});break;case"dom":/** JSDoc */(function(){if(!tO.document)return;// Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
// handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
// we instrument `addEventListener` so that we don't end up attaching this handler twice.
let e=tG.bind(null,"dom"),t=tF(e,!0);tO.document.addEventListener("click",t,!1),tO.document.addEventListener("keypress",t,!1),// After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
// clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
// way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
// could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
// guaranteed to fire at least once.)
["EventTarget","Node"].forEach(t=>{// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
let n=tO[t]&&tO[t].prototype;// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(to(n,"addEventListener",function(t){return function(n,r,i){if("click"===n||"keypress"==n)try{let r=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},s=r[n]=r[n]||{refCount:0};if(!s.handler){let r=tF(e);s.handler=r,t.call(this,n,r,i)}s.refCount++}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return t.call(this,n,r,i)}}),to(n,"removeEventListener",function(e){return function(t,n,r){if("click"===t||"keypress"==t)try{let n=this.__sentry_instrumentation_handlers__||{},i=n[t];i&&(i.refCount--,i.refCount<=0&&(e.call(this,t,i.handler,r),i.handler=void 0,delete n[t]),0===Object.keys(n).length&&delete this.__sentry_instrumentation_handlers__)}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return e.call(this,t,n,r)}}))})})();break;case"xhr":/** JSDoc */(function(){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
if(!tO.XMLHttpRequest)return;let e=XMLHttpRequest.prototype;to(e,"open",function(e){return function(...t){let n=t[1],r=this[tB]={// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
method:e3(t[0])?t[0].toUpperCase():t[0],url:t[1],request_headers:{}};e3(n)&&"POST"===r.method&&n.match(/sentry_key/)&&(this.__sentry_own_request__=!0);let i=()=>{// For whatever reason, this is not the same instance here as from the outer method
let e=this[tB];if(e&&4===this.readyState){try{// touching statusCode in some platforms throws
// an exception
e.status_code=this.status}catch(e){/* do nothing */}tG("xhr",{args:t,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:this})}};return"onreadystatechange"in this&&"function"==typeof this.onreadystatechange?to(this,"onreadystatechange",function(e){return function(...t){return i(),e.apply(this,t)}}):this.addEventListener("readystatechange",i),to(this,"setRequestHeader",function(e){return function(...t){let[n,r]=t,i=this[tB];return i&&(i.request_headers[n.toLowerCase()]=r),e.apply(this,t)}}),e.apply(this,t)}}),to(e,"send",function(e){return function(...t){let n=this[tB];return n&&void 0!==t[0]&&(n.body=t[0]),tG("xhr",{args:t,startTimestamp:Date.now(),xhr:this}),e.apply(this,t)}})})();break;case"fetch":/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */(function(){if(!/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */function(){if(!("fetch"in tN))return!1;try{return new Headers,new Request("http://www.example.com"),new Response,!0}catch(e){return!1}}())return!1;// Fast path to avoid DOM I/O
// eslint-disable-next-line @typescript-eslint/unbound-method
if(tA(tN.fetch))return!0;// window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
// so create a "pure" iframe to see if that has native fetch
let e=!1,t=tN.document;// eslint-disable-next-line deprecation/deprecation
if(t&&"function"==typeof t.createElement)try{let n=t.createElement("iframe");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=tA(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return e})()&&to(e1.GLOBAL_OBJ,"fetch",function(e){return function(...t){let{method:n,url:r}=/**
 * Parses the fetch arguments to find the used Http method and the url of the request
 */function(e){if(0===e.length)return{method:"GET",url:""};if(2===e.length){let[t,n]=e;return{url:tY(t),method:tP(n,"method")?String(n.method).toUpperCase():"GET"}}let t=e[0];return{url:tY(t),method:tP(t,"method")?String(t.method).toUpperCase():"GET"}}(t),i={args:t,fetchData:{method:n,url:r},startTimestamp:Date.now()};// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return tG("fetch",{...i}),e.apply(e1.GLOBAL_OBJ,t).then(e=>(tG("fetch",{...i,endTimestamp:Date.now(),response:e}),e),e=>{// NOTE: If you are a Sentry user, and you are seeing this stack frame,
//       it means the sentry.javascript SDK caught an error invoking your application code.
//       This is expected behavior and NOT indicative of a bug with sentry.javascript.
throw tG("fetch",{...i,endTimestamp:Date.now(),error:e}),e})}});break;case"history":/** JSDoc */(function(){if(!/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */function(){// NOTE: in Chrome App environment, touching history.pushState, *even inside
//       a try/catch block*, will cause Chrome to output an error to console.error
// borrowed from: https://github.com/angular/angular.js/pull/13945/files
/* eslint-disable @typescript-eslint/no-unsafe-member-access */// eslint-disable-next-line @typescript-eslint/no-explicit-any
let e=tD.chrome,t=e&&e.app&&e.app.runtime,n="history"in tD&&!!tD.history.pushState&&!!tD.history.replaceState;return!t&&n}())return;let t=tO.onpopstate;/** @hidden */function n(t){return function(...n){let r=n.length>2?n[2]:void 0;if(r){// coerce to string (this is what pushState does)
let t=e,n=String(r);// keep track of the current URL state, as we always receive only the updated state
e=n,tG("history",{from:t,to:n})}return t.apply(this,n)}}tO.onpopstate=function(...n){let r=tO.location.href,i=e;if(e=r,tG("history",{from:i,to:r}),t)// https://github.com/getsentry/sentry-javascript/issues/3344
// https://github.com/bugsnag/bugsnag-js/issues/469
try{return t.apply(this,n)}catch(e){// no-empty
}},to(tO.history,"pushState",n),to(tO.history,"replaceState",n)})();break;case"error":tj=tO.onerror,tO.onerror=function(e,t,n,r,i){return tG("error",{column:r,error:i,line:n,msg:e,url:t}),!!tj&&!tj.__SENTRY_LOADER__&&tj.apply(this,arguments)},tO.onerror.__SENTRY_INSTRUMENTED__=!0;break;case"unhandledrejection":tz=tO.onunhandledrejection,tO.onunhandledrejection=function(e){return tG("unhandledrejection",e),!tz||!!tz.__SENTRY_LOADER__||tz.apply(this,arguments)},tO.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0;break;default:("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn("unknown instrumentation type:",t);return}}(t)}/** JSDoc */function tG(e,t){if(e&&tU[e])for(let n of tU[e]||[])try{n(t)}catch(t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error(`Error while triggering instrumentation handler.
Type: ${e}
Name: ${tI(n)}
Error:`,t)}}function tP(e,t){return!!e&&"object"==typeof e&&!!e[t]}function tY(e){return"string"==typeof e?e:e?tP(e,"url")?e.url:e.toString?e.toString():"":""}/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */function tF(e,r=!1){return i=>{// It's possible this handler might trigger multiple times for the same
// event (e.g. event propagation through node ancestors).
// Ignore if we've already captured that event.
if(!i||i._sentryCaptured||/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */function(e){// We are only interested in filtering `keypress` events for now.
if("keypress"!==e.type)return!1;try{let t=e.target;if(!t||!t.tagName)return!0;// Only consider keypress events on actual input elements. This will disregard keypresses targeting body
// e.g.tabbing through elements, hotkeys, etc.
if("INPUT"===t.tagName||"TEXTAREA"===t.tagName||t.isContentEditable)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}return!0}(i))return;tl(i,"_sentryCaptured",!0);let s="keypress"===i.type?"input":i.type;(void 0===n||!/**
 * Check whether two DOM events are similar to eachother. For example, two click events on the same button.
 */function(e,t){// If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
if(e.type!==t.type)return!1;try{// If both events have the same type, it's still possible that actions were performed on different targets.
// e.g. 2 clicks on different buttons.
if(e.target!==t.target)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}// If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
// to which an event listener was attached), we treat them as the same action, as we want to capture
// only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
return!0}(n,i))&&(e({event:i,name:s,global:r}),n=i),// Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
clearTimeout(t),t=tO.setTimeout(()=>{n=void 0},1e3)}}let tj=null,tz=null;var th=z("3hXCz"),e1=z("5OM0g"),tW=z("h2FeK"),t$=z("etb2O");// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`
// prevents the browser package from being bundled in the CDN bundle, and avoids a
// circular dependency between the browser and replay packages should `@sentry/browser` import
// from `@sentry/replay` in the future
const tH=e1.GLOBAL_OBJ,tV="sentryReplaySession",tZ="Unable to send Replay";function tq(e){let t=null==e?void 0:e.host;return(null==t?void 0:t.shadowRoot)===e}function tJ(e){return"[object ShadowRoot]"===Object.prototype.toString.call(e)}function tK(e){try{var t;let n=e.rules||e.cssRules;return n?((t=Array.from(n,tX).join("")).includes(" background-clip: text;")&&!t.includes(" -webkit-background-clip: text;")&&(t=t.replace(" background-clip: text;"," -webkit-background-clip: text; background-clip: text;")),t):null}catch(e){return null}}function tX(e){let t;if("styleSheet"in e)try{t=tK(e.styleSheet)||function(e){let{cssText:t}=e;if(t.split('"').length<3)return t;let n=["@import",`url(${JSON.stringify(e.href)})`];return""===e.layerName?n.push("layer"):e.layerName&&n.push(`layer(${e.layerName})`),e.supportsText&&n.push(`supports(${e.supportsText})`),e.media.length&&n.push(e.media.mediaText),n.join(" ")+";"}(e)}catch(e){}else if("selectorText"in e&&e.selectorText.includes(":"))return e.cssText.replace(/(\[(?:[\w-]+)[^\\])(:(?:[\w-]+)\])/gm,"$1\\$2");return t||e.cssText}(x=M||(M={}))[x.Document=0]="Document",x[x.DocumentType=1]="DocumentType",x[x.Element=2]="Element",x[x.Text=3]="Text",x[x.CDATA=4]="CDATA",x[x.Comment=5]="Comment";class tQ{constructor(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}getId(e){var t;if(!e)return -1;let n=null===(t=this.getMeta(e))||void 0===t?void 0:t.id;return null!=n?n:-1}getNode(e){return this.idNodeMap.get(e)||null}getIds(){return Array.from(this.idNodeMap.keys())}getMeta(e){return this.nodeMetaMap.get(e)||null}removeNodeFromMap(e){let t=this.getId(e);this.idNodeMap.delete(t),e.childNodes&&e.childNodes.forEach(e=>this.removeNodeFromMap(e))}has(e){return this.idNodeMap.has(e)}hasNode(e){return this.nodeMetaMap.has(e)}add(e,t){let n=t.id;this.idNodeMap.set(n,e),this.nodeMetaMap.set(e,t)}replace(e,t){let n=this.getNode(e);if(n){let e=this.nodeMetaMap.get(n);e&&this.nodeMetaMap.set(t,e)}this.idNodeMap.set(e,t)}reset(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}}function t0({maskInputOptions:e,tagName:t,type:n}){return"OPTION"===t&&(t="SELECT"),!!(e[t.toLowerCase()]||n&&e[n]||"password"===n||"INPUT"===t&&!n&&e.text)}function t1({isMasked:e,element:t,value:n,maskInputFn:r}){let i=n||"";return e?(r&&(i=r(i,t)),"*".repeat(i.length)):i}function t2(e){return e.toLowerCase()}function t5(e){return e.toUpperCase()}const t3="__rrweb_original__";function t6(e){let t=e.type;return e.hasAttribute("data-rr-is-password")?"password":t?t2(t):null}function t4(e,t,n){return"INPUT"===t&&("radio"===n||"checkbox"===n)?e.getAttribute("value")||"":e.value}let t9=1;const t8=RegExp("[^a-z0-9-_:]");function t7(){return t9++}const ne=/url\((?:(')([^']*)'|(")(.*?)"|([^)]*))\)/gm,nt=/^(?:[a-z+]+:)?\/\//i,nn=/^www\..*/i,nr=/^(data:)([^,]*),(.*)/i;function ni(e,t){return(e||"").replace(ne,(e,n,r,i,s,a)=>{let o=r||s||a,l=n||i||"";if(!o)return e;if(nt.test(o)||nn.test(o)||nr.test(o))return`url(${l}${o}${l})`;if("/"===o[0])return`url(${l}${(t.indexOf("//")>-1?t.split("/").slice(0,3).join("/"):t.split("/")[0]).split("?")[0]+o}${l})`;let c=t.split("/"),u=o.split("/");for(let e of(c.pop(),u))"."!==e&&(".."===e?c.pop():c.push(e));return`url(${l}${c.join("/")}${l})`})}const ns=/^[^ \t\n\r\u000c]+/,na=/^[, \t\n\r\u000c]+/;function no(e,t){if(!t||""===t.trim())return t;let n=e.createElement("a");return n.href=t,n.href}function nl(){let e=document.createElement("a");return e.href="",e.href}function nc(e,t,n,r,i,s){return r?"src"!==n&&("href"!==n||"use"===t&&"#"===r[0])&&("xlink:href"!==n||"#"===r[0])&&("background"!==n||"table"!==t&&"td"!==t&&"th"!==t)?"srcset"===n?function(e,t){if(""===t.trim())return t;let n=0;function r(e){let r;let i=e.exec(t.substring(n));return i?(r=i[0],n+=r.length,r):""}let i=[];for(;r(na),!(n>=t.length);){let s=r(ns);if(","===s.slice(-1))s=no(e,s.substring(0,s.length-1)),i.push(s);else{let r="";s=no(e,s);let a=!1;for(;;){let e=t.charAt(n);if(""===e){i.push((s+r).trim());break}if(a)")"===e&&(a=!1);else{if(","===e){n+=1,i.push((s+r).trim());break}"("===e&&(a=!0)}r+=e,n+=1}}}return i.join(", ")}(e,r):"style"===n?ni(r,nl()):"object"===t&&"data"===n?no(e,r):"function"==typeof s?s(n,r,i):r:no(e,r):r}function nu(e,t,n){return("video"===e||"audio"===e)&&"autoplay"===t}function nd(e,t,n=1/0,r=0){return!e||e.nodeType!==e.ELEMENT_NODE||r>n?-1:t(e)?r:nd(e.parentNode,t,n,r+1)}function np(e,t){return n=>{if(null===n)return!1;if(e){if("string"==typeof e){if(n.matches(`.${e}`))return!0}else if(function(e,t){for(let n=e.classList.length;n--;){let r=e.classList[n];if(t.test(r))return!0}return!1}(n,e))return!0}return!!(t&&n.matches(t))}}function nh(e,t,n,r,i,s){try{let a=e.nodeType===e.ELEMENT_NODE?e:e.parentElement;if(null===a)return!1;let o=-1,l=-1;if(s){if((l=nd(a,np(r,i)))<0)return!0;o=nd(a,np(t,n),l>=0?l:1/0)}else{if((o=nd(a,np(t,n)))<0)return!1;l=nd(a,np(r,i),o>=0?o:1/0)}return o>=0?!(l>=0)||o<=l:!(l>=0)&&!!s}catch(e){}return!!s}function nf(e){return null==e?"":e.toLowerCase()}function n_(e,t){let n;let{doc:s,mirror:a,blockClass:o,blockSelector:l,unblockSelector:c,maskAllText:u,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,skipChild:_=!1,inlineStylesheet:m=!0,maskInputOptions:g={},maskAttributeFn:y,maskTextFn:S,maskInputFn:b,slimDOMOptions:v,dataURLOptions:E={},inlineImages:T=!1,recordCanvas:w=!1,onSerialize:k,onIframeLoad:x,iframeLoadTimeout:I=5e3,onStylesheetLoad:C,stylesheetLoadTimeout:R=5e3,keepIframeSrcFn:N=()=>!1,newlyAddedElement:A=!1}=t,{preserveWhiteSpace:D=!0}=t,O=function(e,t){let{doc:n,mirror:s,blockClass:a,blockSelector:o,unblockSelector:l,maskAllText:c,maskAttributeFn:u,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,inlineStylesheet:_,maskInputOptions:m={},maskTextFn:g,maskInputFn:y,dataURLOptions:S={},inlineImages:b,recordCanvas:v,keepIframeSrcFn:E,newlyAddedElement:T=!1}=t,w=function(e,t){if(!t.hasNode(e))return;let n=t.getId(e);return 1===n?void 0:n}(n,s);switch(e.nodeType){case e.DOCUMENT_NODE:if("CSS1Compat"!==e.compatMode)return{type:M.Document,childNodes:[],compatMode:e.compatMode};return{type:M.Document,childNodes:[]};case e.DOCUMENT_TYPE_NODE:return{type:M.DocumentType,name:e.name,publicId:e.publicId,systemId:e.systemId,rootId:w};case e.ELEMENT_NODE:return function(e,t){let n;let{doc:s,blockClass:a,blockSelector:o,unblockSelector:l,inlineStylesheet:c,maskInputOptions:u={},maskAttributeFn:d,maskInputFn:p,dataURLOptions:h={},inlineImages:f,recordCanvas:_,keepIframeSrcFn:m,newlyAddedElement:g=!1,rootId:y,maskAllText:S,maskTextClass:b,unmaskTextClass:v,maskTextSelector:E,unmaskTextSelector:T}=t,w=function(e,t,n,r){try{if(r&&e.matches(r))return!1;if("string"==typeof t){if(e.classList.contains(t))return!0}else for(let n=e.classList.length;n--;){let r=e.classList[n];if(t.test(r))return!0}if(n)return e.matches(n)}catch(e){}return!1}(e,a,o,l),k=function(e){if(e instanceof HTMLFormElement)return"form";let t=t2(e.tagName);return t8.test(t)?"div":t}(e),x={},I=e.attributes.length;for(let t=0;t<I;t++){let n=e.attributes[t];nu(k,n.name,n.value)||(x[n.name]=nc(s,k,t2(n.name),n.value,e,d))}if("link"===k&&c){let t=Array.from(s.styleSheets).find(t=>t.href===e.href),n=null;t&&(n=tK(t)),n&&(delete x.rel,delete x.href,x._cssText=ni(n,t.href))}if("style"===k&&e.sheet&&!(e.innerText||e.textContent||"").trim().length){let t=tK(e.sheet);t&&(x._cssText=ni(t,nl()))}if("input"===k||"textarea"===k||"select"===k||"option"===k){let t=t6(e),n=t4(e,t5(k),t),r=e.checked;if("submit"!==t&&"button"!==t&&n){let r=nh(e,b,E,v,T,t0({type:t,tagName:t5(k),maskInputOptions:u}));x.value=t1({isMasked:r,element:e,value:n,maskInputFn:p})}r&&(x.checked=r)}if("option"===k&&(e.selected&&!u.select?x.selected=!0:delete x.selected),"canvas"===k&&_){if("2d"===e.__context)!function(e){let t=e.getContext("2d");if(!t)return!0;for(let n=0;n<e.width;n+=50)for(let r=0;r<e.height;r+=50){let i=t.getImageData,s=t3 in i?i[t3]:i,a=new Uint32Array(s.call(t,n,r,Math.min(50,e.width-n),Math.min(50,e.height-r)).data.buffer);if(a.some(e=>0!==e))return!1}return!0}(e)&&(x.rr_dataURL=e.toDataURL(h.type,h.quality));else if(!("__context"in e)){let t=e.toDataURL(h.type,h.quality),n=document.createElement("canvas");n.width=e.width,n.height=e.height;let r=n.toDataURL(h.type,h.quality);t!==r&&(x.rr_dataURL=t)}}if("img"===k&&f){r||(i=(r=s.createElement("canvas")).getContext("2d"));let t=e.crossOrigin;e.crossOrigin="anonymous";let n=()=>{e.removeEventListener("load",n);try{r.width=e.naturalWidth,r.height=e.naturalHeight,i.drawImage(e,0,0),x.rr_dataURL=r.toDataURL(h.type,h.quality)}catch(t){console.warn(`Cannot inline img src=${e.currentSrc}! Error: ${t}`)}t?x.crossOrigin=t:e.removeAttribute("crossorigin")};e.complete&&0!==e.naturalWidth?n():e.addEventListener("load",n)}if(("audio"===k||"video"===k)&&(x.rr_mediaState=e.paused?"paused":"played",x.rr_mediaCurrentTime=e.currentTime),!g&&(e.scrollLeft&&(x.rr_scrollLeft=e.scrollLeft),e.scrollTop&&(x.rr_scrollTop=e.scrollTop)),w){let{width:t,height:n}=e.getBoundingClientRect();x={class:x.class,rr_width:`${t}px`,rr_height:`${n}px`}}"iframe"!==k||m(x.src)||(e.contentDocument||(x.rr_src=x.src),delete x.src);try{customElements.get(k)&&(n=!0)}catch(e){}return{type:M.Element,tagName:k,attributes:x,childNodes:[],isSVG:!!("svg"===e.tagName||e.ownerSVGElement)||void 0,needBlock:w,rootId:y,isCustom:n}}(e,{doc:n,blockClass:a,blockSelector:o,unblockSelector:l,inlineStylesheet:_,maskAttributeFn:u,maskInputOptions:m,maskInputFn:y,dataURLOptions:S,inlineImages:b,recordCanvas:v,keepIframeSrcFn:E,newlyAddedElement:T,rootId:w,maskAllText:c,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f});case e.TEXT_NODE:return function(e,t){var n;let{maskAllText:r,maskTextClass:i,unmaskTextClass:s,maskTextSelector:a,unmaskTextSelector:o,maskTextFn:l,maskInputOptions:c,maskInputFn:u,rootId:d}=t,p=e.parentNode&&e.parentNode.tagName,h=e.textContent,f="STYLE"===p||void 0,_="SCRIPT"===p||void 0,m="TEXTAREA"===p||void 0;if(f&&h){try{e.nextSibling||e.previousSibling||(null===(n=e.parentNode.sheet)||void 0===n?void 0:n.cssRules)&&(h=tK(e.parentNode.sheet))}catch(t){console.warn(`Cannot get CSS styles from text's parentNode. Error: ${t}`,e)}h=ni(h,nl())}_&&(h="SCRIPT_PLACEHOLDER");let g=nh(e,i,a,s,o,r);if(f||_||m||!h||!g||(h=l?l(h):h.replace(/[\S]/g,"*")),m&&h&&(c.textarea||g)&&(h=u?u(h,e.parentNode):h.replace(/[\S]/g,"*")),"OPTION"===p&&h){let t=t0({type:null,tagName:p,maskInputOptions:c});h=t1({isMasked:nh(e,i,a,s,o,t),element:e,value:h,maskInputFn:u})}return{type:M.Text,textContent:h||"",isStyle:f,rootId:d}}(e,{maskAllText:c,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,maskTextFn:g,maskInputOptions:m,maskInputFn:y,rootId:w});case e.CDATA_SECTION_NODE:return{type:M.CDATA,textContent:"",rootId:w};case e.COMMENT_NODE:return{type:M.Comment,textContent:e.textContent||"",rootId:w};default:return!1}}(e,{doc:s,mirror:a,blockClass:o,blockSelector:l,maskAllText:u,unblockSelector:c,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,inlineStylesheet:m,maskInputOptions:g,maskAttributeFn:y,maskTextFn:S,maskInputFn:b,dataURLOptions:E,inlineImages:T,recordCanvas:w,keepIframeSrcFn:N,newlyAddedElement:A});if(!O)return console.warn(e,"not serialized"),null;n=a.hasNode(e)?a.getId(e):!function(e,t){if(t.comment&&e.type===M.Comment)return!0;if(e.type===M.Element){if(t.script&&("script"===e.tagName||"link"===e.tagName&&("preload"===e.attributes.rel||"modulepreload"===e.attributes.rel)&&"script"===e.attributes.as||"link"===e.tagName&&"prefetch"===e.attributes.rel&&"string"==typeof e.attributes.href&&e.attributes.href.endsWith(".js"))||t.headFavicon&&("link"===e.tagName&&"shortcut icon"===e.attributes.rel||"meta"===e.tagName&&(nf(e.attributes.name).match(/^msapplication-tile(image|color)$/)||"application-name"===nf(e.attributes.name)||"icon"===nf(e.attributes.rel)||"apple-touch-icon"===nf(e.attributes.rel)||"shortcut icon"===nf(e.attributes.rel))))return!0;if("meta"===e.tagName){if(t.headMetaDescKeywords&&nf(e.attributes.name).match(/^description|keywords$/)||t.headMetaSocial&&(nf(e.attributes.property).match(/^(og|twitter|fb):/)||nf(e.attributes.name).match(/^(og|twitter):/)||"pinterest"===nf(e.attributes.name)))return!0;if(t.headMetaRobots&&("robots"===nf(e.attributes.name)||"googlebot"===nf(e.attributes.name)||"bingbot"===nf(e.attributes.name)))return!0;if(t.headMetaHttpEquiv&&void 0!==e.attributes["http-equiv"])return!0;else if(t.headMetaAuthorship&&("author"===nf(e.attributes.name)||"generator"===nf(e.attributes.name)||"framework"===nf(e.attributes.name)||"publisher"===nf(e.attributes.name)||"progid"===nf(e.attributes.name)||nf(e.attributes.property).match(/^article:/)||nf(e.attributes.property).match(/^product:/)))return!0;else if(t.headMetaVerification&&("google-site-verification"===nf(e.attributes.name)||"yandex-verification"===nf(e.attributes.name)||"csrf-token"===nf(e.attributes.name)||"p:domain_verify"===nf(e.attributes.name)||"verify-v1"===nf(e.attributes.name)||"verification"===nf(e.attributes.name)||"shopify-checkout-api-token"===nf(e.attributes.name)))return!0}}return!1}(O,v)&&(D||O.type!==M.Text||O.isStyle||O.textContent.replace(/^\s+|\s+$/gm,"").length)?t7():-2;let B=Object.assign(O,{id:n});if(a.add(e,B),-2===n)return null;k&&k(e);let U=!_;if(B.type===M.Element){U=U&&!B.needBlock,delete B.needBlock;let t=e.shadowRoot;t&&tJ(t)&&(B.isShadowHost=!0)}if((B.type===M.Document||B.type===M.Element)&&U){v.headWhitespace&&B.type===M.Element&&"head"===B.tagName&&(D=!1);let t={doc:s,mirror:a,blockClass:o,blockSelector:l,maskAllText:u,unblockSelector:c,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,skipChild:_,inlineStylesheet:m,maskInputOptions:g,maskAttributeFn:y,maskTextFn:S,maskInputFn:b,slimDOMOptions:v,dataURLOptions:E,inlineImages:T,recordCanvas:w,preserveWhiteSpace:D,onSerialize:k,onIframeLoad:x,iframeLoadTimeout:I,onStylesheetLoad:C,stylesheetLoadTimeout:R,keepIframeSrcFn:N};for(let n of Array.from(e.childNodes)){let e=n_(n,t);e&&B.childNodes.push(e)}if(e.nodeType===e.ELEMENT_NODE&&e.shadowRoot)for(let n of Array.from(e.shadowRoot.childNodes)){let r=n_(n,t);r&&(tJ(e.shadowRoot)&&(r.isShadow=!0),B.childNodes.push(r))}}return e.parentNode&&tq(e.parentNode)&&tJ(e.parentNode)&&(B.isShadow=!0),B.type===M.Element&&"iframe"===B.tagName&&function(e,t,n){let r;let i=e.contentWindow;if(!i)return;let s=!1;try{r=i.document.readyState}catch(e){return}if("complete"!==r){let r=setTimeout(()=>{s||(t(),s=!0)},n);e.addEventListener("load",()=>{clearTimeout(r),s=!0,t()});return}let a="about:blank";if(i.location.href!==a||e.src===a||""===e.src)return setTimeout(t,0),e.addEventListener("load",t);e.addEventListener("load",t)}(e,()=>{let t=e.contentDocument;if(t&&x){let n=n_(t,{doc:t,mirror:a,blockClass:o,blockSelector:l,unblockSelector:c,maskAllText:u,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,skipChild:!1,inlineStylesheet:m,maskInputOptions:g,maskAttributeFn:y,maskTextFn:S,maskInputFn:b,slimDOMOptions:v,dataURLOptions:E,inlineImages:T,recordCanvas:w,preserveWhiteSpace:D,onSerialize:k,onIframeLoad:x,iframeLoadTimeout:I,onStylesheetLoad:C,stylesheetLoadTimeout:R,keepIframeSrcFn:N});n&&x(e,n)}},I),B.type===M.Element&&"link"===B.tagName&&"stylesheet"===B.attributes.rel&&function(e,t,n){let r,i=!1;try{r=e.sheet}catch(e){return}if(r)return;let s=setTimeout(()=>{i||(t(),i=!0)},n);e.addEventListener("load",()=>{clearTimeout(s),i=!0,t()})}(e,()=>{if(C){let t=n_(e,{doc:s,mirror:a,blockClass:o,blockSelector:l,unblockSelector:c,maskAllText:u,maskTextClass:d,unmaskTextClass:p,maskTextSelector:h,unmaskTextSelector:f,skipChild:!1,inlineStylesheet:m,maskInputOptions:g,maskAttributeFn:y,maskTextFn:S,maskInputFn:b,slimDOMOptions:v,dataURLOptions:E,inlineImages:T,recordCanvas:w,preserveWhiteSpace:D,onSerialize:k,onIframeLoad:x,iframeLoadTimeout:I,onStylesheetLoad:C,stylesheetLoadTimeout:R,keepIframeSrcFn:N});t&&C(e,t)}},R),B}function nm(e,t,n=document){let r={capture:!0,passive:!0};return n.addEventListener(e,t,r),()=>n.removeEventListener(e,t,r)}const ng="Please stop import mirror directly. Instead of that,\r\nnow you can use replayer.getMirror() to access the mirror instance of a replayer,\r\nor you can use record.mirror to access the mirror instance during recording.";let ny={map:{},getId:()=>(console.error(ng),-1),getNode:()=>(console.error(ng),null),removeNodeFromMap(){console.error(ng)},has:()=>(console.error(ng),!1),reset(){console.error(ng)}};function nS(e,t,n={}){let r=null,i=0;return function(...s){let a=Date.now();i||!1!==n.leading||(i=a);let o=t-(a-i),l=this;o<=0||o>t?(r&&(clearTimeout(r),r=null),i=a,e.apply(l,s)):r||!1===n.trailing||(r=setTimeout(()=>{i=!1===n.leading?0:Date.now(),r=null,e.apply(l,s)},o))}}function nb(e,t,n,r,i=window){let s=i.Object.getOwnPropertyDescriptor(e,t);return i.Object.defineProperty(e,t,r?n:{set(e){setTimeout(()=>{n.set.call(this,e)},0),s&&s.set&&s.set.call(this,e)}}),()=>nb(e,t,s||{},!0)}function nv(e,t,n){try{if(!(t in e))return()=>{};let r=e[t],i=n(r);return"function"==typeof i&&(i.prototype=i.prototype||{},Object.defineProperties(i,{__rrweb_original__:{enumerable:!1,value:r}})),e[t]=i,()=>{e[t]=r}}catch(e){return()=>{}}}"undefined"!=typeof window&&window.Proxy&&window.Reflect&&(ny=new Proxy(ny,{get:(e,t,n)=>("map"===t&&console.error(ng),Reflect.get(e,t,n))}));let nE=Date.now;function nT(e){var t,n,r,i,s,a;let o=e.document;return{left:o.scrollingElement?o.scrollingElement.scrollLeft:void 0!==e.pageXOffset?e.pageXOffset:(null==o?void 0:o.documentElement.scrollLeft)||(null===(n=null===(t=null==o?void 0:o.body)||void 0===t?void 0:t.parentElement)||void 0===n?void 0:n.scrollLeft)||(null===(r=null==o?void 0:o.body)||void 0===r?void 0:r.scrollLeft)||0,top:o.scrollingElement?o.scrollingElement.scrollTop:void 0!==e.pageYOffset?e.pageYOffset:(null==o?void 0:o.documentElement.scrollTop)||(null===(s=null===(i=null==o?void 0:o.body)||void 0===i?void 0:i.parentElement)||void 0===s?void 0:s.scrollTop)||(null===(a=null==o?void 0:o.body)||void 0===a?void 0:a.scrollTop)||0}}function nw(){return window.innerHeight||document.documentElement&&document.documentElement.clientHeight||document.body&&document.body.clientHeight}function nk(){return window.innerWidth||document.documentElement&&document.documentElement.clientWidth||document.body&&document.body.clientWidth}function nx(e,t,n,r,i){if(!e)return!1;let s=e.nodeType===e.ELEMENT_NODE?e:e.parentElement;if(!s)return!1;let a=np(t,n);if(!i){let e=r&&s.matches(r);return a(s)&&!e}let o=nd(s,a),l=-1;return!(o<0)&&(r&&(l=nd(s,np(null,r))),o>-1&&l<0||o<l)}function nI(e,t){return -2===t.getId(e)}function nC(e){return!!e.changedTouches}function nR(e,t){return!!("IFRAME"===e.nodeName&&t.getMeta(e))}function nN(e,t){return!!("LINK"===e.nodeName&&e.nodeType===e.ELEMENT_NODE&&e.getAttribute&&"stylesheet"===e.getAttribute("rel")&&t.getMeta(e))}function nA(e){return!!(null==e?void 0:e.shadowRoot)}/[1-9][0-9]{12}/.test(Date.now().toString())||(nE=()=>new Date().getTime());class nD{constructor(){this.id=1,this.styleIDMap=new WeakMap,this.idStyleMap=new Map}getId(e){var t;return null!==(t=this.styleIDMap.get(e))&&void 0!==t?t:-1}has(e){return this.styleIDMap.has(e)}add(e,t){let n;return this.has(e)?this.getId(e):(n=void 0===t?this.id++:t,this.styleIDMap.set(e,n),this.idStyleMap.set(n,e),n)}getStyle(e){return this.idStyleMap.get(e)||null}reset(){this.styleIDMap=new WeakMap,this.idStyleMap=new Map,this.id=1}generateId(){return this.id++}}function nO(e){var t,n;let r=null;return(null===(n=null===(t=e.getRootNode)||void 0===t?void 0:t.call(e))||void 0===n?void 0:n.nodeType)===Node.DOCUMENT_FRAGMENT_NODE&&e.getRootNode().host&&(r=e.getRootNode().host),r}function nB(e){let t=e.ownerDocument;return!!t&&(t.contains(e)||function(e){let t=e.ownerDocument;if(!t)return!1;let n=function(e){let t,n=e;for(;t=nO(n);)n=t;return n}(e);return t.contains(n)}(e))}var nU=((I=nU||{})[I.DomContentLoaded=0]="DomContentLoaded",I[I.Load=1]="Load",I[I.FullSnapshot=2]="FullSnapshot",I[I.IncrementalSnapshot=3]="IncrementalSnapshot",I[I.Meta=4]="Meta",I[I.Custom=5]="Custom",I[I.Plugin=6]="Plugin",I),nM=((C=nM||{})[C.Mutation=0]="Mutation",C[C.MouseMove=1]="MouseMove",C[C.MouseInteraction=2]="MouseInteraction",C[C.Scroll=3]="Scroll",C[C.ViewportResize=4]="ViewportResize",C[C.Input=5]="Input",C[C.TouchMove=6]="TouchMove",C[C.MediaInteraction=7]="MediaInteraction",C[C.StyleSheetRule=8]="StyleSheetRule",C[C.CanvasMutation=9]="CanvasMutation",C[C.Font=10]="Font",C[C.Log=11]="Log",C[C.Drag=12]="Drag",C[C.StyleDeclaration=13]="StyleDeclaration",C[C.Selection=14]="Selection",C[C.AdoptedStyleSheet=15]="AdoptedStyleSheet",C[C.CustomElement=16]="CustomElement",C),nL=((R=nL||{})[R.MouseUp=0]="MouseUp",R[R.MouseDown=1]="MouseDown",R[R.Click=2]="Click",R[R.ContextMenu=3]="ContextMenu",R[R.DblClick=4]="DblClick",R[R.Focus=5]="Focus",R[R.Blur=6]="Blur",R[R.TouchStart=7]="TouchStart",R[R.TouchMove_Departed=8]="TouchMove_Departed",R[R.TouchEnd=9]="TouchEnd",R[R.TouchCancel=10]="TouchCancel",R),nG=((N=nG||{})[N.Mouse=0]="Mouse",N[N.Pen=1]="Pen",N[N.Touch=2]="Touch",N),nP=((A=nP||{})[A["2D"]=0]="2D",A[A.WebGL=1]="WebGL",A[A.WebGL2=2]="WebGL2",A);class nY{constructor(){this.length=0,this.head=null,this.tail=null}get(e){if(e>=this.length)throw Error("Position outside of list range");let t=this.head;for(let n=0;n<e;n++)t=(null==t?void 0:t.next)||null;return t}addNode(e){let t={value:e,previous:null,next:null};if(e.__ln=t,e.previousSibling&&"__ln"in e.previousSibling){let n=e.previousSibling.__ln.next;t.next=n,t.previous=e.previousSibling.__ln,e.previousSibling.__ln.next=t,n&&(n.previous=t)}else if(e.nextSibling&&"__ln"in e.nextSibling&&e.nextSibling.__ln.previous){let n=e.nextSibling.__ln.previous;t.previous=n,t.next=e.nextSibling.__ln,e.nextSibling.__ln.previous=t,n&&(n.next=t)}else this.head&&(this.head.previous=t),t.next=this.head,this.head=t;null===t.next&&(this.tail=t),this.length++}removeNode(e){let t=e.__ln;this.head&&(t.previous?(t.previous.next=t.next,t.next?t.next.previous=t.previous:this.tail=t.previous):(this.head=t.next,this.head?this.head.previous=null:this.tail=null),e.__ln&&delete e.__ln,this.length--)}}const nF=(e,t)=>`${e}@${t}`;class nj{constructor(){this.frozen=!1,this.locked=!1,this.texts=[],this.attributes=[],this.removes=[],this.mapRemoves=[],this.movedMap={},this.addedSet=new Set,this.movedSet=new Set,this.droppedSet=new Set,this.processMutations=e=>{e.forEach(this.processMutation),this.emit()},this.emit=()=>{if(this.frozen||this.locked)return;let e=[],t=new Set,n=new nY,r=e=>{let t=e,n=-2;for(;-2===n;)n=(t=t&&t.nextSibling)&&this.mirror.getId(t);return n},i=i=>{if(!i.parentNode||!nB(i))return;let s=tq(i.parentNode)?this.mirror.getId(nO(i)):this.mirror.getId(i.parentNode),a=r(i);if(-1===s||-1===a)return n.addNode(i);let o=n_(i,{doc:this.doc,mirror:this.mirror,blockClass:this.blockClass,blockSelector:this.blockSelector,maskAllText:this.maskAllText,unblockSelector:this.unblockSelector,maskTextClass:this.maskTextClass,unmaskTextClass:this.unmaskTextClass,maskTextSelector:this.maskTextSelector,unmaskTextSelector:this.unmaskTextSelector,skipChild:!0,newlyAddedElement:!0,inlineStylesheet:this.inlineStylesheet,maskInputOptions:this.maskInputOptions,maskAttributeFn:this.maskAttributeFn,maskTextFn:this.maskTextFn,maskInputFn:this.maskInputFn,slimDOMOptions:this.slimDOMOptions,dataURLOptions:this.dataURLOptions,recordCanvas:this.recordCanvas,inlineImages:this.inlineImages,onSerialize:e=>{nR(e,this.mirror)&&this.iframeManager.addIframe(e),nN(e,this.mirror)&&this.stylesheetManager.trackLinkElement(e),nA(i)&&this.shadowDomManager.addShadowRoot(i.shadowRoot,this.doc)},onIframeLoad:(e,t)=>{this.iframeManager.attachIframe(e,t),this.shadowDomManager.observeAttachShadow(e)},onStylesheetLoad:(e,t)=>{this.stylesheetManager.attachLinkElement(e,t)}});o&&(e.push({parentId:s,nextId:a,node:o}),t.add(o.id))};for(;this.mapRemoves.length;)this.mirror.removeNodeFromMap(this.mapRemoves.shift());for(let e of this.movedSet)(!nW(this.removes,e,this.mirror)||this.movedSet.has(e.parentNode))&&i(e);for(let e of this.addedSet)n$(this.droppedSet,e)||nW(this.removes,e,this.mirror)?n$(this.movedSet,e)?i(e):this.droppedSet.add(e):i(e);let s=null;for(;n.length;){let e=null;if(s){let t=this.mirror.getId(s.value.parentNode),n=r(s.value);-1!==t&&-1!==n&&(e=s)}if(!e){let t=n.tail;for(;t;){let n=t;if(t=t.previous,n){let t=this.mirror.getId(n.value.parentNode),i=r(n.value);if(-1===i)continue;if(-1!==t){e=n;break}{let t=n.value;if(t.parentNode&&t.parentNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE){let r=t.parentNode.host,i=this.mirror.getId(r);if(-1!==i){e=n;break}}}}}}if(!e){for(;n.head;)n.removeNode(n.head.value);break}s=e.previous,n.removeNode(e.value),i(e.value)}let a={texts:this.texts.map(e=>({id:this.mirror.getId(e.node),value:e.value})).filter(e=>!t.has(e.id)).filter(e=>this.mirror.has(e.id)),attributes:this.attributes.map(e=>{let{attributes:t}=e;if("string"==typeof t.style){let n=JSON.stringify(e.styleDiff),r=JSON.stringify(e._unchangedStyles);n.length<t.style.length&&(n+r).split("var(").length===t.style.split("var(").length&&(t.style=e.styleDiff)}return{id:this.mirror.getId(e.node),attributes:t}}).filter(e=>!t.has(e.id)).filter(e=>this.mirror.has(e.id)),removes:this.removes,adds:e};(a.texts.length||a.attributes.length||a.removes.length||a.adds.length)&&(this.texts=[],this.attributes=[],this.removes=[],this.addedSet=new Set,this.movedSet=new Set,this.droppedSet=new Set,this.movedMap={},this.mutationCb(a))},this.processMutation=e=>{let t;if(!nI(e.target,this.mirror)){try{t=document.implementation.createHTMLDocument()}catch(e){t=this.doc}switch(e.type){case"characterData":{let t=e.target.textContent;nx(e.target,this.blockClass,this.blockSelector,this.unblockSelector,!1)||t===e.oldValue||this.texts.push({value:nh(e.target,this.maskTextClass,this.maskTextSelector,this.unmaskTextClass,this.unmaskTextSelector,this.maskAllText)&&t?this.maskTextFn?this.maskTextFn(t):t.replace(/[\S]/g,"*"):t,node:e.target});break}case"attributes":{let n=e.target,r=e.attributeName,i=e.target.getAttribute(r);if("value"===r){let t=t6(n),r=n.tagName;i=t4(n,r,t);let s=t0({maskInputOptions:this.maskInputOptions,tagName:r,type:t}),a=nh(e.target,this.maskTextClass,this.maskTextSelector,this.unmaskTextClass,this.unmaskTextSelector,s);i=t1({isMasked:a,element:n,value:i,maskInputFn:this.maskInputFn})}if(nx(e.target,this.blockClass,this.blockSelector,this.unblockSelector,!1)||i===e.oldValue)return;let s=this.attributes.find(t=>t.node===e.target);if("IFRAME"===n.tagName&&"src"===r&&!this.keepIframeSrcFn(i)){if(n.contentDocument)return;r="rr_src"}if(s||(s={node:e.target,attributes:{},styleDiff:{},_unchangedStyles:{}},this.attributes.push(s)),"type"===r&&"INPUT"===n.tagName&&"password"===(e.oldValue||"").toLowerCase()&&n.setAttribute("data-rr-is-password","true"),!nu(n.tagName,r)&&(s.attributes[r]=nc(this.doc,t2(n.tagName),t2(r),i,n,this.maskAttributeFn),"style"===r)){let r=t.createElement("span");for(let t of(e.oldValue&&r.setAttribute("style",e.oldValue),Array.from(n.style))){let e=n.style.getPropertyValue(t),i=n.style.getPropertyPriority(t);e!==r.style.getPropertyValue(t)||i!==r.style.getPropertyPriority(t)?""===i?s.styleDiff[t]=e:s.styleDiff[t]=[e,i]:s._unchangedStyles[t]=[e,i]}for(let e of Array.from(r.style))""===n.style.getPropertyValue(e)&&(s.styleDiff[e]=!1)}break}case"childList":if(nx(e.target,this.blockClass,this.blockSelector,this.unblockSelector,!0))return;e.addedNodes.forEach(t=>this.genAdds(t,e.target)),e.removedNodes.forEach(t=>{let n=this.mirror.getId(t),r=tq(e.target)?this.mirror.getId(e.target.host):this.mirror.getId(e.target);nx(e.target,this.blockClass,this.blockSelector,this.unblockSelector,!1)||nI(t,this.mirror)||-1===this.mirror.getId(t)||(this.addedSet.has(t)?(nz(this.addedSet,t),this.droppedSet.add(t)):this.addedSet.has(e.target)&&-1===n||function e(t,n){if(tq(t))return!1;let r=n.getId(t);return!n.has(r)||(!t.parentNode||t.parentNode.nodeType!==t.DOCUMENT_NODE)&&(!t.parentNode||e(t.parentNode,n))}(e.target,this.mirror)||(this.movedSet.has(t)&&this.movedMap[nF(n,r)]?nz(this.movedSet,t):this.removes.push({parentId:r,id:n,isShadow:!!(tq(e.target)&&tJ(e.target))||void 0})),this.mapRemoves.push(t))})}}},this.genAdds=(e,t)=>{if(!this.processedNodeManager.inOtherBuffer(e,this)&&!(this.addedSet.has(e)||this.movedSet.has(e))){if(this.mirror.hasNode(e)){if(nI(e,this.mirror))return;this.movedSet.add(e);let n=null;t&&this.mirror.hasNode(t)&&(n=this.mirror.getId(t)),n&&-1!==n&&(this.movedMap[nF(this.mirror.getId(e),n)]=!0)}else this.addedSet.add(e),this.droppedSet.delete(e);!nx(e,this.blockClass,this.blockSelector,this.unblockSelector,!1)&&(e.childNodes.forEach(e=>this.genAdds(e)),nA(e)&&e.shadowRoot.childNodes.forEach(t=>{this.processedNodeManager.add(t,this),this.genAdds(t,e)}))}}}init(e){["mutationCb","blockClass","blockSelector","unblockSelector","maskAllText","maskTextClass","unmaskTextClass","maskTextSelector","unmaskTextSelector","inlineStylesheet","maskInputOptions","maskAttributeFn","maskTextFn","maskInputFn","keepIframeSrcFn","recordCanvas","inlineImages","slimDOMOptions","dataURLOptions","doc","mirror","iframeManager","stylesheetManager","shadowDomManager","canvasManager","processedNodeManager"].forEach(t=>{this[t]=e[t]})}freeze(){this.frozen=!0,this.canvasManager.freeze()}unfreeze(){this.frozen=!1,this.canvasManager.unfreeze(),this.emit()}isFrozen(){return this.frozen}lock(){this.locked=!0,this.canvasManager.lock()}unlock(){this.locked=!1,this.canvasManager.unlock(),this.emit()}reset(){this.shadowDomManager.reset(),this.canvasManager.reset()}}function nz(e,t){e.delete(t),t.childNodes.forEach(t=>nz(e,t))}function nW(e,t,n){return 0!==e.length&&function e(t,n,r){let{parentNode:i}=n;if(!i)return!1;let s=r.getId(i);return!!t.some(e=>e.id===s)||e(t,i,r)}(e,t,n)}function n$(e,t){return 0!==e.size&&function e(t,n){let{parentNode:r}=n;return!!r&&(!!t.has(r)||e(t,r))}(e,t)}const nH=e=>s?(...t)=>{try{return e(...t)}catch(e){if(s&&!0===s(e))return()=>{};throw e}}:e,nV=[];function nZ(e){try{if("composedPath"in e){let t=e.composedPath();if(t.length)return t[0]}else if("path"in e&&e.path.length)return e.path[0]}catch(e){}return e&&e.target}function nq(e,t){var n,r;let i=new nj;nV.push(i),i.init(e);let s=window.MutationObserver||window.__rrMutationObserver,a=null===(r=null===(n=null==window?void 0:window.Zone)||void 0===n?void 0:n.__symbol__)||void 0===r?void 0:r.call(n,"MutationObserver");a&&window[a]&&(s=window[a]);let o=new s(nH(t=>{e.onMutation&&!1===e.onMutation(t)||i.processMutations.bind(i)(t)}));return o.observe(t,{attributes:!0,attributeOldValue:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0}),o}function nJ({scrollCb:e,doc:t,mirror:n,blockClass:r,blockSelector:i,unblockSelector:s,sampling:a}){let o=nH(nS(nH(a=>{let o=nZ(a);if(!o||nx(o,r,i,s,!0))return;let l=n.getId(o);if(o===t&&t.defaultView){let n=nT(t.defaultView);e({id:l,x:n.left,y:n.top})}else e({id:l,x:o.scrollLeft,y:o.scrollTop})}),a.scroll||100));return nm("scroll",o,t)}function nK(e,t){let n=Object.assign({},e);return t||delete n.userTriggered,n}const nX=["INPUT","TEXTAREA","SELECT"],nQ=new WeakMap;function n0(e){return function(e,t){if(n3("CSSGroupingRule")&&e.parentRule instanceof CSSGroupingRule||n3("CSSMediaRule")&&e.parentRule instanceof CSSMediaRule||n3("CSSSupportsRule")&&e.parentRule instanceof CSSSupportsRule||n3("CSSConditionRule")&&e.parentRule instanceof CSSConditionRule){let n=Array.from(e.parentRule.cssRules),r=n.indexOf(e);t.unshift(r)}else if(e.parentStyleSheet){let n=Array.from(e.parentStyleSheet.cssRules),r=n.indexOf(e);t.unshift(r)}return t}(e,[])}function n1(e,t,n){let r,i;return e?(e.ownerNode?r=t.getId(e.ownerNode):i=n.getId(e),{styleId:i,id:r}):{}}function n2({mirror:e,stylesheetManager:t},n){var r,i,s;let a=null;a="#document"===n.nodeName?e.getId(n):e.getId(n.host);let o="#document"===n.nodeName?null===(r=n.defaultView)||void 0===r?void 0:r.Document:null===(s=null===(i=n.ownerDocument)||void 0===i?void 0:i.defaultView)||void 0===s?void 0:s.ShadowRoot,l=(null==o?void 0:o.prototype)?Object.getOwnPropertyDescriptor(null==o?void 0:o.prototype,"adoptedStyleSheets"):void 0;return null!==a&&-1!==a&&o&&l?(Object.defineProperty(n,"adoptedStyleSheets",{configurable:l.configurable,enumerable:l.enumerable,get(){var e;return null===(e=l.get)||void 0===e?void 0:e.call(this)},set(e){var n;let r=null===(n=l.set)||void 0===n?void 0:n.call(this,e);if(null!==a&&-1!==a)try{t.adoptStyleSheets(e,a)}catch(e){}return r}}),nH(()=>{Object.defineProperty(n,"adoptedStyleSheets",{configurable:l.configurable,enumerable:l.enumerable,get:l.get,set:l.set})})):()=>{}}function n5(e,t={}){let n=e.doc.defaultView;if(!n)return()=>{};!function(e,t){let{mutationCb:n,mousemoveCb:r,mouseInteractionCb:i,scrollCb:s,viewportResizeCb:a,inputCb:o,mediaInteractionCb:l,styleSheetRuleCb:c,styleDeclarationCb:u,canvasMutationCb:d,fontCb:p,selectionCb:h,customElementCb:f}=e;e.mutationCb=(...e)=>{t.mutation&&t.mutation(...e),n(...e)},e.mousemoveCb=(...e)=>{t.mousemove&&t.mousemove(...e),r(...e)},e.mouseInteractionCb=(...e)=>{t.mouseInteraction&&t.mouseInteraction(...e),i(...e)},e.scrollCb=(...e)=>{t.scroll&&t.scroll(...e),s(...e)},e.viewportResizeCb=(...e)=>{t.viewportResize&&t.viewportResize(...e),a(...e)},e.inputCb=(...e)=>{t.input&&t.input(...e),o(...e)},e.mediaInteractionCb=(...e)=>{t.mediaInteaction&&t.mediaInteaction(...e),l(...e)},e.styleSheetRuleCb=(...e)=>{t.styleSheetRule&&t.styleSheetRule(...e),c(...e)},e.styleDeclarationCb=(...e)=>{t.styleDeclaration&&t.styleDeclaration(...e),u(...e)},e.canvasMutationCb=(...e)=>{t.canvasMutation&&t.canvasMutation(...e),d(...e)},e.fontCb=(...e)=>{t.font&&t.font(...e),p(...e)},e.selectionCb=(...e)=>{t.selection&&t.selection(...e),h(...e)},e.customElementCb=(...e)=>{t.customElement&&t.customElement(...e),f(...e)}}(e,t);let r=nq(e,e.doc),i=function({mousemoveCb:e,sampling:t,doc:n,mirror:r}){let i;if(!1===t.mousemove)return()=>{};let s="number"==typeof t.mousemove?t.mousemove:50,a="number"==typeof t.mousemoveCallback?t.mousemoveCallback:500,o=[],l=nS(nH(t=>{let n=Date.now()-i;e(o.map(e=>(e.timeOffset-=n,e)),t),o=[],i=null}),a),c=nH(nS(nH(e=>{let t=nZ(e),{clientX:n,clientY:s}=nC(e)?e.changedTouches[0]:e;i||(i=nE()),o.push({x:n,y:s,id:r.getId(t),timeOffset:nE()-i}),l("undefined"!=typeof DragEvent&&e instanceof DragEvent?nM.Drag:e instanceof MouseEvent?nM.MouseMove:nM.TouchMove)}),s,{trailing:!1})),u=[nm("mousemove",c,n),nm("touchmove",c,n),nm("drag",c,n)];return nH(()=>{u.forEach(e=>e())})}(e),s=function({mouseInteractionCb:e,doc:t,mirror:n,blockClass:r,blockSelector:i,unblockSelector:s,sampling:a}){if(!1===a.mouseInteraction)return()=>{};let o=!0===a.mouseInteraction||void 0===a.mouseInteraction?{}:a.mouseInteraction,l=[],c=null,u=t=>a=>{let o=nZ(a);if(nx(o,r,i,s,!0))return;let l=null,u=t;if("pointerType"in a){switch(a.pointerType){case"mouse":l=nG.Mouse;break;case"touch":l=nG.Touch;break;case"pen":l=nG.Pen}l===nG.Touch?nL[t]===nL.MouseDown?u="TouchStart":nL[t]===nL.MouseUp&&(u="TouchEnd"):nG.Pen}else nC(a)&&(l=nG.Touch);null!==l?(c=l,(u.startsWith("Touch")&&l===nG.Touch||u.startsWith("Mouse")&&l===nG.Mouse)&&(l=null)):nL[t]===nL.Click&&(l=c,c=null);let d=nC(a)?a.changedTouches[0]:a;if(!d)return;let p=n.getId(o),{clientX:h,clientY:f}=d;nH(e)(Object.assign({type:nL[u],id:p,x:h,y:f},null!==l&&{pointerType:l}))};return Object.keys(nL).filter(e=>Number.isNaN(Number(e))&&!e.endsWith("_Departed")&&!1!==o[e]).forEach(e=>{let n=t2(e),r=u(e);if(window.PointerEvent)switch(nL[e]){case nL.MouseDown:case nL.MouseUp:n=n.replace("mouse","pointer");break;case nL.TouchStart:case nL.TouchEnd:return}l.push(nm(n,r,t))}),nH(()=>{l.forEach(e=>e())})}(e),a=nJ(e),o=function({viewportResizeCb:e},{win:t}){let n=-1,r=-1,i=nH(nS(nH(()=>{let t=nw(),i=nk();(n!==t||r!==i)&&(e({width:Number(i),height:Number(t)}),n=t,r=i)}),200));return nm("resize",i,t)}(e,{win:n}),l=function({inputCb:e,doc:t,mirror:n,blockClass:r,blockSelector:i,unblockSelector:s,ignoreClass:a,ignoreSelector:o,maskInputOptions:l,maskInputFn:c,sampling:u,userTriggeredOnInput:d,maskTextClass:p,unmaskTextClass:h,maskTextSelector:f,unmaskTextSelector:_}){function m(e){let n=nZ(e),u=e.isTrusted,m=n&&t5(n.tagName);if("OPTION"===m&&(n=n.parentElement),!n||!m||0>nX.indexOf(m)||nx(n,r,i,s,!0))return;let y=n;if(y.classList.contains(a)||o&&y.matches(o))return;let S=t6(n),b=t4(y,m,S),v=!1,E=t0({maskInputOptions:l,tagName:m,type:S}),T=nh(n,p,f,h,_,E);("radio"===S||"checkbox"===S)&&(v=n.checked),b=t1({isMasked:T,element:n,value:b,maskInputFn:c}),g(n,nH(nK)({text:b,isChecked:v,userTriggered:u},d));let w=n.name;"radio"===S&&w&&v&&t.querySelectorAll(`input[type="radio"][name="${w}"]`).forEach(e=>{if(e!==n){let t=t1({isMasked:T,element:e,value:t4(e,m,S),maskInputFn:c});g(e,nH(nK)({text:t,isChecked:!v,userTriggered:!1},d))}})}function g(t,r){let i=nQ.get(t);if(!i||i.text!==r.text||i.isChecked!==r.isChecked){nQ.set(t,r);let i=n.getId(t);nH(e)(Object.assign(Object.assign({},r),{id:i}))}}let y="last"===u.input?["change"]:["input","change"],S=y.map(e=>nm(e,nH(m),t)),b=t.defaultView;if(!b)return()=>{S.forEach(e=>e())};let v=b.Object.getOwnPropertyDescriptor(b.HTMLInputElement.prototype,"value"),E=[[b.HTMLInputElement.prototype,"value"],[b.HTMLInputElement.prototype,"checked"],[b.HTMLSelectElement.prototype,"value"],[b.HTMLTextAreaElement.prototype,"value"],[b.HTMLSelectElement.prototype,"selectedIndex"],[b.HTMLOptionElement.prototype,"selected"]];return v&&v.set&&S.push(...E.map(e=>nb(e[0],e[1],{set(){nH(m)({target:this,isTrusted:!1})}},!1,b))),nH(()=>{S.forEach(e=>e())})}(e),c=function({mediaInteractionCb:e,blockClass:t,blockSelector:n,unblockSelector:r,mirror:i,sampling:s,doc:a}){let o=nH(a=>nS(nH(s=>{let o=nZ(s);if(!o||nx(o,t,n,r,!0))return;let{currentTime:l,volume:c,muted:u,playbackRate:d}=o;e({type:a,id:i.getId(o),currentTime:l,volume:c,muted:u,playbackRate:d})}),s.media||500)),l=[nm("play",o(0),a),nm("pause",o(1),a),nm("seeked",o(2),a),nm("volumechange",o(3),a),nm("ratechange",o(4),a)];return nH(()=>{l.forEach(e=>e())})}(e),u=function({styleSheetRuleCb:e,mirror:t,stylesheetManager:n},{win:r}){let i,s;if(!r.CSSStyleSheet||!r.CSSStyleSheet.prototype)return()=>{};let a=r.CSSStyleSheet.prototype.insertRule;r.CSSStyleSheet.prototype.insertRule=new Proxy(a,{apply:nH((r,i,s)=>{let[a,o]=s,{id:l,styleId:c}=n1(i,t,n.styleMirror);return(l&&-1!==l||c&&-1!==c)&&e({id:l,styleId:c,adds:[{rule:a,index:o}]}),r.apply(i,s)})});let o=r.CSSStyleSheet.prototype.deleteRule;r.CSSStyleSheet.prototype.deleteRule=new Proxy(o,{apply:nH((r,i,s)=>{let[a]=s,{id:o,styleId:l}=n1(i,t,n.styleMirror);return(o&&-1!==o||l&&-1!==l)&&e({id:o,styleId:l,removes:[{index:a}]}),r.apply(i,s)})}),r.CSSStyleSheet.prototype.replace&&(i=r.CSSStyleSheet.prototype.replace,r.CSSStyleSheet.prototype.replace=new Proxy(i,{apply:nH((r,i,s)=>{let[a]=s,{id:o,styleId:l}=n1(i,t,n.styleMirror);return(o&&-1!==o||l&&-1!==l)&&e({id:o,styleId:l,replace:a}),r.apply(i,s)})})),r.CSSStyleSheet.prototype.replaceSync&&(s=r.CSSStyleSheet.prototype.replaceSync,r.CSSStyleSheet.prototype.replaceSync=new Proxy(s,{apply:nH((r,i,s)=>{let[a]=s,{id:o,styleId:l}=n1(i,t,n.styleMirror);return(o&&-1!==o||l&&-1!==l)&&e({id:o,styleId:l,replaceSync:a}),r.apply(i,s)})}));let l={};n6("CSSGroupingRule")?l.CSSGroupingRule=r.CSSGroupingRule:(n6("CSSMediaRule")&&(l.CSSMediaRule=r.CSSMediaRule),n6("CSSConditionRule")&&(l.CSSConditionRule=r.CSSConditionRule),n6("CSSSupportsRule")&&(l.CSSSupportsRule=r.CSSSupportsRule));let c={};return Object.entries(l).forEach(([r,i])=>{c[r]={insertRule:i.prototype.insertRule,deleteRule:i.prototype.deleteRule},i.prototype.insertRule=new Proxy(c[r].insertRule,{apply:nH((r,i,s)=>{let[a,o]=s,{id:l,styleId:c}=n1(i.parentStyleSheet,t,n.styleMirror);return(l&&-1!==l||c&&-1!==c)&&e({id:l,styleId:c,adds:[{rule:a,index:[...n0(i),o||0]}]}),r.apply(i,s)})}),i.prototype.deleteRule=new Proxy(c[r].deleteRule,{apply:nH((r,i,s)=>{let[a]=s,{id:o,styleId:l}=n1(i.parentStyleSheet,t,n.styleMirror);return(o&&-1!==o||l&&-1!==l)&&e({id:o,styleId:l,removes:[{index:[...n0(i),a]}]}),r.apply(i,s)})})}),nH(()=>{r.CSSStyleSheet.prototype.insertRule=a,r.CSSStyleSheet.prototype.deleteRule=o,i&&(r.CSSStyleSheet.prototype.replace=i),s&&(r.CSSStyleSheet.prototype.replaceSync=s),Object.entries(l).forEach(([e,t])=>{t.prototype.insertRule=c[e].insertRule,t.prototype.deleteRule=c[e].deleteRule})})}(e,{win:n}),d=n2(e,e.doc),p=function({styleDeclarationCb:e,mirror:t,ignoreCSSAttributes:n,stylesheetManager:r},{win:i}){let s=i.CSSStyleDeclaration.prototype.setProperty;i.CSSStyleDeclaration.prototype.setProperty=new Proxy(s,{apply:nH((i,a,o)=>{var l;let[c,u,d]=o;if(n.has(c))return s.apply(a,[c,u,d]);let{id:p,styleId:h}=n1(null===(l=a.parentRule)||void 0===l?void 0:l.parentStyleSheet,t,r.styleMirror);return(p&&-1!==p||h&&-1!==h)&&e({id:p,styleId:h,set:{property:c,value:u,priority:d},index:n0(a.parentRule)}),i.apply(a,o)})});let a=i.CSSStyleDeclaration.prototype.removeProperty;return i.CSSStyleDeclaration.prototype.removeProperty=new Proxy(a,{apply:nH((i,s,o)=>{var l;let[c]=o;if(n.has(c))return a.apply(s,[c]);let{id:u,styleId:d}=n1(null===(l=s.parentRule)||void 0===l?void 0:l.parentStyleSheet,t,r.styleMirror);return(u&&-1!==u||d&&-1!==d)&&e({id:u,styleId:d,remove:{property:c},index:n0(s.parentRule)}),i.apply(s,o)})}),nH(()=>{i.CSSStyleDeclaration.prototype.setProperty=s,i.CSSStyleDeclaration.prototype.removeProperty=a})}(e,{win:n}),h=e.collectFonts?function({fontCb:e,doc:t}){let n=t.defaultView;if(!n)return()=>{};let r=[],i=new WeakMap,s=n.FontFace;n.FontFace=function(e,t,n){let r=new s(e,t,n);return i.set(r,{family:e,buffer:"string"!=typeof t,descriptors:n,fontSource:"string"==typeof t?t:JSON.stringify(Array.from(new Uint8Array(t)))}),r};let a=nv(t.fonts,"add",function(t){return function(n){return setTimeout(nH(()=>{let t=i.get(n);t&&(e(t),i.delete(n))}),0),t.apply(this,[n])}});return r.push(()=>{n.FontFace=s}),r.push(a),nH(()=>{r.forEach(e=>e())})}(e):()=>{},f=function(e){let{doc:t,mirror:n,blockClass:r,blockSelector:i,unblockSelector:s,selectionCb:a}=e,o=!0,l=nH(()=>{let e=t.getSelection();if(!e||o&&(null==e?void 0:e.isCollapsed))return;o=e.isCollapsed||!1;let l=[],c=e.rangeCount||0;for(let t=0;t<c;t++){let a=e.getRangeAt(t),{startContainer:o,startOffset:c,endContainer:u,endOffset:d}=a,p=nx(o,r,i,s,!0)||nx(u,r,i,s,!0);p||l.push({start:n.getId(o),startOffset:c,end:n.getId(u),endOffset:d})}a({ranges:l})});return l(),nm("selectionchange",l)}(e),_=function({doc:e,customElementCb:t}){let n=e.defaultView;if(!n||!n.customElements)return()=>{};let r=nv(n.customElements,"define",function(e){return function(n,r,i){try{t({define:{name:n}})}catch(e){}return e.apply(this,[n,r,i])}});return r}(e),m=[];for(let t of e.plugins)m.push(t.observer(t.callback,n,t.options));return nH(()=>{nV.forEach(e=>e.reset()),r.disconnect(),i(),s(),a(),o(),l(),c(),u(),d(),p(),h(),f(),_(),m.forEach(e=>e())})}function n3(e){return void 0!==window[e]}function n6(e){return!!(void 0!==window[e]&&window[e].prototype&&"insertRule"in window[e].prototype&&"deleteRule"in window[e].prototype)}class n4{constructor(e){this.generateIdFn=e,this.iframeIdToRemoteIdMap=new WeakMap,this.iframeRemoteIdToIdMap=new WeakMap}getId(e,t,n,r){let i=n||this.getIdToRemoteIdMap(e),s=r||this.getRemoteIdToIdMap(e),a=i.get(t);return a||(a=this.generateIdFn(),i.set(t,a),s.set(a,t)),a}getIds(e,t){let n=this.getIdToRemoteIdMap(e),r=this.getRemoteIdToIdMap(e);return t.map(t=>this.getId(e,t,n,r))}getRemoteId(e,t,n){let r=n||this.getRemoteIdToIdMap(e);if("number"!=typeof t)return t;let i=r.get(t);return i||-1}getRemoteIds(e,t){let n=this.getRemoteIdToIdMap(e);return t.map(t=>this.getRemoteId(e,t,n))}reset(e){if(!e){this.iframeIdToRemoteIdMap=new WeakMap,this.iframeRemoteIdToIdMap=new WeakMap;return}this.iframeIdToRemoteIdMap.delete(e),this.iframeRemoteIdToIdMap.delete(e)}getIdToRemoteIdMap(e){let t=this.iframeIdToRemoteIdMap.get(e);return t||(t=new Map,this.iframeIdToRemoteIdMap.set(e,t)),t}getRemoteIdToIdMap(e){let t=this.iframeRemoteIdToIdMap.get(e);return t||(t=new Map,this.iframeRemoteIdToIdMap.set(e,t)),t}}class n9{constructor(e){this.iframes=new WeakMap,this.crossOriginIframeMap=new WeakMap,this.crossOriginIframeMirror=new n4(t7),this.crossOriginIframeRootIdMap=new WeakMap,this.mutationCb=e.mutationCb,this.wrappedEmit=e.wrappedEmit,this.stylesheetManager=e.stylesheetManager,this.recordCrossOriginIframes=e.recordCrossOriginIframes,this.crossOriginIframeStyleMirror=new n4(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror)),this.mirror=e.mirror,this.recordCrossOriginIframes&&window.addEventListener("message",this.handleMessage.bind(this))}addIframe(e){this.iframes.set(e,!0),e.contentWindow&&this.crossOriginIframeMap.set(e.contentWindow,e)}addLoadListener(e){this.loadListener=e}attachIframe(e,t){var n;this.mutationCb({adds:[{parentId:this.mirror.getId(e),nextId:null,node:t}],removes:[],texts:[],attributes:[],isAttachIframe:!0}),null===(n=this.loadListener)||void 0===n||n.call(this,e),e.contentDocument&&e.contentDocument.adoptedStyleSheets&&e.contentDocument.adoptedStyleSheets.length>0&&this.stylesheetManager.adoptStyleSheets(e.contentDocument.adoptedStyleSheets,this.mirror.getId(e.contentDocument))}handleMessage(e){if("rrweb"!==e.data.type||e.origin!==e.data.origin)return;let t=e.source;if(!t)return;let n=this.crossOriginIframeMap.get(e.source);if(!n)return;let r=this.transformCrossOriginEvent(n,e.data.event);r&&this.wrappedEmit(r,e.data.isCheckout)}transformCrossOriginEvent(e,t){var n;switch(t.type){case nU.FullSnapshot:{this.crossOriginIframeMirror.reset(e),this.crossOriginIframeStyleMirror.reset(e),this.replaceIdOnNode(t.data.node,e);let n=t.data.node.id;return this.crossOriginIframeRootIdMap.set(e,n),this.patchRootIdOnNode(t.data.node,n),{timestamp:t.timestamp,type:nU.IncrementalSnapshot,data:{source:nM.Mutation,adds:[{parentId:this.mirror.getId(e),nextId:null,node:t.data.node}],removes:[],texts:[],attributes:[],isAttachIframe:!0}}}case nU.Meta:case nU.Load:case nU.DomContentLoaded:break;case nU.Plugin:return t;case nU.Custom:return this.replaceIds(t.data.payload,e,["id","parentId","previousId","nextId"]),t;case nU.IncrementalSnapshot:switch(t.data.source){case nM.Mutation:return t.data.adds.forEach(t=>{this.replaceIds(t,e,["parentId","nextId","previousId"]),this.replaceIdOnNode(t.node,e);let n=this.crossOriginIframeRootIdMap.get(e);n&&this.patchRootIdOnNode(t.node,n)}),t.data.removes.forEach(t=>{this.replaceIds(t,e,["parentId","id"])}),t.data.attributes.forEach(t=>{this.replaceIds(t,e,["id"])}),t.data.texts.forEach(t=>{this.replaceIds(t,e,["id"])}),t;case nM.Drag:case nM.TouchMove:case nM.MouseMove:return t.data.positions.forEach(t=>{this.replaceIds(t,e,["id"])}),t;case nM.ViewportResize:return!1;case nM.MediaInteraction:case nM.MouseInteraction:case nM.Scroll:case nM.CanvasMutation:case nM.Input:return this.replaceIds(t.data,e,["id"]),t;case nM.StyleSheetRule:case nM.StyleDeclaration:return this.replaceIds(t.data,e,["id"]),this.replaceStyleIds(t.data,e,["styleId"]),t;case nM.Font:return t;case nM.Selection:return t.data.ranges.forEach(t=>{this.replaceIds(t,e,["start","end"])}),t;case nM.AdoptedStyleSheet:return this.replaceIds(t.data,e,["id"]),this.replaceStyleIds(t.data,e,["styleIds"]),null===(n=t.data.styles)||void 0===n||n.forEach(t=>{this.replaceStyleIds(t,e,["styleId"])}),t}}return!1}replace(e,t,n,r){for(let i of r)(Array.isArray(t[i])||"number"==typeof t[i])&&(Array.isArray(t[i])?t[i]=e.getIds(n,t[i]):t[i]=e.getId(n,t[i]));return t}replaceIds(e,t,n){return this.replace(this.crossOriginIframeMirror,e,t,n)}replaceStyleIds(e,t,n){return this.replace(this.crossOriginIframeStyleMirror,e,t,n)}replaceIdOnNode(e,t){this.replaceIds(e,t,["id","rootId"]),"childNodes"in e&&e.childNodes.forEach(e=>{this.replaceIdOnNode(e,t)})}patchRootIdOnNode(e,t){e.type===M.Document||e.rootId||(e.rootId=t),"childNodes"in e&&e.childNodes.forEach(e=>{this.patchRootIdOnNode(e,t)})}}class n8{constructor(e){this.shadowDoms=new WeakSet,this.restoreHandlers=[],this.mutationCb=e.mutationCb,this.scrollCb=e.scrollCb,this.bypassOptions=e.bypassOptions,this.mirror=e.mirror,this.init()}init(){this.reset(),this.patchAttachShadow(Element,document)}addShadowRoot(e,t){if(!tJ(e)||this.shadowDoms.has(e))return;this.shadowDoms.add(e);let n=nq(Object.assign(Object.assign({},this.bypassOptions),{doc:t,mutationCb:this.mutationCb,mirror:this.mirror,shadowDomManager:this}),e);this.restoreHandlers.push(()=>n.disconnect()),this.restoreHandlers.push(nJ(Object.assign(Object.assign({},this.bypassOptions),{scrollCb:this.scrollCb,doc:e,mirror:this.mirror}))),setTimeout(()=>{e.adoptedStyleSheets&&e.adoptedStyleSheets.length>0&&this.bypassOptions.stylesheetManager.adoptStyleSheets(e.adoptedStyleSheets,this.mirror.getId(e.host)),this.restoreHandlers.push(n2({mirror:this.mirror,stylesheetManager:this.bypassOptions.stylesheetManager},e))},0)}observeAttachShadow(e){e.contentWindow&&e.contentDocument&&this.patchAttachShadow(e.contentWindow.Element,e.contentDocument)}patchAttachShadow(e,t){let n=this;this.restoreHandlers.push(nv(e.prototype,"attachShadow",function(e){return function(r){let i=e.call(this,r);return this.shadowRoot&&nB(this)&&n.addShadowRoot(this.shadowRoot,t),i}}))}reset(){this.restoreHandlers.forEach(e=>{try{e()}catch(e){}}),this.restoreHandlers=[],this.shadowDoms=new WeakSet}}for(var n7="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",re="undefined"==typeof Uint8Array?[]:new Uint8Array(256),rt=0;rt<n7.length;rt++)re[n7.charCodeAt(rt)]=rt;/*
 * base64-arraybuffer 1.0.1 <https://github.com/niklasvh/base64-arraybuffer>
 * Copyright (c) 2021 Niklas von Hertzen <https://hertzen.com>
 * Released under MIT License
 */var rn=function(e){var t,n=new Uint8Array(e),r=n.length,i="";for(t=0;t<r;t+=3)i+=n7[n[t]>>2]+n7[(3&n[t])<<4|n[t+1]>>4]+n7[(15&n[t+1])<<2|n[t+2]>>6]+n7[63&n[t+2]];return r%3==2?i=i.substring(0,i.length-1)+"=":r%3==1&&(i=i.substring(0,i.length-2)+"=="),i};const rr=new Map,ri=(e,t,n)=>{let r;if(!e||!(ra(e,t)||"object"==typeof e))return;let i=e.constructor.name,s=((r=rr.get(n))||(r=new Map,rr.set(n,r)),r.has(i)||r.set(i,[]),r.get(i)),a=s.indexOf(e);return -1===a&&(a=s.length,s.push(e)),a},rs=(e,t,n)=>[...e].map(e=>(function e(t,n,r){if(t instanceof Array)return t.map(t=>e(t,n,r));if(null===t);else if(t instanceof Float32Array||t instanceof Float64Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Uint8Array||t instanceof Uint16Array||t instanceof Int16Array||t instanceof Int8Array||t instanceof Uint8ClampedArray){let e=t.constructor.name;return{rr_type:e,args:[Object.values(t)]}}else if(t instanceof ArrayBuffer){let e=t.constructor.name,n=rn(t);return{rr_type:e,base64:n}}else if(t instanceof DataView){let i=t.constructor.name;return{rr_type:i,args:[e(t.buffer,n,r),t.byteOffset,t.byteLength]}}else if(t instanceof HTMLImageElement){let e=t.constructor.name,{src:n}=t;return{rr_type:e,src:n}}else if(t instanceof HTMLCanvasElement){let e=t.toDataURL();return{rr_type:"HTMLImageElement",src:e}}else if(t instanceof ImageData){let i=t.constructor.name;return{rr_type:i,args:[e(t.data,n,r),t.width,t.height]}}else if(ra(t,n)||"object"==typeof t){let e=t.constructor.name,i=ri(t,n,r);return{rr_type:e,index:i}}return t})(e,t,n)),ra=(e,t)=>{let n=["WebGLActiveInfo","WebGLBuffer","WebGLFramebuffer","WebGLProgram","WebGLRenderbuffer","WebGLShader","WebGLShaderPrecisionFormat","WebGLTexture","WebGLUniformLocation","WebGLVertexArrayObject","WebGLVertexArrayObjectOES"].filter(e=>"function"==typeof t[e]);return!!n.find(n=>e instanceof t[n])};function ro(e,t,n,r,i){let s=[];try{let a=nv(e.HTMLCanvasElement.prototype,"getContext",function(e){return function(s,...a){if(!nx(this,t,n,r,!0)){let e="experimental-webgl"===s?"webgl":s;if("__context"in this||(this.__context=e),i&&["webgl","webgl2"].includes(e)){if(a[0]&&"object"==typeof a[0]){let e=a[0];e.preserveDrawingBuffer||(e.preserveDrawingBuffer=!0)}else a.splice(0,1,{preserveDrawingBuffer:!0})}}return e.apply(this,[s,...a])}});s.push(a)}catch(e){console.error("failed to patch HTMLCanvasElement.prototype.getContext")}return()=>{s.forEach(e=>e())}}function rl(e,t,n,r,i,s,a,o){let l=[],c=Object.getOwnPropertyNames(e);for(let a of c)if(!["isContextLost","canvas","drawingBufferWidth","drawingBufferHeight"].includes(a))try{if("function"!=typeof e[a])continue;let c=nv(e,a,function(e){return function(...l){let c=e.apply(this,l);if(ri(c,o,this),"tagName"in this.canvas&&!nx(this.canvas,r,i,s,!0)){let e=rs([...l],o,this),r={type:t,property:a,args:e};n(this.canvas,r)}return c}});l.push(c)}catch(i){let r=nb(e,a,{set(e){n(this.canvas,{type:t,property:a,args:[e],setter:!0})}});l.push(r)}return l}var rc=function(e){var t,n,r,i;return D=D||(n=(t=function(e,t){var n=atob(e);if(t){for(var r=new Uint8Array(n.length),i=0,s=n.length;i<s;++i)r[i]=n.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(r.buffer))}return n}("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLg0KDQogICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55DQogICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLg0KDQogICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEgNCiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkNCiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsDQogICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NDQogICAgTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1INCiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SDQogICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS4NCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLw0KDQogICAgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikgew0KICAgICAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH0NCiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7DQogICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9DQogICAgICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvclsidGhyb3ciXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9DQogICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfQ0KICAgICAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpOw0KICAgICAgICB9KTsNCiAgICB9CgogICAgLyoKICAgICAqIGJhc2U2NC1hcnJheWJ1ZmZlciAxLjAuMSA8aHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlcj4KICAgICAqIENvcHlyaWdodCAoYykgMjAyMSBOaWtsYXMgdm9uIEhlcnR6ZW4gPGh0dHBzOi8vaGVydHplbi5jb20+CiAgICAgKiBSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZQogICAgICovCiAgICB2YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7CiAgICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguCiAgICB2YXIgbG9va3VwID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gW10gOiBuZXcgVWludDhBcnJheSgyNTYpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykgewogICAgICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7CiAgICB9CiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24gKGFycmF5YnVmZmVyKSB7CiAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLCBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9ICcnOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMykgewogICAgICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07CiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTsKICAgICAgICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07CiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107CiAgICAgICAgfQogICAgICAgIGlmIChsZW4gJSAzID09PSAyKSB7CiAgICAgICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgJz0nOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7CiAgICAgICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgJz09JzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJhc2U2NDsKICAgIH07CgogICAgY29uc3QgbGFzdEJsb2JNYXAgPSBuZXcgTWFwKCk7DQogICAgY29uc3QgdHJhbnNwYXJlbnRCbG9iTWFwID0gbmV3IE1hcCgpOw0KICAgIGZ1bmN0aW9uIGdldFRyYW5zcGFyZW50QmxvYkZvcih3aWR0aCwgaGVpZ2h0LCBkYXRhVVJMT3B0aW9ucykgew0KICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgew0KICAgICAgICAgICAgY29uc3QgaWQgPSBgJHt3aWR0aH0tJHtoZWlnaHR9YDsNCiAgICAgICAgICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBnbG9iYWxUaGlzKSB7DQogICAgICAgICAgICAgICAgaWYgKHRyYW5zcGFyZW50QmxvYk1hcC5oYXMoaWQpKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNwYXJlbnRCbG9iTWFwLmdldChpZCk7DQogICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2NyZWVuID0gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTsNCiAgICAgICAgICAgICAgICBvZmZzY3JlZW4uZ2V0Q29udGV4dCgnMmQnKTsNCiAgICAgICAgICAgICAgICBjb25zdCBibG9iID0geWllbGQgb2Zmc2NyZWVuLmNvbnZlcnRUb0Jsb2IoZGF0YVVSTE9wdGlvbnMpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0geWllbGQgYmxvYi5hcnJheUJ1ZmZlcigpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NCA9IGVuY29kZShhcnJheUJ1ZmZlcik7DQogICAgICAgICAgICAgICAgdHJhbnNwYXJlbnRCbG9iTWFwLnNldChpZCwgYmFzZTY0KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTY0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICcnOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQogICAgY29uc3Qgd29ya2VyID0gc2VsZjsNCiAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsNCiAgICAgICAgICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBnbG9iYWxUaGlzKSB7DQogICAgICAgICAgICAgICAgY29uc3QgeyBpZCwgYml0bWFwLCB3aWR0aCwgaGVpZ2h0LCBkYXRhVVJMT3B0aW9ucyB9ID0gZS5kYXRhOw0KICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50QmFzZTY0ID0gZ2V0VHJhbnNwYXJlbnRCbG9iRm9yKHdpZHRoLCBoZWlnaHQsIGRhdGFVUkxPcHRpb25zKTsNCiAgICAgICAgICAgICAgICBjb25zdCBvZmZzY3JlZW4gPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHdpZHRoLCBoZWlnaHQpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IG9mZnNjcmVlbi5nZXRDb250ZXh0KCcyZCcpOw0KICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYml0bWFwLCAwLCAwKTsNCiAgICAgICAgICAgICAgICBiaXRtYXAuY2xvc2UoKTsNCiAgICAgICAgICAgICAgICBjb25zdCBibG9iID0geWllbGQgb2Zmc2NyZWVuLmNvbnZlcnRUb0Jsb2IoZGF0YVVSTE9wdGlvbnMpOw0KICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBibG9iLnR5cGU7DQogICAgICAgICAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSB5aWVsZCBibG9iLmFycmF5QnVmZmVyKCk7DQogICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gZW5jb2RlKGFycmF5QnVmZmVyKTsNCiAgICAgICAgICAgICAgICBpZiAoIWxhc3RCbG9iTWFwLmhhcyhpZCkgJiYgKHlpZWxkIHRyYW5zcGFyZW50QmFzZTY0KSA9PT0gYmFzZTY0KSB7DQogICAgICAgICAgICAgICAgICAgIGxhc3RCbG9iTWFwLnNldChpZCwgYmFzZTY0KTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5wb3N0TWVzc2FnZSh7IGlkIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAobGFzdEJsb2JNYXAuZ2V0KGlkKSA9PT0gYmFzZTY0KQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd29ya2VyLnBvc3RNZXNzYWdlKHsgaWQgfSk7DQogICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHsNCiAgICAgICAgICAgICAgICAgICAgaWQsDQogICAgICAgICAgICAgICAgICAgIHR5cGUsDQogICAgICAgICAgICAgICAgICAgIGJhc2U2NCwNCiAgICAgICAgICAgICAgICAgICAgd2lkdGgsDQogICAgICAgICAgICAgICAgICAgIGhlaWdodCwNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBsYXN0QmxvYk1hcC5zZXQoaWQsIGJhc2U2NCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2VyLnBvc3RNZXNzYWdlKHsgaWQ6IGUuZGF0YS5pZCB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfTsKCn0pKCk7Cgo=",!1)).indexOf("\n",10)+1,r=t.substring(n)+"",i=new Blob([r],{type:"application/javascript"}),URL.createObjectURL(i)),new Worker(D,e)};class ru{reset(){this.pendingCanvasMutations.clear(),this.resetObservers&&this.resetObservers()}freeze(){this.frozen=!0}unfreeze(){this.frozen=!1}lock(){this.locked=!0}unlock(){this.locked=!1}constructor(e){this.pendingCanvasMutations=new Map,this.rafStamps={latestId:0,invokeId:null},this.frozen=!1,this.locked=!1,this.processMutation=(e,t)=>{let n=this.rafStamps.invokeId&&this.rafStamps.latestId!==this.rafStamps.invokeId;(n||!this.rafStamps.invokeId)&&(this.rafStamps.invokeId=this.rafStamps.latestId),this.pendingCanvasMutations.has(e)||this.pendingCanvasMutations.set(e,[]),this.pendingCanvasMutations.get(e).push(t)};let{sampling:t="all",win:n,blockClass:r,blockSelector:i,unblockSelector:s,recordCanvas:a,dataURLOptions:o}=e;this.mutationCb=e.mutationCb,this.mirror=e.mirror,a&&"all"===t&&this.initCanvasMutationObserver(n,r,i,s),a&&"number"==typeof t&&this.initCanvasFPSObserver(t,n,r,i,s,{dataURLOptions:o})}initCanvasFPSObserver(e,t,n,r,i,s){let a;let o=ro(t,n,r,i,!0),l=new Map,c=new rc;c.onmessage=e=>{let{id:t}=e.data;if(l.set(t,!1),!("base64"in e.data))return;let{base64:n,type:r,width:i,height:s}=e.data;this.mutationCb({id:t,type:nP["2D"],commands:[{property:"clearRect",args:[0,0,i,s]},{property:"drawImage",args:[{rr_type:"ImageBitmap",args:[{rr_type:"Blob",data:[{rr_type:"ArrayBuffer",base64:n}],type:r}]},0,0]}]})};let u=1e3/e,d=0,p=()=>{let e=[];return t.document.querySelectorAll("canvas").forEach(t=>{nx(t,n,r,i,!0)||e.push(t)}),e},h=e=>{if(d&&e-d<u){a=requestAnimationFrame(h);return}d=e,p().forEach(e=>{var t,n,r,i;return t=this,n=void 0,r=void 0,i=function*(){var t;let n=this.mirror.getId(e);if(l.get(n))return;if(l.set(n,!0),["webgl","webgl2"].includes(e.__context)){let n=e.getContext(e.__context);(null===(t=null==n?void 0:n.getContextAttributes())||void 0===t?void 0:t.preserveDrawingBuffer)===!1&&n.clear(n.COLOR_BUFFER_BIT)}let r=yield createImageBitmap(e);c.postMessage({id:n,bitmap:r,width:e.width,height:e.height,dataURLOptions:s.dataURLOptions},[r])},new(r||(r=Promise))(function(e,s){function a(e){try{l(i.next(e))}catch(e){s(e)}}function o(e){try{l(i.throw(e))}catch(e){s(e)}}function l(t){var n;t.done?e(t.value):((n=t.value)instanceof r?n:new r(function(e){e(n)})).then(a,o)}l((i=i.apply(t,n||[])).next())})}),a=requestAnimationFrame(h)};a=requestAnimationFrame(h),this.resetObservers=()=>{o(),cancelAnimationFrame(a)}}initCanvasMutationObserver(e,t,n,r){this.startRAFTimestamping(),this.startPendingCanvasMutationFlusher();let i=ro(e,t,n,r,!1),s=function(e,t,n,r,i){let s=[],a=Object.getOwnPropertyNames(t.CanvasRenderingContext2D.prototype);for(let o of a)try{if("function"!=typeof t.CanvasRenderingContext2D.prototype[o])continue;let a=nv(t.CanvasRenderingContext2D.prototype,o,function(s){return function(...a){return nx(this.canvas,n,r,i,!0)||setTimeout(()=>{let n=rs([...a],t,this);e(this.canvas,{type:nP["2D"],property:o,args:n})},0),s.apply(this,a)}});s.push(a)}catch(r){let n=nb(t.CanvasRenderingContext2D.prototype,o,{set(t){e(this.canvas,{type:nP["2D"],property:o,args:[t],setter:!0})}});s.push(n)}return()=>{s.forEach(e=>e())}}(this.processMutation.bind(this),e,t,n,r),a=function(e,t,n,r,i,s){let a=[];return a.push(...rl(t.WebGLRenderingContext.prototype,nP.WebGL,e,n,r,i,s,t)),void 0!==t.WebGL2RenderingContext&&a.push(...rl(t.WebGL2RenderingContext.prototype,nP.WebGL2,e,n,r,i,s,t)),()=>{a.forEach(e=>e())}}(this.processMutation.bind(this),e,t,n,r,this.mirror);this.resetObservers=()=>{i(),s(),a()}}startPendingCanvasMutationFlusher(){requestAnimationFrame(()=>this.flushPendingCanvasMutations())}startRAFTimestamping(){let e=t=>{this.rafStamps.latestId=t,requestAnimationFrame(e)};requestAnimationFrame(e)}flushPendingCanvasMutations(){this.pendingCanvasMutations.forEach((e,t)=>{let n=this.mirror.getId(t);this.flushPendingCanvasMutationFor(t,n)}),requestAnimationFrame(()=>this.flushPendingCanvasMutations())}flushPendingCanvasMutationFor(e,t){if(this.frozen||this.locked)return;let n=this.pendingCanvasMutations.get(e);if(!n||-1===t)return;let r=n.map(e=>{let t=/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&0>t.indexOf(r)&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)0>t.indexOf(r[i])&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]]);return n}(e,["type"]);return t}),{type:i}=n[0];this.mutationCb({id:t,type:i,commands:r}),this.pendingCanvasMutations.delete(e)}}class rd{constructor(e){this.trackedLinkElements=new WeakSet,this.styleMirror=new nD,this.mutationCb=e.mutationCb,this.adoptedStyleSheetCb=e.adoptedStyleSheetCb}attachLinkElement(e,t){"_cssText"in t.attributes&&this.mutationCb({adds:[],removes:[],texts:[],attributes:[{id:t.id,attributes:t.attributes}]}),this.trackLinkElement(e)}trackLinkElement(e){this.trackedLinkElements.has(e)||(this.trackedLinkElements.add(e),this.trackStylesheetInLinkElement(e))}adoptStyleSheets(e,t){if(0===e.length)return;let n={id:t,styleIds:[]},r=[];for(let t of e){let e;this.styleMirror.has(t)?e=this.styleMirror.getId(t):(e=this.styleMirror.add(t),r.push({styleId:e,rules:Array.from(t.rules||CSSRule,(e,t)=>({rule:tX(e),index:t}))})),n.styleIds.push(e)}r.length>0&&(n.styles=r),this.adoptedStyleSheetCb(n)}reset(){this.styleMirror.reset(),this.trackedLinkElements=new WeakSet}trackStylesheetInLinkElement(e){}}class rp{constructor(){this.nodeMap=new WeakMap,this.loop=!0,this.periodicallyClear()}periodicallyClear(){requestAnimationFrame(()=>{this.clear(),this.loop&&this.periodicallyClear()})}inOtherBuffer(e,t){let n=this.nodeMap.get(e);return n&&Array.from(n).some(e=>e!==t)}add(e,t){this.nodeMap.set(e,(this.nodeMap.get(e)||new Set).add(t))}clear(){this.nodeMap=new WeakMap}destroy(){this.loop=!1}}function rh(e){return Object.assign(Object.assign({},e),{timestamp:nE()})}let rf=!1;const r_=new tQ;function rm(e={}){let t;let{emit:n,checkoutEveryNms:r,checkoutEveryNth:i,blockClass:c="rr-block",blockSelector:u=null,unblockSelector:d=null,ignoreClass:p="rr-ignore",ignoreSelector:h=null,maskAllText:f=!1,maskTextClass:_="rr-mask",unmaskTextClass:m=null,maskTextSelector:g=null,unmaskTextSelector:y=null,inlineStylesheet:S=!0,maskAllInputs:b,maskInputOptions:v,slimDOMOptions:E,maskAttributeFn:T,maskInputFn:w,maskTextFn:k,hooks:x,packFn:I,sampling:C={},dataURLOptions:R={},mousemoveWait:N,recordCanvas:A=!1,recordCrossOriginIframes:D=!1,recordAfter:O="DOMContentLoaded"===e.recordAfter?e.recordAfter:"load",userTriggeredOnInput:B=!1,collectFonts:U=!1,inlineImages:M=!1,plugins:L,keepIframeSrcFn:G=()=>!1,ignoreCSSAttributes:P=new Set([]),errorHandler:Y,onMutation:F}=e;s=Y;let j=!D||window.parent===window,z=!1;if(!j)try{window.parent.document&&(z=!1)}catch(e){z=!0}if(j&&!n)throw Error("emit function is required");void 0!==N&&void 0===C.mousemove&&(C.mousemove=N),r_.reset();let W=!0===b?{color:!0,date:!0,"datetime-local":!0,email:!0,month:!0,number:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0,textarea:!0,select:!0,radio:!0,checkbox:!0}:void 0!==v?v:{},$=!0===E||"all"===E?{script:!0,comment:!0,headFavicon:!0,headWhitespace:!0,headMetaSocial:!0,headMetaRobots:!0,headMetaHttpEquiv:!0,headMetaVerification:!0,headMetaAuthorship:"all"===E,headMetaDescKeywords:"all"===E}:E||{};!function(e=window){"NodeList"in e&&!e.NodeList.prototype.forEach&&(e.NodeList.prototype.forEach=Array.prototype.forEach),"DOMTokenList"in e&&!e.DOMTokenList.prototype.forEach&&(e.DOMTokenList.prototype.forEach=Array.prototype.forEach),Node.prototype.contains||(Node.prototype.contains=(...e)=>{let t=e[0];if(!(0 in e))throw TypeError("1 argument is required");do if(this===t)return!0;while(t=t&&t.parentNode)return!1})}();let H=0,V=e=>{for(let t of L||[])t.eventProcessor&&(e=t.eventProcessor(e));return I&&!z&&(e=I(e)),e};a=(e,s)=>{var a;if((null===(a=nV[0])||void 0===a?void 0:a.isFrozen())&&e.type!==nU.FullSnapshot&&!(e.type===nU.IncrementalSnapshot&&e.data.source===nM.Mutation)&&nV.forEach(e=>e.unfreeze()),j)null==n||n(V(e),s);else if(z){let t={type:"rrweb",event:V(e),origin:window.location.origin,isCheckout:s};window.parent.postMessage(t,"*")}if(e.type===nU.FullSnapshot)t=e,H=0;else if(e.type===nU.IncrementalSnapshot){if(e.data.source===nM.Mutation&&e.data.isAttachIframe)return;H++;let n=i&&H>=i,s=r&&e.timestamp-t.timestamp>r;(n||s)&&o(!0)}};let Z=e=>{a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.Mutation},e)}))},q=e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.Scroll},e)})),J=e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.CanvasMutation},e)})),K=new rd({mutationCb:Z,adoptedStyleSheetCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.AdoptedStyleSheet},e)}))}),X=new n9({mirror:r_,mutationCb:Z,stylesheetManager:K,recordCrossOriginIframes:D,wrappedEmit:a});for(let e of L||[])e.getMirror&&e.getMirror({nodeMirror:r_,crossOriginIframeMirror:X.crossOriginIframeMirror,crossOriginIframeStyleMirror:X.crossOriginIframeStyleMirror});let Q=new rp;l=new ru({recordCanvas:A,mutationCb:J,win:window,blockClass:c,blockSelector:u,unblockSelector:d,mirror:r_,sampling:C.canvas,dataURLOptions:R});let ee=new n8({mutationCb:Z,scrollCb:q,bypassOptions:{onMutation:F,blockClass:c,blockSelector:u,unblockSelector:d,maskAllText:f,maskTextClass:_,unmaskTextClass:m,maskTextSelector:g,unmaskTextSelector:y,inlineStylesheet:S,maskInputOptions:W,dataURLOptions:R,maskAttributeFn:T,maskTextFn:k,maskInputFn:w,recordCanvas:A,inlineImages:M,sampling:C,slimDOMOptions:$,iframeManager:X,stylesheetManager:K,canvasManager:l,keepIframeSrcFn:G,processedNodeManager:Q},mirror:r_});o=(e=!1)=>{a(rh({type:nU.Meta,data:{href:window.location.href,width:nk(),height:nw()}}),e),K.reset(),ee.init(),nV.forEach(e=>e.lock());let t=function(e,t){let{mirror:n=new tQ,blockClass:r="rr-block",blockSelector:i=null,unblockSelector:s=null,maskAllText:a=!1,maskTextClass:o="rr-mask",unmaskTextClass:l=null,maskTextSelector:c=null,unmaskTextSelector:u=null,inlineStylesheet:d=!0,inlineImages:p=!1,recordCanvas:h=!1,maskAllInputs:f=!1,maskAttributeFn:_,maskTextFn:m,maskInputFn:g,slimDOM:y=!1,dataURLOptions:S,preserveWhiteSpace:b,onSerialize:v,onIframeLoad:E,iframeLoadTimeout:T,onStylesheetLoad:w,stylesheetLoadTimeout:k,keepIframeSrcFn:x=()=>!1}=t||{};return n_(e,{doc:e,mirror:n,blockClass:r,blockSelector:i,unblockSelector:s,maskAllText:a,maskTextClass:o,unmaskTextClass:l,maskTextSelector:c,unmaskTextSelector:u,skipChild:!1,inlineStylesheet:d,maskInputOptions:!0===f?{color:!0,date:!0,"datetime-local":!0,email:!0,month:!0,number:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0,textarea:!0,select:!0}:!1===f?{}:f,maskAttributeFn:_,maskTextFn:m,maskInputFn:g,slimDOMOptions:!0===y||"all"===y?{script:!0,comment:!0,headFavicon:!0,headWhitespace:!0,headMetaDescKeywords:"all"===y,headMetaSocial:!0,headMetaRobots:!0,headMetaHttpEquiv:!0,headMetaAuthorship:!0,headMetaVerification:!0}:!1===y?{}:y,dataURLOptions:S,inlineImages:p,recordCanvas:h,preserveWhiteSpace:b,onSerialize:v,onIframeLoad:E,iframeLoadTimeout:T,onStylesheetLoad:w,stylesheetLoadTimeout:k,keepIframeSrcFn:x,newlyAddedElement:!1})}(document,{mirror:r_,blockClass:c,blockSelector:u,unblockSelector:d,maskAllText:f,maskTextClass:_,unmaskTextClass:m,maskTextSelector:g,unmaskTextSelector:y,inlineStylesheet:S,maskAllInputs:W,maskAttributeFn:T,maskInputFn:w,maskTextFn:k,slimDOM:$,dataURLOptions:R,recordCanvas:A,inlineImages:M,onSerialize:e=>{nR(e,r_)&&X.addIframe(e),nN(e,r_)&&K.trackLinkElement(e),nA(e)&&ee.addShadowRoot(e.shadowRoot,document)},onIframeLoad:(e,t)=>{X.attachIframe(e,t),ee.observeAttachShadow(e)},onStylesheetLoad:(e,t)=>{K.attachLinkElement(e,t)},keepIframeSrcFn:G});if(!t)return console.warn("Failed to snapshot the document");a(rh({type:nU.FullSnapshot,data:{node:t,initialOffset:nT(window)}}),e),nV.forEach(e=>e.unlock()),document.adoptedStyleSheets&&document.adoptedStyleSheets.length>0&&K.adoptStyleSheets(document.adoptedStyleSheets,r_.getId(document))};try{let e=[],t=e=>{var t;return nH(n5)({onMutation:F,mutationCb:Z,mousemoveCb:(e,t)=>a(rh({type:nU.IncrementalSnapshot,data:{source:t,positions:e}})),mouseInteractionCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.MouseInteraction},e)})),scrollCb:q,viewportResizeCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.ViewportResize},e)})),inputCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.Input},e)})),mediaInteractionCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.MediaInteraction},e)})),styleSheetRuleCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.StyleSheetRule},e)})),styleDeclarationCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.StyleDeclaration},e)})),canvasMutationCb:J,fontCb:e=>a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.Font},e)})),selectionCb:e=>{a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.Selection},e)}))},customElementCb:e=>{a(rh({type:nU.IncrementalSnapshot,data:Object.assign({source:nM.CustomElement},e)}))},blockClass:c,ignoreClass:p,ignoreSelector:h,maskAllText:f,maskTextClass:_,unmaskTextClass:m,maskTextSelector:g,unmaskTextSelector:y,maskInputOptions:W,inlineStylesheet:S,sampling:C,recordCanvas:A,inlineImages:M,userTriggeredOnInput:B,collectFonts:U,doc:e,maskAttributeFn:T,maskInputFn:w,maskTextFn:k,keepIframeSrcFn:G,blockSelector:u,unblockSelector:d,slimDOMOptions:$,dataURLOptions:R,mirror:r_,iframeManager:X,stylesheetManager:K,shadowDomManager:ee,processedNodeManager:Q,canvasManager:l,ignoreCSSAttributes:P,plugins:(null===(t=null==L?void 0:L.filter(e=>e.observer))||void 0===t?void 0:t.map(e=>({observer:e.observer,options:e.options,callback:t=>a(rh({type:nU.Plugin,data:{plugin:e.name,payload:t}}))})))||[]},x)};X.addLoadListener(n=>{try{e.push(t(n.contentDocument))}catch(e){console.warn(e)}});let n=()=>{o(),e.push(t(document)),rf=!0};return"interactive"===document.readyState||"complete"===document.readyState?n():(e.push(nm("DOMContentLoaded",()=>{a(rh({type:nU.DomContentLoaded,data:{}})),"DOMContentLoaded"===O&&n()})),e.push(nm("load",()=>{a(rh({type:nU.Load,data:{}})),"load"===O&&n()},window))),()=>{e.forEach(e=>e()),Q.destroy(),rf=!1,s=void 0}}catch(e){console.warn(e)}}/**
 * Converts a timestamp to ms, if it was in s, or keeps it as ms.
 */function rg(e){return e>9999999999?e:1e3*e}/**
 * Add a breadcrumb event to replay.
 */function ry(e,t){"sentry.transaction"!==t.category&&(["ui.click","ui.input"].includes(t.category)?e.triggerUserActivity():e.checkAndHandleExpiredSession(),e.addUpdate(()=>(e.throttledAddEvent({type:nU.Custom,// TODO: We were converting from ms to seconds for breadcrumbs, spans,
    // but maybe we should just keep them as milliseconds
    timestamp:1e3*(t.timestamp||0),data:{tag:"breadcrumb",// normalize to max. 10 depth and 1_000 properties per object
    payload:tC(t,10,1e3)}}),"console"===t.category)))}/**
 * For clicks, we check if the target is inside of a button or link
 * If so, we use this as the target instead
 * This is useful because if you click on the image in <button><img></button>,
 * The target will be the image, not the button, which we don't want here
 */function rS(e){let t=rb(e);if(!t||!(t instanceof Element))return t;let n=t.closest("button,a");return n||t}/** Get the event target node. */function rb(e){return"object"==typeof e&&e&&"target"in e?e.target:e}rm.addCustomEvent=(e,t)=>{if(!rf)throw Error("please add custom event after start recording");a(rh({type:nU.Custom,data:{tag:e,payload:t}}))},rm.freezePage=()=>{nV.forEach(e=>e.freeze())},rm.takeFullSnapshot=e=>{if(!rf)throw Error("please take full snapshot after start recording");o(e)},rm.mirror=r_;/** A click detector class that can be used to detect slow or rage clicks on elements. */class rv{// protected for testing
constructor(e,t,n=ry){this._lastMutation=0,this._lastScroll=0,this._clicks=[],// We want everything in s, but options are in ms
this._timeout=t.timeout/1e3,this._threshold=t.threshold/1e3,this._scollTimeout=t.scrollTimeout/1e3,this._replay=e,this._ignoreSelector=t.ignoreSelector,this._addBreadcrumbEvent=n}/** Register click detection handlers on mutation or scroll. */addListeners(){var e;let t=()=>{this._lastScroll=rT()},n=(e=()=>{// Treat window.open as mutation
this._lastMutation=rT()},c||(c=[],to(tH,"open",function(e){return function(...t){if(c)try{c.forEach(e=>e())}catch(e){// ignore errors in here
}return e.apply(tH,t)}})),c.push(e),()=>{let t=c?c.indexOf(e):-1;t>-1&&c.splice(t,1)}),r=e=>{if(!e.target)return;let t=rS(e);t&&this._handleMultiClick(t)},i=new MutationObserver(()=>{this._lastMutation=rT()});i.observe(tH.document.documentElement,{attributes:!0,characterData:!0,childList:!0,subtree:!0}),tH.addEventListener("scroll",t,{passive:!0}),tH.addEventListener("click",r,{passive:!0}),this._teardown=()=>{tH.removeEventListener("scroll",t),tH.removeEventListener("click",r),n(),i.disconnect(),this._clicks=[],this._lastMutation=0,this._lastScroll=0}}/** Clean up listeners. */removeListeners(){this._teardown&&this._teardown(),this._checkClickTimeout&&clearTimeout(this._checkClickTimeout)}/** Handle a click */handleClick(e,t){var n,r;if(r=this._ignoreSelector,!rE.includes(t.tagName)||"INPUT"===t.tagName&&!["submit","button"].includes(t.getAttribute("type")||"")||"A"===t.tagName&&(t.hasAttribute("download")||t.hasAttribute("target")&&"_self"!==t.getAttribute("target"))||r&&t.matches(r)||!(e.data&&"number"==typeof e.data.nodeId&&e.timestamp))return;let i={timestamp:(n=e.timestamp)>9999999999?n/1e3:n,clickBreadcrumb:e,// Set this to 0 so we know it originates from the click breadcrumb
clickCount:0,node:t};// If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second
this._clicks.some(e=>e.node===i.node&&1>Math.abs(e.timestamp-i.timestamp))||(this._clicks.push(i),1===this._clicks.length&&this._scheduleCheckClicks())}/** Count multiple clicks on elements. */_handleMultiClick(e){this._getClicks(e).forEach(e=>{e.clickCount++})}/** Get all pending clicks for a given node. */_getClicks(e){return this._clicks.filter(t=>t.node===e)}/** Check the clicks that happened. */_checkClicks(){let e=[],t=rT();// Remove "old" clicks
for(let n of(this._clicks.forEach(n=>{!n.mutationAfter&&this._lastMutation&&(n.mutationAfter=n.timestamp<=this._lastMutation?this._lastMutation-n.timestamp:void 0),!n.scrollAfter&&this._lastScroll&&(n.scrollAfter=n.timestamp<=this._lastScroll?this._lastScroll-n.timestamp:void 0),n.timestamp+this._timeout<=t&&e.push(n)}),e)){let e=this._clicks.indexOf(n);e>-1&&(this._generateBreadcrumbs(n),this._clicks.splice(e,1))}this._clicks.length&&this._scheduleCheckClicks()}/** Generate matching breadcrumb(s) for the click. */_generateBreadcrumbs(e){let t=this._replay,n=e.scrollAfter&&e.scrollAfter<=this._scollTimeout,r=e.mutationAfter&&e.mutationAfter<=this._threshold,{clickCount:i,clickBreadcrumb:s}=e;// Slow click
if(!n&&!r){// If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout
// If not, it means we just timed out without scroll & mutation
let n=1e3*Math.min(e.mutationAfter||this._timeout,this._timeout),r=n<1e3*this._timeout?"mutation":"timeout",a={type:"default",message:s.message,timestamp:s.timestamp,category:"ui.slowClickDetected",data:{...s.data,url:tH.location.href,route:t.getCurrentRoute(),timeAfterClickMs:n,endReason:r,// If clickCount === 0, it means multiClick was not correctly captured here
// - we still want to send 1 in this case
clickCount:i||1}};this._addBreadcrumbEvent(t,a);return}// Multi click
if(i>1){let e={type:"default",message:s.message,timestamp:s.timestamp,category:"ui.multiClick",data:{...s.data,url:tH.location.href,route:t.getCurrentRoute(),clickCount:i,metric:!0}};this._addBreadcrumbEvent(t,e)}}/** Schedule to check current clicks. */_scheduleCheckClicks(){this._checkClickTimeout&&clearTimeout(this._checkClickTimeout),this._checkClickTimeout=setTimeout(()=>this._checkClicks(),1e3)}}const rE=["A","BUTTON","INPUT"];// This is good enough for us, and is easier to test/mock than `timestampInSeconds`
function rT(){return Date.now()/1e3}/**
 * Create a breadcrumb for a replay.
 */function rw(e){return{timestamp:Date.now()/1e3,type:"default",...e}}(O=L||(L={}))[O.Document=0]="Document",O[O.DocumentType=1]="DocumentType",O[O.Element=2]="Element",O[O.Text=3]="Text",O[O.CDATA=4]="CDATA",O[O.Comment=5]="Comment";// Note that these are the serialized attributes and not attributes directly on
// the DOM Node. Attributes we are interested in:
const rk=new Set(["id","class","aria-label","role","name","alt","title","data-test-id","data-testid","disabled","aria-disabled"]),rx=e=>t=>{if(!e.isEnabled())return;let n=/**
 * An event handler to react to DOM events.
 * Exported for tests.
 */function(e){let{target:t,message:n}=function(e){let t;let n="click"===e.name,r=null;// Accessing event.target can throw (see getsentry/raven-js#838, #768)
    try{r=n?rS(e.event):rb(e.event),t=ts(r,{maxStringLength:200})||"<unknown>"}catch(e){t="<unknown>"}return{target:r,message:t}}(e);return rw({category:`ui.${e.name}`,...rI(t,n)})}(t);if(!n)return;let r="click"===t.name,i=r&&t.event;!r||!e.clickDetector||!i||i.altKey||i.metaKey||i.ctrlKey||i.shiftKey||/** Handle a click. */function(e,t,n){e.handleClick(t,n)}(e.clickDetector,n,rS(t.event)),ry(e,n)};/** Get the base DOM breadcrumb. */function rI(e,t){let n=rm.mirror.getId(e),r=n&&rm.mirror.getNode(n),i=r&&rm.mirror.getMeta(r),s=i&&i.type===L.Element?i:null;return{message:t,data:s?{nodeId:n,node:{id:n,tagName:s.tagName,textContent:Array.from(s.childNodes).map(e=>e.type===L.Text&&e.textContent).filter(Boolean)// filter out empty values
.map(e=>e.trim()).join(""),attributes:/**
 * Inclusion list of attributes that we want to record from the DOM element
 */function(e){let t={};for(let n in e)if(rk.has(n)){let r=n;("data-testid"===n||"data-test-id"===n)&&(r="testId"),t[r]=e[n]}return t}(s.attributes)}}:{}}}const rC=["name","type","startTime","transferSize","duration"];function rR(e){return function(t){return rC.every(n=>e[n]===t[n])}}const rN=`/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
function t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:"pako deflate (from Nodeca project)"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a="";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Nt(e.dictionary):"[object ArrayBuffer]"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,"string"==typeof t?a.input=Nt(t):"[object ArrayBuffer]"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg="invalid literal/length code",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg="invalid distance code",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg="invalid distance too far back",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg="invalid distance too far back",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg="incorrect header check",a.mode=me;break}if((15&h)!==we){t.msg="unknown compression method",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg="invalid window size",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg="unknown compression method",a.mode=me;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg="header crc mismatch",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg="invalid block type",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg="invalid stored block lengths",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg="invalid code lengths set",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg="invalid bit length repeat",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg="invalid literal/lengths set",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg="invalid distances set",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg="invalid literal/length code",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg="invalid distance code",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg="incorrect data check",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:"pako inflate (from Nodeca project)"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):"[object ArrayBuffer]"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,"[object ArrayBuffer]"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if("string"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error("Adding invalid event");const e=this._hasEvents?",":"";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push("]",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push("[",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener("message",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&"function"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:"init",success:!0,response:void 0});`;/**
 * Log a message in debug mode, and add a breadcrumb when _experiment.traceInternals is enabled.
 */function rA(e,t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(tt.info(e),t&&rO(e))}/**
 * Log a message, and add a breadcrumb in the next tick.
 * This is necessary when the breadcrumb may be added before the replay is initialized.
 */function rD(e,t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(tt.info(e),t&&// which may be added before replay is initialized
setTimeout(()=>{rO(e)},0))}function rO(e){let t=tv();t.addBreadcrumb({category:"console",data:{logger:"replay"},level:"info",message:e},{level:"info"})}/** This error indicates that the event buffer size exceeded the limit.. */class rB extends Error{constructor(){super("Event buffer exceeded maximum size of 20000000.")}}/**
 * A basic event buffer that does not do any compression.
 * Used as fallback if the compression worker cannot be loaded or is disabled.
 */class rU{/** All the events that are buffered to be sent. *//** @inheritdoc */constructor(){this.events=[],this._totalSize=0,this.hasCheckout=!1}/** @inheritdoc */get hasEvents(){return this.events.length>0}/** @inheritdoc */get type(){return"sync"}/** @inheritdoc */destroy(){this.events=[]}/** @inheritdoc */async addEvent(e){let t=JSON.stringify(e).length;if(this._totalSize+=t,this._totalSize>2e7)throw new rB;this.events.push(e)}/** @inheritdoc */finish(){return new Promise(e=>{// Make a copy of the events array reference and immediately clear the
// events member so that we do not lose new events while uploading
// attachment.
let t=this.events;this.clear(),e(JSON.stringify(t))})}/** @inheritdoc */clear(){this.events=[],this._totalSize=0,this.hasCheckout=!1}/** @inheritdoc */getEarliestTimestamp(){let e=this.events.map(e=>e.timestamp).sort()[0];return e?rg(e):null}}/**
 * Event buffer that uses a web worker to compress events.
 * Exported only for testing.
 */class rM{constructor(e){this._worker=e,this._id=0}/**
   * Ensure the worker is ready (or not).
   * This will either resolve when the worker is ready, or reject if an error occured.
   */ensureReady(){return this._ensureReadyPromise||(this._ensureReadyPromise=new Promise((e,t)=>{this._worker.addEventListener("message",({data:n})=>{n.success?e():t()},{once:!0}),this._worker.addEventListener("error",e=>{t(e)},{once:!0})})),this._ensureReadyPromise}/**
   * Destroy the worker.
   */destroy(){rA("[Replay] Destroying compression worker"),this._worker.terminate()}/**
   * Post message to worker and wait for response before resolving promise.
   */postMessage(e,t){let n=this._getAndIncrementId();return new Promise((r,i)=>{let s=({data:t})=>{if(t.method===e&&t.id===n){if(// At this point, we'll always want to remove listener regardless of result status
this._worker.removeEventListener("message",s),!t.success){// TODO: Do some error handling, not sure what
("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay]",t.response),i(Error("Error in compression worker"));return}r(t.response)}};// Note: we can't use `once` option because it's possible it needs to
// listen to multiple messages
this._worker.addEventListener("message",s),this._worker.postMessage({id:n,method:e,arg:t})})}/** Get the current ID and increment it for the next call. */_getAndIncrementId(){return this._id++}}/**
 * Event buffer that uses a web worker to compress events.
 * Exported only for testing.
 */class rL{/** @inheritdoc */constructor(e){this._worker=new rM(e),this._earliestTimestamp=null,this._totalSize=0,this.hasCheckout=!1}/** @inheritdoc */get hasEvents(){return!!this._earliestTimestamp}/** @inheritdoc */get type(){return"worker"}/**
   * Ensure the worker is ready (or not).
   * This will either resolve when the worker is ready, or reject if an error occured.
   */ensureReady(){return this._worker.ensureReady()}/**
   * Destroy the event buffer.
   */destroy(){this._worker.destroy()}/**
   * Add an event to the event buffer.
   *
   * Returns true if event was successfuly received and processed by worker.
   */addEvent(e){let t=rg(e.timestamp);(!this._earliestTimestamp||t<this._earliestTimestamp)&&(this._earliestTimestamp=t);let n=JSON.stringify(e);return(this._totalSize+=n.length,this._totalSize>2e7)?Promise.reject(new rB):this._sendEventToWorker(n)}/**
   * Finish the event buffer and return the compressed data.
   */finish(){return this._finishRequest()}/** @inheritdoc */clear(){this._earliestTimestamp=null,this._totalSize=0,this.hasCheckout=!1,// We do not wait on this, as we assume the order of messages is consistent for the worker
this._worker.postMessage("clear")}/** @inheritdoc */getEarliestTimestamp(){return this._earliestTimestamp}/**
   * Send the event to the worker.
   */_sendEventToWorker(e){return this._worker.postMessage("addEvent",e)}/**
   * Finish the request and return the compressed data from the worker.
   */async _finishRequest(){let e=await this._worker.postMessage("finish");return this._earliestTimestamp=null,this._totalSize=0,e}}/**
 * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.
 * This can happen e.g. if the worker cannot be loaded.
 * Exported only for testing.
 */class rG{constructor(e){this._fallback=new rU,this._compression=new rL(e),this._used=this._fallback,this._ensureWorkerIsLoadedPromise=this._ensureWorkerIsLoaded()}/** @inheritdoc */get type(){return this._used.type}/** @inheritDoc */get hasEvents(){return this._used.hasEvents}/** @inheritdoc */get hasCheckout(){return this._used.hasCheckout}/** @inheritdoc */set hasCheckout(e){this._used.hasCheckout=e}/** @inheritDoc */destroy(){this._fallback.destroy(),this._compression.destroy()}/** @inheritdoc */clear(){return this._used.clear()}/** @inheritdoc */getEarliestTimestamp(){return this._used.getEarliestTimestamp()}/**
   * Add an event to the event buffer.
   *
   * Returns true if event was successfully added.
   */addEvent(e){return this._used.addEvent(e)}/** @inheritDoc */async finish(){return(// Ensure the worker is loaded, so the sent event is compressed
await this.ensureWorkerIsLoaded(),this._used.finish())}/** Ensure the worker has loaded. */ensureWorkerIsLoaded(){return this._ensureWorkerIsLoadedPromise}/** Actually check if the worker has been loaded. */async _ensureWorkerIsLoaded(){try{await this._compression.ensureReady()}catch(e){// If the worker fails to load, we fall back to the simple buffer.
// Nothing more to do from our side here
rA("[Replay] Failed to load the compression worker, falling back to simple buffer");return}// Now we need to switch over the array buffer to the compression worker
await this._switchToCompressionWorker()}/** Switch the used buffer to the compression worker. */async _switchToCompressionWorker(){let{events:e,hasCheckout:t}=this._fallback,n=[];for(let t of e)n.push(this._compression.addEvent(t));this._compression.hasCheckout=t,// We switch over to the new buffer immediately - any further events will be added
// after the previously buffered ones
this._used=this._compression;// Wait for original events to be re-added before resolving
try{await Promise.all(n)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn("[Replay] Failed to add events when switching buffers.",e)}}}/** If sessionStorage is available. */function rP(){try{// This can throw, e.g. when being accessed in a sandboxed iframe
return"sessionStorage"in tH&&!!tH.sessionStorage}catch(e){return!1}}/**
 * Given a sample rate, returns true if replay should be sampled.
 *
 * 1.0 = 100% sampling
 * 0.0 = 0% sampling
 */function rY(e){return void 0!==e&&Math.random()<e}/**
 * Save a session to session storage.
 */function rF(e){if(rP())try{tH.sessionStorage.setItem(tV,JSON.stringify(e))}catch(e){// Ignore potential SecurityError exceptions
}}/**
 * Get a session with defaults & applied sampling.
 */function rj(e){let t=Date.now(),n=e.id||tp(),r=e.started||t,i=e.lastActivity||t,s=e.segmentId||0,a=e.sampled,o=e.previousSessionId;return{id:n,started:r,lastActivity:i,segmentId:s,sampled:a,previousSessionId:o}}/**
 * Create a new session, which in its current implementation is a Sentry event
 * that all replays will be saved to as attachments. Currently, we only expect
 * one of these Sentry events per "replay session".
 */function rz({sessionSampleRate:e,allowBuffering:t,stickySession:n=!1},{previousSessionId:r}={}){let i=rY(e)?"session":!!t&&"buffer",s=rj({sampled:i,previousSessionId:r});return n&&rF(s),s}/**
 * Given an initial timestamp and an expiry duration, checks to see if current
 * time should be considered as expired.
 */function rW(e,t,n=+new Date){return(// Always expired if < 0
null===e||void 0===t||t<0||0!==t&&e+t<=n)}/**
 * Checks to see if session is expired
 */function r$(e,{maxReplayDuration:t,sessionIdleExpire:n,targetTime:r=Date.now()}){return rW(e.started,t,r)||// check that the idle timeout has not been exceeded (i.e. user has
// performed an action within the last `sessionIdleExpire` ms)
rW(e.lastActivity,n,r)}/** If the session should be refreshed or not. */function rH(e,{sessionIdleExpire:t,maxReplayDuration:n}){return!!r$(e,{sessionIdleExpire:t,maxReplayDuration:n})&&("buffer"!==e.sampled||0!==e.segmentId)}/**
 * Get or create a session, when initializing the replay.
 * Returns a session that may be unsampled.
 */function rV({traceInternals:e,sessionIdleExpire:t,maxReplayDuration:n,previousSessionId:r},i){let s=i.stickySession&&/**
 * Fetches a session from storage
 */function(e){if(!rP())return null;try{// This can throw if cookies are disabled
let t=tH.sessionStorage.getItem(tV);if(!t)return null;let n=JSON.parse(t);return rD("[Replay] Loading existing session",e),rj(n)}catch(e){return null}}(e);return(// No session exists yet, just create a new one
s?rH(s,{sessionIdleExpire:t,maxReplayDuration:n})?(rD("[Replay] Session in sessionStorage is expired, creating new one..."),rz(i,{previousSessionId:s.id})):s:(rD("[Replay] Creating new session",e),rz(i,{previousSessionId:r})))}/**
 * Add an event to the event buffer.
 * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.
 * Instead this returns `true` if we tried to add the event, else false.
 * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.
 *
 * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.
 */function rZ(e,t,n){return!!rJ(e,t)&&(rq(e,t,n),!0)}async function rq(e,t,n){if(!e.eventBuffer)return null;try{n&&"buffer"===e.recordingMode&&e.eventBuffer.clear(),n&&(e.eventBuffer.hasCheckout=!0);let r=e.getOptions(),i=function(e,t){try{if("function"==typeof t&&e.type===nU.Custom)return t(e)}catch(e){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] An error occured in the `beforeAddRecordingEvent` callback, skipping the event...",e),null}return e}(t,r.beforeAddRecordingEvent);if(!i)return;return await e.eventBuffer.addEvent(i)}catch(r){let t=r&&r instanceof rB?"addEventSizeExceeded":"addEvent";("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error(r),await e.stop({reason:t});let n=tv().getClient();n&&n.recordDroppedEvent("internal_sdk_error","replay")}}/** Exported only for tests. */function rJ(e,t){if(!e.eventBuffer||e.isPaused()||!e.isEnabled())return!1;let n=rg(t.timestamp);return(// Throw out events that happen more than 5 minutes ago. This can happen if
// page has been left open and idle for a long period of time and user
// comes back to trigger a new session. The performance entries rely on
// `performance.timeOrigin`, which is when the page first opened.
!(n+e.timeouts.sessionIdlePause<Date.now())&&(!(n>e.getContext().initialTimestamp+e.getOptions().maxReplayDuration)||(rA(`[Replay] Skipping event with timestamp ${n} because it is after maxReplayDuration`,e.getOptions()._experiments.traceInternals),!1)))}/** If the event is a transaction event */function rK(e){return"transaction"===e.type}/**
 * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.
 */function rX(e){// Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there
// TODO (v8): remove this check as it will no longer be necessary
let t=function(){let e=tv().getClient();if(!e)return!1;let t=e.getTransport();return!!t&&(t.send.__sentry__baseTransport__||!1)}();return(n,r)=>{if(!e.isEnabled()||n.type&&!rK(n))return;let i=r&&r.statusCode;// We only want to do stuff on successful error sending, otherwise you get error replays without errors attached
// If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)
// If we do use the base transport, we skip if we encountered an non-OK status code
if(!t||i&&!(i<200)&&!(i>=300)){if(rK(n)){!function(e,t){let n=e.getContext();// Collect traceIds in _context regardless of `recordingMode`
// In error mode, _context gets cleared on every checkout
// We limit to max. 100 transactions linked
t.contexts&&t.contexts.trace&&t.contexts.trace.trace_id&&n.traceIds.size<100&&n.traceIds.add(t.contexts.trace.trace_id)}(e,n);return}!function(e,t){let n=e.getContext();t.event_id&&n.errorIds.size<100&&n.errorIds.add(t.event_id),"buffer"===e.recordingMode&&t.tags&&t.tags.replayId&&setTimeout(()=>{// Capture current event buffer as new replay
e.sendBufferedReplayOrFlush()})}(e,n)}}}/**
 * Create a "span" for each performance entry.
 */function rQ(e,t){return t.map(({type:t,start:n,end:r,name:i,data:s})=>{let a=e.throttledAddEvent({type:nU.Custom,timestamp:n,data:{tag:"performanceSpan",payload:{op:t,description:i,startTimestamp:n,endTimestamp:r,data:s}}});// If response is a string, it means its either THROTTLED or SKIPPED
return"string"==typeof a?Promise.resolve(null):a})}/** Add a performance entry breadcrumb */function r0(e,t){var n;e.isEnabled()&&null!==t&&(n=t.name,(!("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)||!e.getOptions()._experiments.traceInternals)&&/**
 * Checks whether given url points to Sentry server
 * @param url url to verify
 */function(e,t){let n=t.getClient(),r=n&&n.getDsn(),i=n&&n.getOptions().tunnel;return!!r&&e.includes(r.host)||!!i&&tk(e)===tk(i)}(n,tv())||e.addUpdate(()=>(rQ(e,[t]),!0)))}const r1=["true","false","null"];/* eslint-disable max-lines *//**
 * Takes an incomplete JSON string, and returns a hopefully valid JSON string.
 * Note that this _can_ fail, so you should check the return value is valid JSON.
 */function r2(e){let t=/**
 * Evaluate an (incomplete) JSON string.
 */function(e){let t=[];for(let n=0;n<e.length;n++)!function(e,t,n){let r=e[e.length-1],i=t[n];if(!/\s/.test(i)){if('"'===i&&!function e(t,n){let r=t[n-1];return"\\"===r&&!e(t,n-1)}(t,n)){!function(e,t){// End of obj value
if(14===t){e.pop(),e.push(15);return}// End of arr value
if(22===t){e.pop(),e.push(23);return}// Start of obj value
if(13===t){e.push(14);return}// Start of arr value
if(21===t){e.push(22);return}// Start of obj key
if(10===t){e.push(12);return}// End of obj key
12===t&&(e.pop(),e.push(11))}(e,r);return}switch(i){case"{":!function(e,t){// Initial object
if(!t||13===t){e.push(10);return}// New object as first array element
21===t&&e.push(10),20===t&&e.push(10)}(e,r);break;case"[":!function(e,t){// Initial array
if(!t||13===t){e.push(20),e.push(21);return}// New array as first array element
21===t&&(e.push(20),e.push(21)),20===t&&(e.push(20),e.push(21))}(e,r);break;case":":11===r&&(e.pop(),e.push(13));break;case",":!function(e,t){// Comma after obj value
if(13===t){e.pop();return}if(15===t){// Pop OBJ_VAL_COMPLETED & OBJ_VAL
e.pop(),e.pop();return}// Comma after arr value
21!==t&&23===t&&// Pop ARR_VAL_COMPLETED
e.pop()}(e,r);break;case"}":10===r&&e.pop(),13===r&&(// Pop OBJ_VAL, OBJ
e.pop(),e.pop()),15===r&&(// Pop OBJ_VAL_COMPLETED, OBJ_VAL, OBJ
e.pop(),e.pop(),e.pop()),13===e[e.length-1]&&e.push(15),21===e[e.length-1]&&e.push(23);break;case"]":20===r&&e.pop(),21===r&&(// Pop ARR_VAL, ARR
e.pop(),e.pop()),23===r&&(// Pop ARR_VAL_COMPLETED, ARR_VAL, ARR
e.pop(),e.pop(),e.pop()),13===e[e.length-1]&&e.push(15),21===e[e.length-1]&&e.push(23)}}}(t,e,n);return t}(e);return(/**
 * Complete an incomplete JSON string.
 * This will ensure that the last element always has a `"~~"` to indicate it was truncated.
 * For example, `[1,2,` will be completed to `[1,2,"~~"]`
 * and `{"aa":"b` will be completed to `{"aa":"b~~"}`
 */function(e,t){if(!t.length)return e;let n=e,r=t.length-1,i=t[r];n=function(e,t){switch(t){// Object cases
case 10:return`${e}"~~":"~~"`;case 11:return`${e}:"~~"`;case 12:return`${e}~~":"~~"`;case 13:return function(e){let t=e.lastIndexOf(":"),n=e.slice(t+1);return r1.includes(n.trim())?`${e},"~~":"~~"`:`${e.slice(0,t+1)}"~~"`}(e);case 14:case 22:return`${e}~~"`;case 15:return`${e},"~~":"~~"`;// Array cases
case 20:return`${e}"~~"`;case 21:return function(e){let t=function(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(","===n||"["===n)return t}return -1}(e);if(t>-1){let n=e.slice(t+1);return r1.includes(n.trim())?`${e},"~~"`:`${e.slice(0,t+1)}"~~"`}// fallback, this shouldn't happen, to be save
return e}(e);case 23:return`${e},"~~"`}return e}(n,i);// Complete remaining steps - just add closing brackets
for(let e=r;e>=0;e--){let r=t[e];switch(r){case 10:n=`${n}}`;break;case 20:n=`${n}]`}}return n}(e,t))}/** Get the size of a body. */function r5(e,t){if(e)try{if("string"==typeof e)return t.encode(e).length;if(e instanceof URLSearchParams)return t.encode(e.toString()).length;if(e instanceof FormData){let n=ie(e);return t.encode(n).length}if(e instanceof Blob)return e.size;if(e instanceof ArrayBuffer)return e.byteLength;// Currently unhandled types: ArrayBufferView, ReadableStream
}catch(e){// just return undefined
}}/** Convert a Content-Length header to number/undefined.  */function r3(e){if(!e)return;let t=parseInt(e,10);return isNaN(t)?void 0:t}/** Get the string representation of a body. */function r6(e){return"string"==typeof e?e:e instanceof URLSearchParams?e.toString():e instanceof FormData?ie(e):void 0}/** Convert ReplayNetworkRequestData to a PerformanceEntry. */function r4(e,t){if(!t)return null;let{startTimestamp:n,endTimestamp:r,url:i,method:s,statusCode:a,request:o,response:l}=t,c={type:e,start:n/1e3,end:r/1e3,name:i,data:td({method:s,statusCode:a,request:o,response:l})};return c}/** Build the request or response part of a replay network breadcrumb that was skipped. */function r9(e){return{headers:{},size:e,_meta:{warnings:["URL_SKIPPED"]}}}/** Build the request or response part of a replay network breadcrumb. */function r8(e,t,n){if(!t&&0===Object.keys(e).length)return;if(!t)return{headers:e};if(!n)return{headers:e,size:t};let r={headers:e,size:t},{body:i,warnings:s}=function(e){if(!e||"string"!=typeof e)return{body:e,warnings:[]};let t=e.length>15e4;if(function(e){let t=e[0],n=e[e.length-1];// Simple check: If this does not start & end with {} or [], it's not JSON
return"["===t&&"]"===n||"{"===t&&"}"===n}(e))try{let n=t?r2(e.slice(0,15e4)):e,r=JSON.parse(n);return{body:r,warnings:t?["JSON_TRUNCATED"]:[]}}catch(n){return{body:t?`${e.slice(0,15e4)}\u{2026}`:e,warnings:t?["INVALID_JSON","TEXT_TRUNCATED"]:["INVALID_JSON"]}}return{body:t?`${e.slice(0,15e4)}\u{2026}`:e,warnings:t?["TEXT_TRUNCATED"]:[]}}(n);return r.body=i,s.length>0&&(r._meta={warnings:s}),r}/** Filter a set of headers */function r7(e,t){return Object.keys(e).reduce((n,r)=>{let i=r.toLowerCase();return t.includes(i)&&e[r]&&(n[i]=e[r]),n},{})}function ie(e){// This is a bit simplified, but gives us a decent estimate
// This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'
// @ts-expect-error passing FormData to URLSearchParams actually works
return new URLSearchParams(e).toString()}/** Match an URL against a list of strings/Regex. */function it(e,t){let n=/** exported for tests */function(e,t=tH.document.baseURI){// Short circuit for common cases:
if(e.startsWith("http://")||e.startsWith("https://")||e.startsWith(tH.location.origin))return e;let n=new URL(e,t);// If these do not match, we are not dealing with a relative URL, so just return it
if(n.origin!==new URL(t).origin)return e;let r=n.href;return(// Remove trailing slashes, if they don't match the original URL
!e.endsWith("/")&&r.endsWith("/")?r.slice(0,-1):r)}(e);return(/**
 * Test the given string against an array of strings and regexes. By default, string matching is done on a
 * substring-inclusion basis rather than a strict equality basis
 *
 * @param testString The string to test
 * @param patterns The patterns against which to test the string
 * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to
 * count. If false, `testString` will match a string pattern if it contains that pattern.
 * @returns
 */function(e,t=[],n=!1){return t.some(t=>/**
 * Checks if the given value matches a regex or string
 *
 * @param value The string to test
 * @param pattern Either a regex or a string against which `value` will be matched
 * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match
 * `pattern` if it contains `pattern`. Only applies to string-type patterns.
 */(function(e,t,n=!1){return!!e3(e)&&(e5(t,"RegExp")?t.test(e):!!e3(t)&&(n?e===t:e.includes(t)))})(e,t,n))}(n,t))}/**
 * Capture a fetch breadcrumb to a replay.
 * This adds additional data (where approriate).
 */async function ir(e,t,n){try{let r=await ii(e,t,n),i=r4("resource.fetch",r);r0(n.replay,i)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] Failed to capture fetch breadcrumb",e)}}async function ii(e,t,n){let{startTimestamp:r,endTimestamp:i}=t,{url:s,method:a,status_code:o=0,request_body_size:l,response_body_size:c}=e.data,u=it(s,n.networkDetailAllowUrls)&&!it(s,n.networkDetailDenyUrls),d=u?function({networkCaptureBodies:e,networkRequestHeaders:t},n,r){let i=1===n.length&&"string"!=typeof n[0]?ic(n[0],t):2===n.length?ic(n[1],t):{};if(!e)return r8(i,r,void 0);// We only want to transmit string or string-like bodies
let s=io(n),a=r6(s);return r8(i,r,a)}(n,t.input,l):r9(l),p=await is(u,n,t.response,c);return{startTimestamp:r,endTimestamp:i,url:s,method:a,statusCode:o,request:d,response:p}}async function is(e,{networkCaptureBodies:t,textEncoder:n,networkResponseHeaders:r},i,s){if(!e&&void 0!==s)return r9(s);let a=il(i.headers,r);if(!t&&void 0!==s)return r8(a,s,void 0);// Only clone the response if we need to
try{// We have to clone this, as the body can only be read once
let r=i.clone(),o=await ia(r),l=o&&o.length&&void 0===s?r5(o,n):s;if(!e)return r9(l);if(t)return r8(a,l,o);return r8(a,l,void 0)}catch(e){// fallback
return r8(a,s,void 0)}}async function ia(e){try{return await e.text()}catch(e){return}}function io(e=[]){// We only support getting the body from the fetch options
if(2===e.length&&"object"==typeof e[1])return e[1].body}function il(e,t){let n={};return t.forEach(t=>{e.get(t)&&(n[t]=e.get(t))}),n}function ic(e,t){if(!e)return{};let n=e.headers;return n?n instanceof Headers?il(n,t):Array.isArray(n)?{}:r7(n,t):{}}/**
 * Capture an XHR breadcrumb to a replay.
 * This adds additional data (where approriate).
 */async function iu(e,t,n){try{let r=function(e,t,n){let{startTimestamp:r,endTimestamp:i,input:s,xhr:a}=t,{url:o,method:l,status_code:c=0,request_body_size:u,response_body_size:d}=e.data;if(!o)return null;if(!it(o,n.networkDetailAllowUrls)||it(o,n.networkDetailDenyUrls)){let e=r9(u),t=r9(d);return{startTimestamp:r,endTimestamp:i,url:o,method:l,statusCode:c,request:e,response:t}}let p=a[tB],h=p?r7(p.request_headers,n.networkRequestHeaders):{},f=r7(function(e){let t=e.getAllResponseHeaders();return t?t.split("\r\n").reduce((e,t)=>{let[n,r]=t.split(": ");return e[n.toLowerCase()]=r,e},{}):{}}(a),n.networkResponseHeaders),_=r8(h,u,n.networkCaptureBodies?r6(s):void 0),m=r8(f,d,n.networkCaptureBodies?t.xhr.responseText:void 0);return{startTimestamp:r,endTimestamp:i,url:o,method:l,statusCode:c,request:_,response:m}}(e,t,n),i=r4("resource.xhr",r);r0(n.replay,i)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] Failed to capture fetch breadcrumb",e)}}let id=null;const ip=e=>t=>{if(!e.isEnabled())return;let n=/**
 * An event handler to handle scope changes.
 */function(e){// TODO (v8): Remove this guard. This was put in place because we introduced
    // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.
    // For now, we'll just return null if the method doesn't exist but we should eventually
    // get rid of this guard.
    let t=e.getLastBreadcrumb&&e.getLastBreadcrumb();return(// Listener can be called when breadcrumbs have not changed, so we store the
    // reference to the last crumb and only return a crumb if it has changed
    id!==t&&t?(id=t,!t.category||["fetch","xhr","sentry.event","sentry.transaction"].includes(t.category)||t.category.startsWith("ui."))?null:"console"===t.category?/** exported for tests only */function(e){let t=e.data&&e.data.arguments;if(!Array.isArray(t)||0===t.length)return rw(e);let n=!1,r=t.map(e=>{if(!e)return e;if("string"==typeof e)return e.length>5e3?(n=!0,`${e.slice(0,5e3)}\u{2026}`):e;if("object"==typeof e)try{let t=tC(e,7),r=JSON.stringify(t);if(r.length>5e3){let e=r2(r.slice(0,5e3)),t=JSON.parse(e);return(// We only set this after JSON.parse() was successfull, so we know we didn't run into `catch`
    n=!0,t)}return t}catch(e){// fall back to default
    }return e});return rw({...e,data:{...e.data,arguments:r,...n?{_meta:{warnings:["CONSOLE_ARG_TRUNCATED"]}}:{}}})}(t):rw(t):null)}(t);n&&ry(e,n)};/**
 * Create a "span" for the total amount of memory being used by JS objects
 * (including v8 internal objects).
 */async function ih(e){// window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this
try{return Promise.all(rQ(e,[// @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)
function(e){let{jsHeapSizeLimit:t,totalJSHeapSize:n,usedJSHeapSize:r}=e,i=Date.now()/1e3;return{type:"memory",name:"memory",start:i,end:i,data:{memory:{jsHeapSizeLimit:t,totalJSHeapSize:n,usedJSHeapSize:r}}}}(tH.performance.memory)]))}catch(e){// Do nothing
return[]}}// Map entryType -> function to normalize data for event
const i_={// @ts-expect-error TODO: entry type does not fit the create* functions entry type
resource:function(e){let{entryType:t,initiatorType:n,name:r,responseEnd:i,startTime:s,decodedBodySize:a,encodedBodySize:o,responseStatus:l,transferSize:c}=e;return(// Core SDK handles these
["fetch","xmlhttprequest"].includes(n)?null:{type:`${t}.${n}`,start:ig(s),end:ig(i),name:r,data:{size:c,statusCode:l,decodedBodySize:a,encodedBodySize:o}})},paint:function(e){let{duration:t,entryType:n,name:r,startTime:i}=e,s=ig(i);return{type:n,name:r,start:s,end:s+t,data:void 0}},// @ts-expect-error TODO: entry type does not fit the create* functions entry type
navigation:function(e){let{entryType:t,name:n,decodedBodySize:r,duration:i,domComplete:s,encodedBodySize:a,domContentLoadedEventStart:o,domContentLoadedEventEnd:l,domInteractive:c,loadEventStart:u,loadEventEnd:d,redirectCount:p,startTime:h,transferSize:f,type:_}=e;return(// Ignore entries with no duration, they do not seem to be useful and cause dupes
0===i?null:{type:`${t}.${_}`,start:ig(h),end:ig(s),name:n,data:{size:f,decodedBodySize:r,encodedBodySize:a,duration:i,domInteractive:c,domContentLoadedEventStart:o,domContentLoadedEventEnd:l,loadEventStart:u,loadEventEnd:d,domComplete:s,redirectCount:p}})},"largest-contentful-paint":function(e){let{entryType:t,startTime:n,size:r}=e,i=0;if(tH.performance){let e=tH.performance.getEntriesByType("navigation")[0];// See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21
i=e&&e.activationStart||0}// value is in ms
let s=Math.max(n-i,0),a=ig(i)+s/1e3;return{type:t,name:t,start:a,end:a,data:{value:s,size:r,nodeId:rm.mirror.getId(e.element)}}}};function im(e){return void 0===i_[e.entryType]?null:i_[e.entryType](e)}function ig(e){// browserPerformanceTimeOrigin can be undefined if `performance` or
// `performance.now` doesn't exist, but this is already checked by this integration
return((th.browserPerformanceTimeOrigin||tH.performance.timeOrigin)+e)/1e3}/**
 * Prepare a replay event & enrich it with the SDK metadata.
 */async function iy({client:e,scope:t,replayId:n,event:r}){let i="object"!=typeof e._integrations||null===e._integrations||Array.isArray(e._integrations)?void 0:Object.keys(e._integrations),s={event_id:n,integrations:i};e.emit&&e.emit("preprocessEvent",r,s);let a=await /**
 * Adds common information to events.
 *
 * The information includes release and environment from `options`,
 * breadcrumbs and context (extra, tags and user) from the scope.
 *
 * Information that is already present in the event is never overwritten. For
 * nested objects, such as the context, keys are merged.
 *
 * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.
 *
 * @param event The original event.
 * @param hint May contain additional information about the original exception.
 * @param scope A scope containing event metadata.
 * @returns A new event with more information.
 * @hidden
 */function(e,t,n,r,i){let{normalizeDepth:s=3,normalizeMaxBreadth:a=1e3}=e,o={...t,event_id:t.event_id||n.event_id||tp(),timestamp:t.timestamp||(0,th.dateTimestampInSeconds)()},l=n.integrations||e.integrations.map(e=>e.name);/**
 *  Enhances event using the client configuration.
 *  It takes care of all "static" values like environment, release and `dist`,
 *  as well as truncating overly long values.
 * @param event event instance to be enhanced
 */(function(e,t){let{environment:n,release:r,dist:i,maxValueLength:s=250}=t;"environment"in e||(e.environment="environment"in t?n:tf),void 0===e.release&&void 0!==r&&(e.release=r),void 0===e.dist&&void 0!==i&&(e.dist=i),e.message&&(e.message=ta(e.message,s));let a=e.exception&&e.exception.values&&e.exception.values[0];a&&a.value&&(a.value=ta(a.value,s));let o=e.request;o&&o.url&&(o.url=ta(o.url,s))})(o,e),l.length>0&&(o.sdk=o.sdk||{},o.sdk.integrations=[...o.sdk.integrations||[],...l]),void 0===t.type&&/**
 * Puts debug IDs into the stack frames of an error event.
 */function(e,t){let n;let r=e1.GLOBAL_OBJ._sentryDebugIds;if(!r)return;let i=tR.get(t);i?n=i:(n=new Map,tR.set(t,n));// Build a map of filename -> debug_id
let s=Object.keys(r).reduce((e,i)=>{let s;let a=n.get(i);a?s=a:(s=t(i),n.set(i,s));for(let t=s.length-1;t>=0;t--){let n=s[t];if(n.filename){e[n.filename]=r[i];break}}return e},{});try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.exception.values.forEach(e=>{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.stacktrace.frames.forEach(e=>{e.filename&&(e.debug_id=s[e.filename])})})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
}}(o,e.stackParser);// If we have scope given to us, use it as the base for further modifications.
// This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
let c=r;n.captureContext&&(c=tm.clone(c).update(n.captureContext));// We prepare the result here with a resolved Event.
let u=new tn(e=>{e(o)}),d=i&&i.getEventProcessors?i.getEventProcessors():[];// This should be the last thing called, since we want that
// {@link Hub.addEventProcessor} gets the finished prepared event.
//
// We need to check for the existence of `finalScope.getAttachments`
// because `getAttachments` can be undefined if users are using an older version
// of `@sentry/core` that does not have the `getAttachments` method.
// See: https://github.com/getsentry/sentry-javascript/issues/5229
if(c){// Collect attachments from the hint and scope
if(c.getAttachments){let e=[...n.attachments||[],...c.getAttachments()];e.length&&(n.attachments=e)}// In case we have a hub we reassign it.
u=c.applyToEvent(o,n,d)}else // TODO (v8): Update the order to be Global > Client
u=ti([...d,...tr()],o,n);return u.then(e=>(e&&// file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.
    // This should not cause any PII issues, since we're only moving data that is already on the event and not adding
    // any new data
    /**
 * Moves debug IDs from the stack frames of an error event into the debug_meta field.
 */function(e){// Extract debug IDs and filenames from the stack frames on the event.
    let t={};try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    e.exception.values.forEach(e=>{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    e.stacktrace.frames.forEach(e=>{e.debug_id&&(e.abs_path?t[e.abs_path]=e.debug_id:e.filename&&(t[e.filename]=e.debug_id),delete e.debug_id)})})}catch(e){// To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }if(0===Object.keys(t).length)return;// Fill debug_meta information
    e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];let n=e.debug_meta.images;Object.keys(t).forEach(e=>{n.push({type:"sourcemap",code_file:e,debug_id:t[e]})})}(e),"number"==typeof s&&s>0)?/**
 * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
 * Normalized keys:
 * - `breadcrumbs.data`
 * - `user`
 * - `contexts`
 * - `extra`
 * @param event Event
 * @returns Normalized event
 */function(e,t,n){if(!e)return null;let r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map(e=>({...e,...e.data&&{data:tC(e.data,t,n)}}))},...e.user&&{user:tC(e.user,t,n)},...e.contexts&&{contexts:tC(e.contexts,t,n)},...e.extra&&{extra:tC(e.extra,t,n)}};return e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=tC(e.contexts.trace.data,t,n))),e.spans&&(r.spans=e.spans.map(e=>(e.data&&(e.data=tC(e.data,t,n)),e))),r}(e,s,a):e)}(e.getOptions(),r,s,t,e);// If e.g. a global event processor returned null
if(!a)return null;// This normally happens in browser client "_prepareEvent"
// but since we do not use this private method from the client, but rather the plain import
// we need to do this manually.
a.platform=a.platform||"javascript";// extract the SDK name because `client._prepareEvent` doesn't add it to the event
let o=e.getSdkMetadata&&e.getSdkMetadata(),{name:l,version:c}=o&&o.sdk||{};return a.sdk={...a.sdk,name:l||"sentry.javascript.unknown",version:c||"0.0.0"},a}/**
 * Send replay attachment using `fetch()`
 */async function iS({recordingData:e,replayId:t,segmentId:n,eventContext:r,timestamp:i,session:s}){var a;let o;let l=/**
 * Prepare the recording data ready to be sent.
 */function({recordingData:e,headers:t}){let n;// XXX: newline is needed to separate sequence id from events
let r=`${JSON.stringify(t)}
`;if("string"==typeof e)n=`${r}${e}`;else{let t=new TextEncoder,i=t.encode(r);// Merge the two Uint8Arrays
(n=new Uint8Array(i.length+e.length)).set(i),n.set(e,i.length)}return n}({recordingData:e,headers:{segment_id:n}}),{urls:c,errorIds:u,traceIds:d,initialTimestamp:p}=r,h=tv(),f=h.getClient(),_=h.getScope(),m=f&&f.getTransport(),g=f&&f.getDsn();if(!f||!m||!g||!s.sampled)return;let y={type:"replay_event",replay_start_timestamp:p/1e3,timestamp:i/1e3,error_ids:u,trace_ids:d,urls:c,replay_id:t,segment_id:n,replay_type:s.sampled},S=await iy({scope:_,client:f,replayId:t,event:y});if(!S){// Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions
f.recordDroppedEvent("event_processor","replay",y),rA("An event processor returned `null`, will not send event.");return}/*
  For reference, the fully built event looks something like this:
  {
      "type": "replay_event",
      "timestamp": 1670837008.634,
      "error_ids": [
          "errorId"
      ],
      "trace_ids": [
          "traceId"
      ],
      "urls": [
          "https://example.com"
      ],
      "replay_id": "eventId",
      "segment_id": 3,
      "replay_type": "error",
      "platform": "javascript",
      "event_id": "eventId",
      "environment": "production",
      "sdk": {
          "integrations": [
              "BrowserTracing",
              "Replay"
          ],
          "name": "sentry.javascript.browser",
          "version": "7.25.0"
      },
      "sdkProcessingMetadata": {},
      "contexts": {
      },
  }
  */// Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to
// sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may
// have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid
// of this `delete`, lest we miss putting it back in the next time the property is in use.)
delete S.sdkProcessingMetadata;let b=(a=f.getOptions().tunnel,/**
 * Creates an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */function(e,t=[]){return[e,t]}(/**
 * Creates event envelope headers, based on event, sdk info and tunnel
 * Note: This function was extracted from the core package to make it available in Replay
 */function(e,t,n,r){let i=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:new Date().toISOString(),...t&&{sdk:t},...!!n&&r&&{dsn:/**
 * Renders the string representation of this Dsn.
 *
 * By default, this will render the public representation without the password
 * component. To get the deprecated private representation, set `withPassword`
 * to true.
 *
 * @param withPassword When set to true, the password will be included.
 */function(e,t=!1){let{host:n,path:r,pass:i,port:s,projectId:a,protocol:o,publicKey:l}=e;return`${o}://${l}${t&&i?`:${i}`:""}@${n}${s?`:${s}`:""}/${r?`${r}/`:r}${a}`}(r)},...i&&{trace:td({...i})}}}(S,/** Extracts the minimal SDK info from from the metadata or an events */function(e){if(!e||!e.sdk)return;let{name:t,version:n}=e.sdk;return{name:t,version:n}}(S),a,g),[[{type:"replay_event"},S],[{type:"replay_recording",// If string then we need to encode to UTF8, otherwise will have
// wrong size. TextEncoder has similar browser support to
// MutationObserver, although it does not accept IE11.
length:"string"==typeof l?new TextEncoder().encode(l).length:l.length},l]]));try{o=await m.send(b)}catch(t){let e=Error(tZ);try{// In case browsers don't allow this property to be writable
// @ts-expect-error This needs lib es2022 and newer
e.cause=t}catch(e){// nothing to do
}throw e}// TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore
if(!o)return o;// If the status code is invalid, we want to immediately stop & not retry
if("number"==typeof o.statusCode&&(o.statusCode<200||o.statusCode>=300))throw new ib(o.statusCode);return o}/**
 * This error indicates that the transport returned an invalid status code.
 */class ib extends Error{constructor(e){super(`Transport returned status code ${e}`)}}/**
 * Finalize and send the current replay event to Sentry
 */async function iv(e,t={count:0,interval:5e3}){let{recordingData:n,options:r}=e;// short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)
if(n.length)try{return await iS(e),!0}catch(n){var i;if(n instanceof ib)throw n;// If an error happened here, it's likely that uploading the attachment
// failed, we'll can retry with the same events payload
if(i={_retryCount:t.count},tv().setContext("Replays",i),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r._experiments&&r._experiments.captureExceptions&&tw(n),t.count>=3){let e=Error(`${tZ} - max retries exceeded`);try{// In case browsers don't allow this property to be writable
// @ts-expect-error This needs lib es2022 and newer
e.cause=n}catch(e){// nothing to do
}throw e}return(// will retry in intervals of 5, 10, 30
t.interval*=++t.count,new Promise((n,r)=>{setTimeout(async()=>{try{await iv(e,t),n(!0)}catch(e){r(e)}},t.interval)}))}}const iE="__THROTTLED";/* eslint-disable max-lines */// TODO: We might want to split this file up
/**
 * The main replay container class, which holds all the state and methods for recording and sending replays.
 */class iT{/**
   * List of PerformanceEntry from PerformanceObserver
   *//**
   * Recording can happen in one of three modes:
   *   - session: Record the whole session, sending it continuously
   *   - buffer: Always keep the last 60s of recording, requires:
   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs
   *     - or calling `flush()` to send the replay
   *//**
   * The current or last active transcation.
   * This is only available when performance is enabled.
   *//**
   * These are here so we can overwrite them in tests etc.
   * @hidden
   *//**
   * Options to pass to `rrweb.record()`
   *//**
   * Timestamp of the last user activity. This lives across sessions.
   *//**
   * Is the integration currently active?
   *//**
   * Paused is a state where:
   * - DOM Recording is not listening at all
   * - Nothing will be added to event buffer (e.g. core SDK events)
   *//**
   * Have we attached listeners to the core SDK?
   * Note we have to track this as there is no way to remove instrumentation handlers.
   *//**
   * Function to stop recording
   */constructor({options:e,recordingOptions:t}){iT.prototype.__init.call(this),iT.prototype.__init2.call(this),iT.prototype.__init3.call(this),iT.prototype.__init4.call(this),iT.prototype.__init5.call(this),iT.prototype.__init6.call(this),this.eventBuffer=null,this.performanceEvents=[],this.recordingMode="session",this.timeouts={sessionIdlePause:3e5,sessionIdleExpire:9e5},this._lastActivity=Date.now(),this._isEnabled=!1,this._isPaused=!1,this._hasInitializedCoreListeners=!1,this._context={errorIds:new Set,traceIds:new Set,urls:[],initialTimestamp:Date.now(),initialUrl:""},this._recordingOptions=t,this._options=e,this._debouncedFlush=/**
 * Heavily simplified debounce function based on lodash.debounce.
 *
 * This function takes a callback function (@param fun) and delays its invocation
 * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,
 * which ensures that the callback is invoked at least once after the specified max. wait time.
 *
 * @param func the function whose invocation is to be debounced
 * @param wait the minimum time until the function is invoked after it was called once
 * @param options the options object, which can contain the `maxWait` property
 *
 * @returns the debounced version of the function, which needs to be called at least once to start the
 *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc
 *          was already invoked in the meantime, return @param func's return value.
 *          The debounced function has two additional properties:
 *          - `flush`: Invokes the debounced function immediately and returns its return value
 *          - `cancel`: Cancels the debouncing process and resets the debouncing timer
 */function(e,t,n){let r,i,s;let a=n&&n.maxWait?Math.max(n.maxWait,t):0;function o(){return l(),r=e()}function l(){void 0!==i&&clearTimeout(i),void 0!==s&&clearTimeout(s),i=s=void 0}function c(){return i&&clearTimeout(i),i=setTimeout(o,t),a&&void 0===s&&(s=setTimeout(o,a)),r}return c.cancel=l,c.flush=function(){return void 0!==i||void 0!==s?o():r},c}(()=>this._flush(),this._options.flushMinDelay,{maxWait:this._options.flushMaxDelay}),this._throttledAddEvent=/**
 * Create a throttled function off a given function.
 * When calling the throttled function, it will call the original function only
 * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.
 *
 * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,
 * or else the return value of the original function.
 */// eslint-disable-next-line @typescript-eslint/no-explicit-any
function(e,t,n){let r=new Map,i=e=>{let t=e-5;r.forEach((e,n)=>{n<t&&r.delete(n)})},s=()=>[...r.values()].reduce((e,t)=>e+t,0),a=!1;return(...t)=>{// Date in second-precision, which we use as basis for the throttling
let n=Math.floor(Date.now()/1e3);// If already over limit, do nothing
if(// First, make sure to delete any old entries
i(n),s()>=300){let e=a;return a=!0,e?"__SKIPPED":iE}a=!1;let o=r.get(n)||0;return r.set(n,o+1),e(...t)}}((e,t)=>rJ(this,e)?rq(this,e,t):Promise.resolve(null),0,0);let{slowClickTimeout:n,slowClickIgnoreSelectors:r}=this.getOptions(),i=n?{threshold:Math.min(3e3,n),timeout:n,scrollTimeout:300,ignoreSelector:r?r.join(","):""}:void 0;i&&(this.clickDetector=new rv(this,i))}/** Get the event context. */getContext(){return this._context}/** If recording is currently enabled. */isEnabled(){return this._isEnabled}/** If recording is currently paused. */isPaused(){return this._isPaused}/** Get the replay integration options. */getOptions(){return this._options}/**
   * Initializes the plugin based on sampling configuration. Should not be
   * called outside of constructor.
   */initializeSampling(e){let{errorSampleRate:t,sessionSampleRate:n}=this._options;// If neither sample rate is > 0, then do nothing - user will need to call one of
// `start()` or `startBuffering` themselves.
if(!(t<=0)||!(n<=0)){if(// Otherwise if there is _any_ sample rate set, try to load an existing
// session, or create a new one.
this._initializeSessionForSampling(e),!this.session){// This should not happen, something wrong has occurred
this._handleException(Error("Unable to initialize and create session"));return}!1!==this.session.sampled&&(// If segmentId > 0, it means we've previously already captured this session
// In this case, we still want to continue in `session` recording mode
this.recordingMode="buffer"===this.session.sampled&&0===this.session.segmentId?"buffer":"session",rD(`[Replay] Starting replay in ${this.recordingMode} mode`,this._options._experiments.traceInternals),this._initializeRecording())}}/**
   * Start a replay regardless of sampling rate. Calling this will always
   * create a new session. Will throw an error if replay is already in progress.
   *
   * Creates or loads a session, attaches listeners to varying events (DOM,
   * _performanceObserver, Recording, Sentry SDK, etc)
   */start(){if(this._isEnabled&&"session"===this.recordingMode)throw Error("Replay recording is already in progress");if(this._isEnabled&&"buffer"===this.recordingMode)throw Error("Replay buffering is in progress, call `flush()` to save the replay");rD("[Replay] Starting replay in session mode",this._options._experiments.traceInternals);let e=rV({maxReplayDuration:this._options.maxReplayDuration,sessionIdleExpire:this.timeouts.sessionIdleExpire,traceInternals:this._options._experiments.traceInternals},{stickySession:this._options.stickySession,// This is intentional: create a new session-based replay when calling `start()`
sessionSampleRate:1,allowBuffering:!1});this.session=e,this._initializeRecording()}/**
   * Start replay buffering. Buffers until `flush()` is called or, if
   * `replaysOnErrorSampleRate` > 0, an error occurs.
   */startBuffering(){if(this._isEnabled)throw Error("Replay recording is already in progress");rD("[Replay] Starting replay in buffer mode",this._options._experiments.traceInternals);let e=rV({sessionIdleExpire:this.timeouts.sessionIdleExpire,maxReplayDuration:this._options.maxReplayDuration,traceInternals:this._options._experiments.traceInternals},{stickySession:this._options.stickySession,sessionSampleRate:0,allowBuffering:!0});this.session=e,this.recordingMode="buffer",this._initializeRecording()}/**
   * Start recording.
   *
   * Note that this will cause a new DOM checkout
   */startRecording(){try{var e;let t;this._stopRecording=rm({...this._recordingOptions,// When running in error sampling mode, we need to overwrite `checkoutEveryNms`
// Without this, it would record forever, until an error happens, which we don't want
// instead, we'll always keep the last 60 seconds of replay before an error happened
..."buffer"===this.recordingMode&&{checkoutEveryNms:6e4},emit:(e=this,t=!1,(n,r)=>{// If this is false, it means session is expired, create and a new session and wait for checkout
if(!e.checkAndHandleExpiredSession()){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn("[Replay] Received replay event after session expired.");return}// `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`
// We also want to treat the first event as a checkout, so we handle this specifically here
let i=r||!t;t=!0,// The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.
e.addUpdate(()=>{// If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),
// Skip all further steps
if("buffer"===e.recordingMode&&i&&e.setInitialState(),!rZ(e,n,i))return!0;// Different behavior for full snapshots (type=2), ignore other event types
// See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16
if(!i)return!1;// If there is a previousSessionId after a full snapshot occurs, then
// the replay session was started due to session expiration. The new session
// is started before triggering a new checkout and contains the id
// of the previous session. Do not immediately flush in this case
// to avoid capturing only the checkout and instead the replay will
// be captured if they perform any follow-up actions.
if(i&&e.session&&0===e.session.segmentId&&rZ(e,/**
 * Exported for tests
 */function(e){let t=e.getOptions();return{type:nU.Custom,timestamp:Date.now(),data:{tag:"options",payload:{sessionSampleRate:t.sessionSampleRate,errorSampleRate:t.errorSampleRate,useCompressionOption:t.useCompression,blockAllMedia:t.blockAllMedia,maskAllText:t.maskAllText,maskAllInputs:t.maskAllInputs,useCompression:!!e.eventBuffer&&"worker"===e.eventBuffer.type,networkDetailHasUrls:t.networkDetailAllowUrls.length>0,networkCaptureBodies:t.networkCaptureBodies,networkRequestHasHeaders:t.networkRequestHeaders.length>0,networkResponseHasHeaders:t.networkResponseHeaders.length>0}}}}(e),!1),e.session&&e.session.previousSessionId)return!0;// When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer
// this should usually be the timestamp of the checkout event, but to be safe...
if("buffer"===e.recordingMode&&e.session&&e.eventBuffer){let t=e.eventBuffer.getEarliestTimestamp();t&&(rA(`[Replay] Updating session start time to earliest event in buffer to ${new Date(t)}`,e.getOptions()._experiments.traceInternals),e.session.started=t,e.getOptions().stickySession&&rF(e.session))}return"session"===e.recordingMode&&// a previous session ID. In this case, we want to buffer events
// for a set amount of time before flushing. This can help avoid
// capturing replays of users that immediately close the window.
e.flush(),!0})}),onMutation:this._onMutationHandler})}catch(e){this._handleException(e)}}/**
   * Stops the recording, if it was running.
   *
   * Returns true if it was previously stopped, or is now stopped,
   * otherwise false.
   */stopRecording(){try{return this._stopRecording&&(this._stopRecording(),this._stopRecording=void 0),!0}catch(e){return this._handleException(e),!1}}/**
   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK
   * does not support a teardown
   */async stop({forceFlush:e=!1,reason:t}={}){if(this._isEnabled){// We can't move `_isEnabled` after awaiting a flush, otherwise we can
// enter into an infinite loop when `stop()` is called while flushing.
this._isEnabled=!1;try{rA(`[Replay] Stopping Replay${t?` triggered by ${t}`:""}`,this._options._experiments.traceInternals),this._removeListeners(),this.stopRecording(),this._debouncedFlush.cancel(),e&&await this._flush({force:!0}),// After flush, destroy event buffer
this.eventBuffer&&this.eventBuffer.destroy(),this.eventBuffer=null,/**
 * Deletes a session from storage
 */function(){if(rP())try{tH.sessionStorage.removeItem(tV)}catch(e){// Ignore potential SecurityError exceptions
}}(),this.session=void 0}catch(e){this._handleException(e)}}}/**
   * Pause some replay functionality. See comments for `_isPaused`.
   * This differs from stop as this only stops DOM recording, it is
   * not as thorough of a shutdown as `stop()`.
   */pause(){this._isPaused||(this._isPaused=!0,this.stopRecording(),rA("[Replay] Pausing replay",this._options._experiments.traceInternals))}/**
   * Resumes recording, see notes for `pause().
   *
   * Note that calling `startRecording()` here will cause a
   * new DOM checkout.`
   */resume(){this._isPaused&&this._checkSession()&&(this._isPaused=!1,this.startRecording(),rA("[Replay] Resuming replay",this._options._experiments.traceInternals))}/**
   * If not in "session" recording mode, flush event buffer which will create a new replay.
   * Unless `continueRecording` is false, the replay will continue to record and
   * behave as a "session"-based replay.
   *
   * Otherwise, queue up a flush.
   */async sendBufferedReplayOrFlush({continueRecording:e=!0}={}){if("session"===this.recordingMode)return this.flushImmediate();let t=Date.now();rA("[Replay] Converting buffer to session",this._options._experiments.traceInternals),// Allow flush to complete before resuming as a session recording, otherwise
// the checkout from `startRecording` may be included in the payload.
// Prefer to keep the error replay as a separate (and smaller) segment
// than the session replay.
await this.flushImmediate();let n=this.stopRecording();e&&n&&"session"!==this.recordingMode&&(// Re-start recording in session-mode
this.recordingMode="session",this.session&&(this._updateUserActivity(t),this._updateSessionActivity(t),this._maybeSaveSession()),this.startRecording())}/**
   * We want to batch uploads of replay events. Save events only if
   * `<flushMinDelay>` milliseconds have elapsed since the last event
   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.
   *
   * Accepts a callback to perform side-effects and returns true to stop batch
   * processing and hand back control to caller.
   */addUpdate(e){// We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)
let t=e();// If this option is turned on then we will only want to call `flush`
// explicitly
"buffer"!==this.recordingMode&&!0!==t&&// addUpdate is called quite frequently - use _debouncedFlush so that it
// respects the flush delays and does not flush immediately
this._debouncedFlush()}/**
   * Updates the user activity timestamp and resumes recording. This should be
   * called in an event handler for a user action that we consider as the user
   * being "active" (e.g. a mouse click).
   */triggerUserActivity(){// This case means that recording was once stopped due to inactivity.
// Ensure that recording is resumed.
if(this._updateUserActivity(),!this._stopRecording){// Create a new session, otherwise when the user action is flushed, it
// will get rejected due to an expired session.
if(!this._checkSession())return;// Note: This will cause a new DOM checkout
this.resume();return}// Otherwise... recording was never suspended, continue as normalish
this.checkAndHandleExpiredSession(),this._updateSessionActivity()}/**
   * Updates the user activity timestamp *without* resuming
   * recording. Some user events (e.g. keydown) can be create
   * low-value replays that only contain the keypress as a
   * breadcrumb. Instead this would require other events to
   * create a new replay after a session has expired.
   */updateUserActivity(){this._updateUserActivity(),this._updateSessionActivity()}/**
   * Only flush if `this.recordingMode === 'session'`
   */conditionalFlush(){return"buffer"===this.recordingMode?Promise.resolve():this.flushImmediate()}/**
   * Flush using debounce flush
   */flush(){return this._debouncedFlush()}/**
   * Always flush via `_debouncedFlush` so that we do not have flushes triggered
   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be
   * cases of mulitple flushes happening closely together.
   */flushImmediate(){// `.flush` is provided by the debounced function, analogously to lodash.debounce
return this._debouncedFlush(),this._debouncedFlush.flush()}/**
   * Cancels queued up flushes.
   */cancelFlush(){this._debouncedFlush.cancel()}/** Get the current sesion (=replay) ID */getSessionId(){return this.session&&this.session.id}/**
   * Checks if recording should be stopped due to user inactivity. Otherwise
   * check if session is expired and create a new session if so. Triggers a new
   * full snapshot on new session.
   *
   * Returns true if session is not expired, false otherwise.
   * @hidden
   */checkAndHandleExpiredSession(){// Prevent starting a new session if the last user activity is older than
// SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new
// session+recording. This creates noisy replays that do not have much
// content in them.
if(this._lastActivity&&rW(this._lastActivity,this.timeouts.sessionIdlePause)&&this.session&&"session"===this.session.sampled){// Pause recording only for session-based replays. Otherwise, resuming
// will create a new replay and will conflict with users who only choose
// to record error-based replays only. (e.g. the resumed replay will not
// contain a reference to an error)
this.pause();return}return!!this._checkSession()}/**
   * Capture some initial state that can change throughout the lifespan of the
   * replay. This is required because otherwise they would be captured at the
   * first flush.
   */setInitialState(){let e=`${tH.location.pathname}${tH.location.hash}${tH.location.search}`,t=`${tH.location.origin}${e}`;this.performanceEvents=[],// Reset _context as well
this._clearContext(),this._context.initialUrl=t,this._context.initialTimestamp=Date.now(),this._context.urls.push(t)}/**
   * Add a breadcrumb event, that may be throttled.
   * If it was throttled, we add a custom breadcrumb to indicate that.
   */throttledAddEvent(e,t){let n=this._throttledAddEvent(e,t);// If this is THROTTLED, it means we have throttled the event for the first time
// In this case, we want to add a breadcrumb indicating that something was skipped
if(n===iE){let e=rw({category:"replay.throttled"});this.addUpdate(()=>!rZ(this,{type:5,timestamp:e.timestamp||0,data:{tag:"breadcrumb",payload:e,metric:!0}}))}return n}/**
   * This will get the parametrized route name of the current page.
   * This is only available if performance is enabled, and if an instrumented router is used.
   */getCurrentRoute(){let e=this.lastTransaction||tv().getScope().getTransaction();if(e&&["route","custom"].includes(e.metadata.source))return e.name}/**
   * Initialize and start all listeners to varying events (DOM,
   * Performance Observer, Recording, Sentry SDK, etc)
   */_initializeRecording(){this.setInitialState(),// this method is generally called on page load or manually - in both cases
// we should treat it as an activity
this._updateSessionActivity(),this.eventBuffer=/**
 * Create an event buffer for replays.
 */function({useCompression:e}){// eslint-disable-next-line no-restricted-globals
if(e&&window.Worker)try{let e=function(){let e=new Blob([rN]);return URL.createObjectURL(e)}();rA("[Replay] Using compression worker");let t=new Worker(e);return new rG(t)}catch(e){rA("[Replay] Failed to create compression worker");// Fall back to use simple event buffer array
}return rA("[Replay] Using simple buffer"),new rU}({useCompression:this._options.useCompression}),this._removeListeners(),this._addListeners(),// Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout
this._isEnabled=!0,this._isPaused=!1,this.startRecording()}/** A wrapper to conditionally capture exceptions. */_handleException(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay]",e),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&this._options._experiments&&this._options._experiments.captureExceptions&&tw(e)}/**
   * Loads (or refreshes) the current session.
   */_initializeSessionForSampling(e){// Whenever there is _any_ error sample rate, we always allow buffering
// Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors
let t=this._options.errorSampleRate>0,n=rV({sessionIdleExpire:this.timeouts.sessionIdleExpire,maxReplayDuration:this._options.maxReplayDuration,traceInternals:this._options._experiments.traceInternals,previousSessionId:e},{stickySession:this._options.stickySession,sessionSampleRate:this._options.sessionSampleRate,allowBuffering:t});this.session=n}/**
   * Checks and potentially refreshes the current session.
   * Returns false if session is not recorded.
   */_checkSession(){// If there is no session yet, we do not want to refresh anything
// This should generally not happen, but to be safe....
if(!this.session)return!1;let e=this.session;return!rH(e,{sessionIdleExpire:this.timeouts.sessionIdleExpire,maxReplayDuration:this._options.maxReplayDuration})||(this._refreshSession(e),!1)}/**
   * Refresh a session with a new one.
   * This stops the current session (without forcing a flush, as that would never work since we are expired),
   * and then does a new sampling based on the refreshed session.
   */async _refreshSession(e){this._isEnabled&&(await this.stop({reason:"refresh session"}),this.initializeSampling(e.id))}/**
   * Adds listeners to record events for the replay
   */_addListeners(){try{tH.document.addEventListener("visibilitychange",this._handleVisibilityChange),tH.addEventListener("blur",this._handleWindowBlur),tH.addEventListener("focus",this._handleWindowFocus),tH.addEventListener("keydown",this._handleKeyboardEvent),this.clickDetector&&this.clickDetector.addListeners(),this._hasInitializedCoreListeners||(/**
 * Add global listeners that cannot be removed.
 */function(e){// Listeners from core SDK //
let t=tv().getScope(),n=tv().getClient();t.addScopeListener(ip(e)),tL("dom",rx(e)),tL("history",t=>{if(!e.isEnabled())return;let n=function(e){let{from:t,to:n}=e,r=Date.now()/1e3;return{type:"navigation.push",start:r,end:r,name:n,data:{previous:t}}}(t);null!==n&&(// Need to collect visited URLs
e.getContext().urls.push(n.name),e.triggerUserActivity(),e.addUpdate(()=>(rQ(e,[n]),!1)))}),/**
 * This method does two things:
 * - It enriches the regular XHR/fetch breadcrumbs with request/response size data
 * - It captures the XHR/fetch breadcrumbs to the replay
 *   (enriching it with further data that is _not_ added to the regular breadcrumbs)
 */function(e){let t=tv().getClient();try{let n=new TextEncoder,{networkDetailAllowUrls:r,networkDetailDenyUrls:i,networkCaptureBodies:s,networkRequestHeaders:a,networkResponseHeaders:o}=e.getOptions(),l={replay:e,textEncoder:n,networkDetailAllowUrls:r,networkDetailDenyUrls:i,networkCaptureBodies:s,networkRequestHeaders:a,networkResponseHeaders:o};t&&t.on?t.on("beforeAddBreadcrumb",(e,t)=>/** just exported for tests */(function(e,t,n){if(t.data)try{var r,i;"xhr"===t.category&&(r=n)&&r.xhr&&(// This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick
    // Because the hook runs synchronously, and the breadcrumb is afterwards passed on
    // So any async mutations to it will not be reflected in the final breadcrumb
    /**
 * Enrich a breadcrumb with additional data.
 * This has to be sync & mutate the given breadcrumb,
 * as the breadcrumb is afterwards consumed by other handlers.
 */function(e,t,n){let{xhr:r,input:i}=t,s=r5(i,n.textEncoder),a=r.getResponseHeader("content-length")?r3(r.getResponseHeader("content-length")):r5(r.response,n.textEncoder);void 0!==s&&(e.data.request_body_size=s),void 0!==a&&(e.data.response_body_size=a)}(t,n,e),iu(t,n,e)),"fetch"===t.category&&(i=n)&&i.response&&(// This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick
    // Because the hook runs synchronously, and the breadcrumb is afterwards passed on
    // So any async mutations to it will not be reflected in the final breadcrumb
    /**
 * Enrich a breadcrumb with additional data.
 * This has to be sync & mutate the given breadcrumb,
 * as the breadcrumb is afterwards consumed by other handlers.
 */function(e,t,n){let{input:r,response:i}=t,s=io(r),a=r5(s,n.textEncoder),o=i?r3(i.headers.get("content-length")):void 0;void 0!==a&&(e.data.request_body_size=a),void 0!==o&&(e.data.response_body_size=o)}(t,n,e),ir(t,n,e))}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.warn("Error when enriching network breadcrumb")}})(l,e,t)):(tL("fetch",t=>{if(!e.isEnabled())return;let n=/** only exported for tests */function(e){let{startTimestamp:t,endTimestamp:n,fetchData:r,response:i}=e;if(!n)return null;// This is only used as a fallback, so we know the body sizes are never set here
let{method:s,url:a}=r;return{type:"resource.fetch",start:t/1e3,end:n/1e3,name:a,data:{method:s,statusCode:i?i.status:void 0}}}(t);r0(e,n)}),tL("xhr",t=>{if(!e.isEnabled())return;let n=/** only exported for tests */function(e){let{startTimestamp:t,endTimestamp:n,xhr:r}=e,i=r[tB];if(!t||!n||!i)return null;// This is only used as a fallback, so we know the body sizes are never set here
let{method:s,url:a,status_code:o}=i;return void 0===a?null:{type:"resource.xhr",name:a,start:t/1e3,end:n/1e3,data:{method:s,statusCode:o}}}(t);r0(e,n)}))}catch(e){// Do nothing
}}(e);// Tag all (non replay) events that get sent to Sentry with the current
// replay ID so that we can reference them later in the UI
let r=/**
 * Returns a listener to be added to `addGlobalEventProcessor(listener)`.
 */function(e,t=!1){let n=t?rX(e):void 0;return Object.assign((t,r)=>{// Do nothing if replay has been disabled
if(!e.isEnabled())return t;if("replay_event"===t.type)return(// Replays have separate set of breadcrumbs, do not include breadcrumbs
// from core SDK
delete t.breadcrumbs,t);// We only want to handle errors & transactions, nothing else
if(t.type&&!rK(t))return t;// Ensure we do not add replay_id if the session is expired
let i=e.checkAndHandleExpiredSession();if(!i)return t;// Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb
// As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users
if(!t.type&&t.exception&&t.exception.values&&t.exception.values.length&&(r.originalException&&r.originalException.__rrweb__||t.exception.values.some(e=>!!e.stacktrace&&!!e.stacktrace.frames&&!!e.stacktrace.frames.length&&e.stacktrace.frames.some(e=>e.filename&&e.filename.includes("/rrweb/src/"))))&&!e.getOptions()._experiments.captureExceptions)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.log("[Replay] Ignoring error from rrweb internals",t),null;// When in buffer mode, we decide to sample here.
// Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled
// And convert the buffer session to a full session
let s="buffer"===e.recordingMode&&t.message!==tZ&&!!t.exception&&!t.type&&rY(e.getOptions().errorSampleRate),a=s||"session"===e.recordingMode;return a&&(t.tags={...t.tags,replayId:e.getSessionId()}),n&&n(t,{statusCode:200}),t},{id:"Replay"})}(e,!(n&&n.on));n&&n.addEventProcessor?n.addEventProcessor(r):tr().push(r),n&&n.on&&(n.on("afterSendEvent",rX(e)),n.on("createDsc",t=>{let n=e.getSessionId();// We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)
n&&e.isEnabled()&&"session"===e.recordingMode&&(t.replay_id=n)}),n.on("startTransaction",t=>{e.lastTransaction=t}),// We may be missing the initial startTransaction due to timing issues,
// so we capture it on finish again.
n.on("finishTransaction",t=>{e.lastTransaction=t}))}(this),this._hasInitializedCoreListeners=!0)}catch(e){this._handleException(e)}// PerformanceObserver //
"PerformanceObserver"in tH&&(this._performanceObserver=/**
 * Sets up a PerformanceObserver to listen to all performance entry types.
 */function(e){let t=new PerformanceObserver(t=>{// For whatever reason the observer was returning duplicate navigation
// entries (the other entry types were not duplicated).
let n=/**
 * There are some difficulties diagnosing why there are duplicate navigation
 * entries. We've witnessed several intermittent results:
 * - duplicate entries have duration = 0
 * - duplicate entries are the same object reference
 * - none of the above
 *
 * Compare the values of several keys to determine if the entries are duplicates or not.
 */// TODO (high-prio): Figure out wth is returned here
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function(e,t){// Partition `currentList` into 3 different lists based on entryType
let[n,r,i]=e.reduce((e,t)=>("navigation"===t.entryType?e[0].push(t):"largest-contentful-paint"===t.entryType?e[1].push(t):e[2].push(t),e),[[],[],[]]),s=[],a=[],o=r.length?r[r.length-1]// Take the last element as list is sorted
:void 0;// Re-combine and sort by startTime
return t.forEach(e=>{if("largest-contentful-paint"===e.entryType){// We want the latest LCP event only
(!o||o.startTime<e.startTime)&&(o=e);return}if("navigation"===e.entryType){// Check if the navigation entry is contained in currentList or newList
!(e.duration>0)||n.find(rR(e))||a.find(rR(e))||a.push(e);// Otherwise this navigation entry is considered a duplicate and is thrown away
return}s.push(e)}),[...o?[o]:[],...n,...i,...s,...a].sort((e,t)=>e.startTime-t.startTime)}(e.performanceEvents,t.getEntries());e.performanceEvents=n});return["element","event","first-input","largest-contentful-paint","layout-shift","longtask","navigation","paint","resource"].forEach(e=>{try{t.observe({type:e,buffered:!0})}catch(e){// This can throw if an entry type is not supported in the browser.
// Ignore these errors.
}}),t}(this))}/**
   * Cleans up listeners that were created in `_addListeners`
   */_removeListeners(){try{tH.document.removeEventListener("visibilitychange",this._handleVisibilityChange),tH.removeEventListener("blur",this._handleWindowBlur),tH.removeEventListener("focus",this._handleWindowFocus),tH.removeEventListener("keydown",this._handleKeyboardEvent),this.clickDetector&&this.clickDetector.removeListeners(),this._performanceObserver&&(this._performanceObserver.disconnect(),this._performanceObserver=void 0)}catch(e){this._handleException(e)}}/**
   * Handle when visibility of the page content changes. Opening a new tab will
   * cause the state to change to hidden because of content of current page will
   * be hidden. Likewise, moving a different window to cover the contents of the
   * page will also trigger a change to a hidden state.
   */__init(){this._handleVisibilityChange=()=>{"visible"===tH.document.visibilityState?this._doChangeToForegroundTasks():this._doChangeToBackgroundTasks()}}/**
   * Handle when page is blurred
   */__init2(){this._handleWindowBlur=()=>{let e=rw({category:"ui.blur"});// Do not count blur as a user action -- it's part of the process of them
// leaving the page
this._doChangeToBackgroundTasks(e)}}/**
   * Handle when page is focused
   */__init3(){this._handleWindowFocus=()=>{let e=rw({category:"ui.focus"});// Do not count focus as a user action -- instead wait until they focus and
// interactive with page
this._doChangeToForegroundTasks(e)}}/** Ensure page remains active when a key is pressed. */__init4(){this._handleKeyboardEvent=e=>{!/** Handle keyboard events & create breadcrumbs. */function(e,t){if(!e.isEnabled())return;// Update user activity, but do not restart recording as it can create
// noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new
// session with a single "keydown" breadcrumb is created)
e.updateUserActivity();let n=/** exported only for tests */function(e){var t;let{metaKey:n,shiftKey:r,ctrlKey:i,altKey:s,key:a,target:o}=e;// never capture for input fields
if(!o||"INPUT"===(t=o).tagName||"TEXTAREA"===t.tagName||t.isContentEditable||!a)return null;let l=1===a.length;// other keys like Escape, Tab, etc have a longer length
// Do not capture breadcrumb if only a word key is pressed
// This could leak e.g. user input
if(!(n||i||s)&&l)return null;let c=ts(o,{maxStringLength:200})||"<unknown>",u=rI(o,c);return rw({category:"ui.keyDown",message:c,data:{...u.data,metaKey:n,shiftKey:r,ctrlKey:i,altKey:s,key:a}})}(t);n&&ry(e,n)}(this,e)}}/**
   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)
   */_doChangeToBackgroundTasks(e){if(!this.session)return;let t=r$(this.session,{maxReplayDuration:this._options.maxReplayDuration,sessionIdleExpire:this.timeouts.sessionIdleExpire});t||(e&&this._createCustomBreadcrumb(e),// Send replay when the page/tab becomes hidden. There is no reason to send
// replay if it becomes visible, since no actions we care about were done
// while it was hidden
this.conditionalFlush())}/**
   * Tasks to run when we consider a page to be visible (via focus and/or visibility)
   */_doChangeToForegroundTasks(e){if(!this.session)return;let t=this.checkAndHandleExpiredSession();if(!t){// If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION
// ms, we will re-use the existing session, otherwise create a new
// session
rA("[Replay] Document has become active, but session has expired");return}e&&this._createCustomBreadcrumb(e)}/**
   * Trigger rrweb to take a full snapshot which will cause this plugin to
   * create a new Replay event.
   */_triggerFullSnapshot(e=!0){try{rA("[Replay] Taking full rrweb snapshot"),rm.takeFullSnapshot(e)}catch(e){this._handleException(e)}}/**
   * Update user activity (across session lifespans)
   */_updateUserActivity(e=Date.now()){this._lastActivity=e}/**
   * Updates the session's last activity timestamp
   */_updateSessionActivity(e=Date.now()){this.session&&(this.session.lastActivity=e,this._maybeSaveSession())}/**
   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb
   */_createCustomBreadcrumb(e){this.addUpdate(()=>{this.throttledAddEvent({type:nU.Custom,timestamp:e.timestamp||0,data:{tag:"breadcrumb",payload:e}})})}/**
   * Observed performance events are added to `this.performanceEvents`. These
   * are included in the replay event before it is finished and sent to Sentry.
   */_addPerformanceEntries(){// Copy and reset entries before processing
let e=[...this.performanceEvents];return this.performanceEvents=[],Promise.all(rQ(this,e.map(im).filter(Boolean)))}/**
   * Clear _context
   */_clearContext(){// XXX: `initialTimestamp` and `initialUrl` do not get cleared
this._context.errorIds.clear(),this._context.traceIds.clear(),this._context.urls=[]}/** Update the initial timestamp based on the buffer content. */_updateInitialTimestampFromEventBuffer(){let{session:e,eventBuffer:t}=this;if(!e||!t||e.segmentId)return;let n=t.getEarliestTimestamp();n&&n<this._context.initialTimestamp&&(this._context.initialTimestamp=n)}/**
   * Return and clear _context
   */_popEventContext(){let e={initialTimestamp:this._context.initialTimestamp,initialUrl:this._context.initialUrl,errorIds:Array.from(this._context.errorIds),traceIds:Array.from(this._context.traceIds),urls:this._context.urls};return this._clearContext(),e}/**
   * Flushes replay event buffer to Sentry.
   *
   * Performance events are only added right before flushing - this is
   * due to the buffered performance observer events.
   *
   * Should never be called directly, only by `flush`
   */async _runFlush(){let e=this.getSessionId();if(!this.session||!this.eventBuffer||!e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] No session or eventBuffer found to flush.");return}// Check eventBuffer again, as it could have been stopped in the meanwhile
if(await this._addPerformanceEntries(),this.eventBuffer&&this.eventBuffer.hasEvents&&(// Only attach memory event if eventBuffer is not empty
await ih(this),this.eventBuffer&&e===this.getSessionId()))try{// This uses the data from the eventBuffer, so we need to call this before `finish()
this._updateInitialTimestampFromEventBuffer();let t=Date.now();// Check total duration again, to avoid sending outdated stuff
// We leave 30s wiggle room to accomodate late flushing etc.
// This _could_ happen when the browser is suspended during flushing, in which case we just want to stop
if(t-this._context.initialTimestamp>this._options.maxReplayDuration+3e4)throw Error("Session is too long, not sending replay");let n=this._popEventContext(),r=this.session.segmentId++;this._maybeSaveSession();// Note this empties the event buffer regardless of outcome of sending replay
let i=await this.eventBuffer.finish();await iv({replayId:e,recordingData:i,segmentId:r,eventContext:n,session:this.session,options:this.getOptions(),timestamp:t})}catch(t){this._handleException(t),// This means we retried 3 times and all of them failed,
// or we ran into a problem we don't want to retry, like rate limiting.
// In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments
this.stop({reason:"sendReplay"});let e=tv().getClient();e&&e.recordDroppedEvent("send_error","replay")}}/**
   * Flush recording data to Sentry. Creates a lock so that only a single flush
   * can be active at a time. Do not call this directly.
   */__init5(){this._flush=async({force:e=!1}={})=>{if(!this._isEnabled&&!e)return;if(!this.checkAndHandleExpiredSession()){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] Attempting to finish replay event after session expired.");return}if(!this.session){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error("[Replay] No session found to flush.");return}let t=this.session.started,n=Date.now(),r=n-t;// A flush is about to happen, cancel any queued flushes
this._debouncedFlush.cancel();// If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it
// This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar
let i=r<this._options.minReplayDuration,s=r>this._options.maxReplayDuration+5e3;if(i||s){rA(`[Replay] Session duration (${Math.floor(r/1e3)}s) is too ${i?"short":"long"}, not sending replay.`,this._options._experiments.traceInternals),i&&this._debouncedFlush();return}let a=this.eventBuffer;// this._flushLock acts as a lock so that future calls to `_flush()`
// will be blocked until this promise resolves
if(a&&0===this.session.segmentId&&!a.hasCheckout&&rA("[Replay] Flushing initial segment without checkout.",this._options._experiments.traceInternals),!this._flushLock){this._flushLock=this._runFlush(),await this._flushLock,this._flushLock=void 0;return}// Wait for previous flush to finish, then call the debounced `_flush()`.
// It's possible there are other flush requests queued and waiting for it
// to resolve. We want to reduce all outstanding requests (as well as any
// new flush requests that occur within a second of the locked flush
// completing) into a single flush.
try{await this._flushLock}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&tt.error(e)}finally{this._debouncedFlush()}}}/** Save the session, if it is sticky */_maybeSaveSession(){this.session&&this._options.stickySession&&rF(this.session)}/** Handler for rrweb.record.onMutation */__init6(){this._onMutationHandler=e=>{let t=e.length,n=this._options.mutationLimit,r=this._options.mutationBreadcrumbLimit,i=n&&t>n;// Create a breadcrumb if a lot of mutations happen at the same time
// We can show this in the UI as an information with potential performance improvements
if(t>r||i){let e=rw({category:"replay.mutations",data:{count:t,limit:i}});this._createCustomBreadcrumb(e)}return(// Stop replay if over the mutation limit
!i||(this.stop({reason:"mutationLimit",forceFlush:"session"===this.recordingMode}),!1))}}}function iw(e,t,n,r){let i="string"==typeof r?r.split(","):[],s=[...e,// @deprecated
...i,// sentry defaults
...t];return void 0!==n&&("string"==typeof n&&s.push(`.${n}`),// eslint-disable-next-line no-console
console.warn("[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.")),s.join(",")}/**
 * Returns true if we are in the browser.
 */function ik(){// eslint-disable-next-line no-restricted-globals
return"undefined"!=typeof window&&(!(0,tW.isNodeEnv)()||void 0!==t$&&"renderer"===t$.type)}const ix='img,image,svg,video,object,picture,embed,map,audio,link[rel="icon"],link[rel="apple-touch-icon"]',iI=["content-length","content-type","accept"];let iC=!1;/**
 * The main replay integration class, to be passed to `init({  integrations: [] })`.
 */class iR{/**
   * @inheritDoc
   */static __initStatic(){this.id="Replay"}/**
   * @inheritDoc
   *//**
   * Options to pass to `rrweb.record()`
   *//**
   * Initial options passed to the replay integration, merged with default values.
   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they
   * can only be finally set when setupOnce() is called.
   *
   * @private
   */constructor({flushMinDelay:e=5e3,flushMaxDelay:t=5500,minReplayDuration:n=4999,maxReplayDuration:r=36e5,stickySession:i=!0,useCompression:s=!0,_experiments:a={},sessionSampleRate:o,errorSampleRate:l,maskAllText:c=!0,maskAllInputs:u=!0,blockAllMedia:d=!0,mutationBreadcrumbLimit:p=750,mutationLimit:h=1e4,slowClickTimeout:f=7e3,slowClickIgnoreSelectors:_=[],networkDetailAllowUrls:m=[],networkDetailDenyUrls:g=[],networkCaptureBodies:y=!0,networkRequestHeaders:S=[],networkResponseHeaders:b=[],mask:v=[],maskAttributes:E=["title","placeholder"],unmask:T=[],block:w=[],unblock:k=[],ignore:x=[],maskFn:I,beforeAddRecordingEvent:C,blockClass:R,blockSelector:N,maskInputOptions:A,maskTextClass:D,maskTextSelector:O,ignoreClass:B}={}){this.name=iR.id;let U=/**
 * Returns privacy related configuration for use in rrweb
 */function({mask:e,unmask:t,block:n,unblock:r,ignore:i,blockClass:s,blockSelector:a,maskTextClass:o,maskTextSelector:l,ignoreClass:c}){let u=iw(e,[".sentry-mask","[data-sentry-mask]"],o,l),d=iw(t,[".sentry-unmask","[data-sentry-unmask]"]),p={// We are making the decision to make text and input selectors the same
maskTextSelector:u,unmaskTextSelector:d,blockSelector:iw(n,[".sentry-block","[data-sentry-block]",'base[href="/"]'],s,a),unblockSelector:iw(r,[".sentry-unblock","[data-sentry-unblock]"]),ignoreSelector:iw(i,[".sentry-ignore","[data-sentry-ignore]",'input[type="file"]'],c)};return s instanceof RegExp&&(p.blockClass=s),o instanceof RegExp&&(p.maskTextClass=o),p}({mask:v,unmask:T,block:w,unblock:k,ignore:x,blockClass:R,blockSelector:N,maskTextClass:D,maskTextSelector:O,ignoreClass:B});if(this._recordingOptions={maskAllInputs:u,maskAllText:c,maskInputOptions:{...A||{},password:!0},maskTextFn:I,maskInputFn:I,maskAttributeFn:(e,t,n)=>/**
 * Masks an attribute if necessary, otherwise return attribute value as-is.
 */(function({el:e,key:t,maskAttributes:n,maskAllText:r,privacyOptions:i,value:s}){return(// We only mask attributes if `maskAllText` is true
    !r||i.unmaskTextSelector&&e.matches(i.unmaskTextSelector)?s:n.includes(t)||// Need to mask `value` attribute for `<input>` if it's a button-like
    // type
    "value"===t&&"INPUT"===e.tagName&&["submit","button"].includes(e.getAttribute("type")||"")?s.replace(/[\S]/g,"*"):s)})({maskAttributes:E,maskAllText:c,privacyOptions:U,key:e,value:t,el:n}),...U,// Our defaults
slimDOMOptions:"all",inlineStylesheet:!0,// Disable inline images as it will increase segment/replay size
inlineImages:!1,// collect fonts, but be aware that `sentry.io` needs to be an allowed
// origin for playback
collectFonts:!0,errorHandler:e=>{try{e.__rrweb__=!0}catch(e){// ignore errors here
// this can happen if the error is frozen or does not allow mutation for other reasons
}}},this._initialOptions={flushMinDelay:e,flushMaxDelay:t,minReplayDuration:Math.min(n,15e3),maxReplayDuration:Math.min(r,36e5),stickySession:i,sessionSampleRate:o,errorSampleRate:l,useCompression:s,blockAllMedia:d,maskAllInputs:u,maskAllText:c,mutationBreadcrumbLimit:p,mutationLimit:h,slowClickTimeout:f,slowClickIgnoreSelectors:_,networkDetailAllowUrls:m,networkDetailDenyUrls:g,networkCaptureBodies:y,networkRequestHeaders:iN(S),networkResponseHeaders:iN(b),beforeAddRecordingEvent:C,_experiments:a},"number"==typeof o&&(// eslint-disable-next-line
console.warn(`[Replay] You are passing \`sessionSampleRate\` to the Replay integration.
This option is deprecated and will be removed soon.
Instead, configure \`replaysSessionSampleRate\` directly in the SDK init options, e.g.:
Sentry.init({ replaysSessionSampleRate: ${o} })`),this._initialOptions.sessionSampleRate=o),"number"==typeof l&&(// eslint-disable-next-line
console.warn(`[Replay] You are passing \`errorSampleRate\` to the Replay integration.
This option is deprecated and will be removed soon.
Instead, configure \`replaysOnErrorSampleRate\` directly in the SDK init options, e.g.:
Sentry.init({ replaysOnErrorSampleRate: ${l} })`),this._initialOptions.errorSampleRate=l),this._initialOptions.blockAllMedia&&// embedded media elements
(this._recordingOptions.blockSelector=this._recordingOptions.blockSelector?`${this._recordingOptions.blockSelector},${ix}`:ix),this._isInitialized&&ik())throw Error("Multiple Sentry Session Replay instances are not supported");this._isInitialized=!0}/** If replay has already been initialized */get _isInitialized(){return iC}/** Update _isInitialized */set _isInitialized(e){iC=e}/**
   * Setup and initialize replay container
   */setupOnce(){ik()&&(this._setup(),// Once upon a time, we tried to create a transaction in `setupOnce` and it would
// potentially create a transaction before some native SDK integrations have run
// and applied their own global event processor. An example is:
// https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts
//
// So we call `this._initialize()` in next event loop as a workaround to wait for other
// global event processors to finish. This is no longer needed, but keeping it
// here to avoid any future issues.
setTimeout(()=>this._initialize()))}/**
   * Start a replay regardless of sampling rate. Calling this will always
   * create a new session. Will throw an error if replay is already in progress.
   *
   * Creates or loads a session, attaches listeners to varying events (DOM,
   * PerformanceObserver, Recording, Sentry SDK, etc)
   */start(){this._replay&&this._replay.start()}/**
   * Start replay buffering. Buffers until `flush()` is called or, if
   * `replaysOnErrorSampleRate` > 0, until an error occurs.
   */startBuffering(){this._replay&&this._replay.startBuffering()}/**
   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK
   * does not support a teardown
   */stop(){return this._replay?this._replay.stop({forceFlush:"session"===this._replay.recordingMode}):Promise.resolve()}/**
   * If not in "session" recording mode, flush event buffer which will create a new replay.
   * Unless `continueRecording` is false, the replay will continue to record and
   * behave as a "session"-based replay.
   *
   * Otherwise, queue up a flush.
   */flush(e){return this._replay&&this._replay.isEnabled()?this._replay.sendBufferedReplayOrFlush(e):Promise.resolve()}/**
   * Get the current session ID.
   */getReplayId(){if(this._replay&&this._replay.isEnabled())return this._replay.getSessionId()}/**
   * Initializes replay.
   */_initialize(){this._replay&&this._replay.initializeSampling()}/** Setup the integration. */_setup(){// Client is not available in constructor, so we need to wait until setupOnce
let e=/** Parse Replay-related options from SDK options */function(e){let t=tv().getClient(),n=t&&t.getOptions(),r={sessionSampleRate:0,errorSampleRate:0,...td(e)};return n?(null==e.sessionSampleRate&&// TODO remove once deprecated rates are removed
null==e.errorSampleRate&&// TODO remove once deprecated rates are removed
null==n.replaysSessionSampleRate&&null==n.replaysOnErrorSampleRate&&console.warn("Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set."),"number"==typeof n.replaysSessionSampleRate&&(r.sessionSampleRate=n.replaysSessionSampleRate),"number"==typeof n.replaysOnErrorSampleRate&&(r.errorSampleRate=n.replaysOnErrorSampleRate)):// eslint-disable-next-line no-console
console.warn("SDK client is not available."),r}(this._initialOptions);this._replay=new iT({options:e,recordingOptions:this._recordingOptions})}}function iN(e){return[...iI,...e.map(e=>e.toLowerCase())]}iR.__initStatic();var iA=z("3vPaK");const iD=["debug","info","warn","error","log","assert","trace"],iO={};/** JSDoc *//**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */function iB(e){if(!("console"in iA.GLOBAL_OBJ))return e();let t=iA.GLOBAL_OBJ.console,n={},r=Object.keys(iO);// Restore all wrapped console methods
r.forEach(e=>{let r=iO[e];n[e]=t[e],t[e]=r});try{return e()}finally{// Revert restoration to wrapped state
r.forEach(e=>{t[e]=n[e]})}}const iU=function(){let e=!1,t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return"undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__?iD.forEach(n=>{// eslint-disable-next-line @typescript-eslint/no-explicit-any
t[n]=(...t)=>{e&&iB(()=>{(0,iA.GLOBAL_OBJ).console[n](`Sentry Logger [${n}]:`,...t)})}}):iD.forEach(e=>{t[e]=()=>void 0}),t}();var iM=z("aBUrw"),iA=z("3vPaK");const iL=Object.prototype.toString;/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */function iG(e,t){return iL.call(e)===`[object ${t}]`}/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function iP(e){return iG(e,"String")}/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */function iY(e){return iG(e,"Object")}/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */function iF(e){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return!!(e&&e.then&&"function"==typeof e.then)}/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */function ij(e,t){try{return e instanceof t}catch(e){return!1}}var iA=z("3vPaK");// eslint-disable-next-line deprecation/deprecation
const iz=(0,iA.getGlobalObject)();/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */function iW(e,t={}){// try/catch both:
// - accessing event.target (see getsentry/raven-js#838, #768)
// - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
// - can throw an exception in some circumstances.
try{let n,r=e,i=[],s=0,a=0,o=Array.isArray(t)?t:t.keyAttrs,l=!Array.isArray(t)&&t.maxStringLength||80;for(;// bail out if
// - nextStr is the 'html' element
// - the length of the string that would be created exceeds maxStringLength
//   (ignore this limit if we are on the first iteration)
r&&s++<5&&(n=/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */function(e,t){let n,r,i,s,a;let o=[];if(!e||!e.tagName)return"";o.push(e.tagName.toLowerCase());// Pairs of attribute keys defined in `serializeAttribute` and their values on element.
let l=t&&t.length?t.filter(t=>e.getAttribute(t)).map(t=>[t,e.getAttribute(t)]):null;if(l&&l.length)l.forEach(e=>{o.push(`[${e[0]}="${e[1]}"]`)});else if(e.id&&o.push(`#${e.id}`),// eslint-disable-next-line prefer-const
(n=e.className)&&iP(n))for(a=0,r=n.split(/\s+/);a<r.length;a++)o.push(`.${r[a]}`);let c=["aria-label","type","name","title","alt"];for(a=0;a<c.length;a++)i=c[a],(s=e.getAttribute(i))&&o.push(`[${i}="${s}"]`);return o.join("")}(r,o),"html"!==n&&(!(s>1)||!(a+3*i.length+n.length>=l)));)i.push(n),a+=n.length,r=r.parentNode;return i.reverse().join(" > ")}catch(e){return"<unknown>"}}/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */function i$(e,t,n){if(!(t in e))return;let r=e[t],i=n(r);"function"==typeof i&&/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */function(e,t){try{let n=t.prototype||{};e.prototype=t.prototype=n,iH(e,"__sentry_original__",t)}catch(e){}// eslint-disable-line no-empty
}(i,r),e[t]=i}/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */function iH(e,t,n){try{Object.defineProperty(e,t,{// enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
value:n,writable:!0,configurable:!0})}catch(n){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`Failed to add non-enumerable property "${t}" to object`,e)}}/**
 * Given any object, return a new object having removed all fields whose value was `undefined`.
 * Works recursively on objects and arrays.
 *
 * Attention: This function keeps circular references in the returned object.
 */function iV(e){// This map keeps track of what already visited nodes map to.
// Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular
// references as the input object.
let t=new Map;// This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API
return function e(t,n){if(iY(t)){// If this node has already been visited due to a circular reference, return the object it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i={};for(let r of(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),Object.keys(t)))void 0!==t[r]&&(i[r]=e(t[r],n));return i}if(Array.isArray(t)){// If this node has already been visited due to a circular reference, return the array it was mapped to in the new object
let r=n.get(t);if(void 0!==r)return r;let i=[];return(// Store the mapping of this value in case we visit it again, in case of circular data
n.set(t,i),t.forEach(t=>{i.push(e(t,n))}),i)}return t}(e,t)}var iA=z("3vPaK");/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */function iZ(){let e=iA.GLOBAL_OBJ,t=e.crypto||e.msCrypto,n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,"");t&&t.getRandomValues&&(n=()=>t.getRandomValues(new Uint8Array(1))[0])}catch(e){// some runtimes can crash invoking crypto
// https://github.com/getsentry/sentry-javascript/issues/8935
}// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
// Concatenating the following numbers as strings results in '10000000100040008000100000000000'
return"10000000100040008000100000000000".replace(/[018]/g,e=>(e^(15&n())>>e/4).toString(16))}const iq="production";var iM=z("aBUrw"),iA=z("3vPaK");(B=G||(G={}))[B.PENDING=0]="PENDING",B[B.RESOLVED=1]="RESOLVED",B[B.REJECTED=2]="REJECTED";/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */class iJ{constructor(e){iJ.prototype.__init.call(this),iJ.prototype.__init2.call(this),iJ.prototype.__init3.call(this),iJ.prototype.__init4.call(this),this._state=G.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}/** JSDoc */then(e,t){return new iJ((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else // TODO: FIXME
n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()})}/** JSDoc */catch(e){return this.then(e=>e,e)}/** JSDoc */finally(e){return new iJ((t,n)=>{let r,i;return this.then(t=>{i=!1,r=t,e&&e()},t=>{i=!0,r=t,e&&e()}).then(()=>{if(i){n(r);return}t(r)})})}/** JSDoc */__init(){this._resolve=e=>{this._setResult(G.RESOLVED,e)}}/** JSDoc */__init2(){this._reject=e=>{this._setResult(G.REJECTED,e)}}/** JSDoc */__init3(){this._setResult=(e,t)=>{if(this._state===G.PENDING){if(iF(t)){t.then(this._resolve,this._reject);return}this._state=e,this._value=t,this._executeHandlers()}}}/** JSDoc */__init4(){this._executeHandlers=()=>{if(this._state===G.PENDING)return;let e=this._handlers.slice();this._handlers=[],e.forEach(e=>{e[0]||(this._state===G.RESOLVED&&e[1](this._value),this._state===G.REJECTED&&e[2](this._value),e[0]=!0)})}}}var iM=z("aBUrw");/**
 * Updates a session object with the properties passed in the context.
 *
 * Note that this function mutates the passed object and returns void.
 * (Had to do this instead of returning a new and updated session because closing and sending a session
 * makes an update to the session after it was passed to the sending logic.
 * @see BaseClient.captureSession )
 *
 * @param session the `Session` to update
 * @param context the `SessionContext` holding the properties that should be updated in @param session
 */// eslint-disable-next-line complexity
function iK(e,t={}){if(!t.user||(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||(0,iM.timestampInSeconds)(),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:iZ()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),"number"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if("number"==typeof t.duration)e.duration=t.duration;else{let t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),"number"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */class iX{/** Flag if notifying is happening. *//** Callback for client to receive scope changes. *//** Callback list that will be called after {@link applyToEvent}. *//** Array of breadcrumbs. *//** User *//** Tags *//** Extra *//** Contexts *//** Attachments *//** Propagation Context for distributed tracing *//**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   *//** Fingerprint *//** Severity */// eslint-disable-next-line deprecation/deprecation
/** Transaction Name *//** Span *//** Session *//** Request Mode Session Status */// NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext=iQ()}/**
   * Inherit values from the parent scope.
   * @param scope to clone.
   */static clone(e){let t=new iX;return e&&(t._breadcrumbs=[...e._breadcrumbs],t._tags={...e._tags},t._extra={...e._extra},t._contexts={...e._contexts},t._user=e._user,t._level=e._level,t._span=e._span,t._session=e._session,t._transactionName=e._transactionName,t._fingerprint=e._fingerprint,t._eventProcessors=[...e._eventProcessors],t._requestSession=e._requestSession,t._attachments=[...e._attachments],t._sdkProcessingMetadata={...e._sdkProcessingMetadata},t._propagationContext={...e._propagationContext}),t}/**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */addScopeListener(e){this._scopeListeners.push(e)}/**
   * @inheritDoc
   */addEventProcessor(e){return this._eventProcessors.push(e),this}/**
   * @inheritDoc
   */setUser(e){return this._user=e||{},this._session&&iK(this._session,{user:e}),this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getUser(){return this._user}/**
   * @inheritDoc
   */getRequestSession(){return this._requestSession}/**
   * @inheritDoc
   */setRequestSession(e){return this._requestSession=e,this}/**
   * @inheritDoc
   */setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setLevel(e){return this._level=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */setSpan(e){return this._span=e,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSpan(){return this._span}/**
   * @inheritDoc
   */getTransaction(){// Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
// have a pointer to the currently-active transaction.
let e=this.getSpan();return e&&e.transaction}/**
   * @inheritDoc
   */setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getSession(){return this._session}/**
   * @inheritDoc
   */update(e){if(!e)return this;if("function"==typeof e){let t=e(this);return t instanceof iX?t:this}return e instanceof iX?(this._tags={...this._tags,...e._tags},this._extra={...this._extra,...e._extra},this._contexts={...this._contexts,...e._contexts},e._user&&Object.keys(e._user).length&&(this._user=e._user),e._level&&(this._level=e._level),e._fingerprint&&(this._fingerprint=e._fingerprint),e._requestSession&&(this._requestSession=e._requestSession),e._propagationContext&&(this._propagationContext=e._propagationContext)):iY(e)&&(this._tags={...this._tags,...e.tags},this._extra={...this._extra,...e.extra},this._contexts={...this._contexts,...e.contexts},e.user&&(this._user=e.user),e.level&&(this._level=e.level),e.fingerprint&&(this._fingerprint=e.fingerprint),e.requestSession&&(this._requestSession=e.requestSession),e.propagationContext&&(this._propagationContext=e.propagationContext)),this}/**
   * @inheritDoc
   */clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this._attachments=[],this._propagationContext=iQ(),this}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let n="number"==typeof t?t:100;// No data has been changed, so don't notify scope listeners
if(n<=0)return this;let r={timestamp:(0,iM.dateTimestampInSeconds)(),...e},i=this._breadcrumbs;return i.push(r),this._breadcrumbs=i.length>n?i.slice(-n):i,this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}/**
   * @inheritDoc
   */clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}/**
   * @inheritDoc
   */addAttachment(e){return this._attachments.push(e),this}/**
   * @inheritDoc
   */getAttachments(){return this._attachments}/**
   * @inheritDoc
   */clearAttachments(){return this._attachments=[],this}/**
   * Applies data from the scope to the event and runs all event processors on it.
   *
   * @param event Event
   * @param hint Object containing additional information about the original exception, for use by the event processors.
   * @hidden
   */applyToEvent(e,t={},n){// We want to set the trace context for normal events only if there isn't already
// a trace context on the event. There is a product feature in place where we link
// errors with transaction and it relies on that.
if(this._extra&&Object.keys(this._extra).length&&(e.extra={...this._extra,...e.extra}),this._tags&&Object.keys(this._tags).length&&(e.tags={...this._tags,...e.tags}),this._user&&Object.keys(this._user).length&&(e.user={...this._user,...e.user}),this._contexts&&Object.keys(this._contexts).length&&(e.contexts={...this._contexts,...e.contexts}),this._level&&(e.level=this._level),this._transactionName&&(e.transaction=this._transactionName),this._span){e.contexts={trace:this._span.getTraceContext(),...e.contexts};let t=this._span.transaction;if(t){e.sdkProcessingMetadata={dynamicSamplingContext:t.getDynamicSamplingContext(),...e.sdkProcessingMetadata};let n=t.name;n&&(e.tags={transaction:n,...e.tags})}}this._applyFingerprint(e);let r=this._getBreadcrumbs(),i=[...e.breadcrumbs||[],...r];// TODO (v8): Update this order to be: Global > Client > Scope
return e.breadcrumbs=i.length>0?i:void 0,e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...this._sdkProcessingMetadata,propagationContext:this._propagationContext},/**
 * Process an array of event processors, returning the processed event (or `null` if the event was dropped).
 */function e(t,n,r,i=0){return new iJ((s,a)=>{let o=t[i];if(null===n||"function"!=typeof o)s(n);else{let l=o({...n},r);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&o.id&&null===l&&iU.log(`Event processor "${o.id}" dropped event`),iF(l)?l.then(n=>e(t,n,r,i+1).then(s)).then(null,a):e(t,l,r,i+1).then(s).then(null,a)}})}([...n||[],...(0,iA.getGlobalSingleton)("globalEventProcessors",()=>[]),...this._eventProcessors],e,t)}/**
   * Add data which will be accessible during event processing but won't get sent to Sentry
   */setSDKProcessingMetadata(e){return this._sdkProcessingMetadata={...this._sdkProcessingMetadata,...e},this}/**
   * @inheritDoc
   */setPropagationContext(e){return this._propagationContext=e,this}/**
   * @inheritDoc
   */getPropagationContext(){return this._propagationContext}/**
   * Get the breadcrumbs for this scope.
   */_getBreadcrumbs(){return this._breadcrumbs}/**
   * This will be called on every set call.
   */_notifyScopeListeners(){// We need this check for this._notifyingListeners to be able to work on scope during updates
// If this check is not here we'll produce endless recursion when something is done with the scope
// during the callback.
this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach(e=>{e(this)}),this._notifyingListeners=!1)}/**
   * Applies fingerprint from the scope to the event if there's one,
   * uses message if there's one instead or get rid of empty fingerprint
   */_applyFingerprint(e){var t;// Make sure it's an array first and we actually have something in place
e.fingerprint=e.fingerprint?Array.isArray(t=e.fingerprint)?t:[t]:[],this._fingerprint&&(e.fingerprint=e.fingerprint.concat(this._fingerprint)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}}function iQ(){return{traceId:iZ(),spanId:iZ().substring(16)}}/**
 * @inheritDoc
 */class i0{/** Is a {@link Layer}[] containing the client and scope *//** Contains the last event id of a captured event.  *//**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   */constructor(e,t=new iX,n=4){this._version=n,this._stack=[{scope:t}],e&&this.bindClient(e)}/**
   * @inheritDoc
   */isOlderThan(e){return this._version<e}/**
   * @inheritDoc
   */bindClient(e){let t=this.getStackTop();t.client=e,e&&e.setupIntegrations&&e.setupIntegrations()}/**
   * @inheritDoc
   */pushScope(){// We want to clone the content of prev scope
let e=iX.clone(this.getScope());return this.getStack().push({client:this.getClient(),scope:e}),e}/**
   * @inheritDoc
   */popScope(){return!(this.getStack().length<=1)&&!!this.getStack().pop()}/**
   * @inheritDoc
   */withScope(e){let t=this.pushScope();try{e(t)}finally{this.popScope()}}/**
   * @inheritDoc
   */getClient(){return this.getStackTop().client}/** Returns the scope of the top stack. */getScope(){return this.getStackTop().scope}/** Returns the scope stack for domains or the process. */getStack(){return this._stack}/** Returns the topmost scope layer in the order domain > local > process. */getStackTop(){return this._stack[this._stack.length-1]}/**
   * @inheritDoc
   */captureException(e,t){let n=this._lastEventId=t&&t.event_id?t.event_id:iZ(),r=Error("Sentry syntheticException");return this._withClient((i,s)=>{i.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},s)}),n}/**
   * @inheritDoc
   */captureMessage(e,t,n){let r=this._lastEventId=n&&n.event_id?n.event_id:iZ(),i=Error(e);return this._withClient((s,a)=>{s.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},a)}),r}/**
   * @inheritDoc
   */captureEvent(e,t){let n=t&&t.event_id?t.event_id:iZ();return e.type||(this._lastEventId=n),this._withClient((r,i)=>{r.captureEvent(e,{...t,event_id:n},i)}),n}/**
   * @inheritDoc
   */lastEventId(){return this._lastEventId}/**
   * @inheritDoc
   */addBreadcrumb(e,t){let{scope:n,client:r}=this.getStackTop();if(!r)return;let{beforeBreadcrumb:i=null,maxBreadcrumbs:s=100}=r.getOptions&&r.getOptions()||{};if(s<=0)return;let a=(0,iM.dateTimestampInSeconds)(),o={timestamp:a,...e},l=i?iB(()=>i(o,t)):o;null!==l&&(r.emit&&r.emit("beforeAddBreadcrumb",l,t),n.addBreadcrumb(l,s))}/**
   * @inheritDoc
   */setUser(e){this.getScope().setUser(e)}/**
   * @inheritDoc
   */setTags(e){this.getScope().setTags(e)}/**
   * @inheritDoc
   */setExtras(e){this.getScope().setExtras(e)}/**
   * @inheritDoc
   */setTag(e,t){this.getScope().setTag(e,t)}/**
   * @inheritDoc
   */setExtra(e,t){this.getScope().setExtra(e,t)}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any
setContext(e,t){this.getScope().setContext(e,t)}/**
   * @inheritDoc
   */configureScope(e){let{scope:t,client:n}=this.getStackTop();n&&e(t)}/**
   * @inheritDoc
   */run(e){let t=i2(this);try{e(this)}finally{i2(t)}}/**
   * @inheritDoc
   */getIntegration(e){let t=this.getClient();if(!t)return null;try{return t.getIntegration(e)}catch(t){return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`Cannot retrieve integration ${e.id} from the current Hub`),null}}/**
   * @inheritDoc
   */startTransaction(e,t){let n=this._callExtensionMethod("startTransaction",e,t);if(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&!n){let e=this.getClient();e?console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`):console.warn("Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'")}return n}/**
   * @inheritDoc
   */traceHeaders(){return this._callExtensionMethod("traceHeaders")}/**
   * @inheritDoc
   */captureSession(e=!1){// both send the update and pull the session from the scope
if(e)return this.endSession();// only send the update
this._sendSessionUpdate()}/**
   * @inheritDoc
   */endSession(){let e=this.getStackTop(),t=e.scope,n=t.getSession();if(n){var r;let e;e={},r?e={status:r}:"ok"===n.status&&(e={status:"exited"}),iK(n,e)}this._sendSessionUpdate(),// the session is over; take it off of the scope
t.setSession()}/**
   * @inheritDoc
   */startSession(e){let{scope:t,client:n}=this.getStackTop(),{release:r,environment:i=iq}=n&&n.getOptions()||{},{userAgent:s}=iA.GLOBAL_OBJ.navigator||{},a=/**
 * Creates a new `Session` object by setting certain default parameters. If optional @param context
 * is passed, the passed properties are applied to the session object.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns a new `Session` object
 */function(e){// Both timestamp and started are in seconds since the UNIX epoch.
let t=(0,iM.timestampInSeconds)(),n={sid:iZ(),init:!0,timestamp:t,started:t,duration:0,status:"ok",errors:0,ignoreDuration:!1,toJSON:()=>iV({sid:`${n.sid}`,init:n.init,// Make sure that sec is converted to ms for date constructor
    started:new Date(1e3*n.started).toISOString(),timestamp:new Date(1e3*n.timestamp).toISOString(),status:n.status,errors:n.errors,did:"number"==typeof n.did||"string"==typeof n.did?`${n.did}`:void 0,duration:n.duration,attrs:{release:n.release,environment:n.environment,ip_address:n.ipAddress,user_agent:n.userAgent}})};return e&&iK(n,e),n}({release:r,environment:i,user:t.getUser(),...s&&{userAgent:s},...e}),o=t.getSession&&t.getSession();return o&&"ok"===o.status&&iK(o,{status:"exited"}),this.endSession(),// Afterwards we set the new session on the scope
t.setSession(a),a}/**
   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
   * when Tracing is used.
   */shouldSendDefaultPii(){let e=this.getClient(),t=e&&e.getOptions();return!!(t&&t.sendDefaultPii)}/**
   * Sends the current Session on the scope
   */_sendSessionUpdate(){let{scope:e,client:t}=this.getStackTop(),n=e.getSession();n&&t&&t.captureSession&&t.captureSession(n)}/**
   * Internal helper function to call a method on the top client if it exists.
   *
   * @param method The method to call on the client.
   * @param args Arguments to pass to the client function.
   */_withClient(e){let{scope:t,client:n}=this.getStackTop();n&&e(n,t)}/**
   * Calls global extension method and binding current instance to the function call
   */// @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
// eslint-disable-next-line @typescript-eslint/no-explicit-any
_callExtensionMethod(e,...t){let n=i1(),r=n.__SENTRY__;if(r&&r.extensions&&"function"==typeof r.extensions[e])return r.extensions[e].apply(this,t);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`Extension method ${e} couldn't be found, doing nothing.`)}}/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/function i1(){return iA.GLOBAL_OBJ.__SENTRY__=iA.GLOBAL_OBJ.__SENTRY__||{extensions:{},hub:void 0},iA.GLOBAL_OBJ}/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */function i2(e){let t=i1(),n=i3(t);return i6(t,e),n}/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */function i5(){// Get main carrier (global for every environment)
let e=i1();if(e.__SENTRY__&&e.__SENTRY__.acs){let t=e.__SENTRY__.acs.getCurrentHub();if(t)return t}// Return hub that lives on a global object
return function(e=i1()){// Return hub that lives on a global object
return(!(e&&e.__SENTRY__&&e.__SENTRY__.hub)||i3(e).isOlderThan(4))&&i6(e,new i0),i3(e)}(e)}/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */function i3(e){return(0,iA.getGlobalSingleton)("hub",()=>new i0,e)}/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */function i6(e,t){if(!e)return!1;let n=e.__SENTRY__=e.__SENTRY__||{};return n.hub=t,!0}const i4="<anonymous>";var iA=z("3vPaK");// eslint-disable-next-line deprecation/deprecation
const i9=(0,iA.getGlobalObject)();/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */// eslint-disable-next-line @typescript-eslint/ban-types
function i8(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}var iA=(z("3vPaK"),z("3vPaK"));// Based on https://github.com/angular/angular.js/pull/13945/files
// eslint-disable-next-line deprecation/deprecation
const i7=(0,iA.getGlobalObject)(),se=(0,iA.getGlobalObject)(),st="__sentry_xhr_v2__",sn={},sr={};/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */function si(e,t){sn[e]=sn[e]||[],sn[e].push(t),/** Instruments given API */function(e){if(!sr[e])switch(sr[e]=!0,e){case"console":"console"in iA.GLOBAL_OBJ&&iD.forEach(function(e){e in iA.GLOBAL_OBJ.console&&i$(iA.GLOBAL_OBJ.console,e,function(t){return iO[e]=t,function(...t){ss("console",{args:t,level:e});let n=iO[e];n&&n.apply(iA.GLOBAL_OBJ.console,t)}})});break;case"dom":/** JSDoc */(function(){if(!se.document)return;// Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
// handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
// we instrument `addEventListener` so that we don't end up attaching this handler twice.
let e=ss.bind(null,"dom"),t=sl(e,!0);se.document.addEventListener("click",t,!1),se.document.addEventListener("keypress",t,!1),// After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
// clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
// way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
// could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
// guaranteed to fire at least once.)
["EventTarget","Node"].forEach(t=>{// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
let n=se[t]&&se[t].prototype;// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
n&&n.hasOwnProperty&&n.hasOwnProperty("addEventListener")&&(i$(n,"addEventListener",function(t){return function(n,r,i){if("click"===n||"keypress"==n)try{let r=this.__sentry_instrumentation_handlers__=this.__sentry_instrumentation_handlers__||{},s=r[n]=r[n]||{refCount:0};if(!s.handler){let r=sl(e);s.handler=r,t.call(this,n,r,i)}s.refCount++}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return t.call(this,n,r,i)}}),i$(n,"removeEventListener",function(e){return function(t,n,r){if("click"===t||"keypress"==t)try{let n=this.__sentry_instrumentation_handlers__||{},i=n[t];i&&(i.refCount--,i.refCount<=0&&(e.call(this,t,i.handler,r),i.handler=void 0,delete n[t]),0===Object.keys(n).length&&delete this.__sentry_instrumentation_handlers__)}catch(e){// Accessing dom properties is always fragile.
// Also allows us to skip `addEventListenrs` calls with no proper `this` context.
}return e.call(this,t,n,r)}}))})})();break;case"xhr":/** JSDoc */(function(){// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
if(!se.XMLHttpRequest)return;let e=XMLHttpRequest.prototype;i$(e,"open",function(e){return function(...t){let n=t[1],r=this[st]={// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
method:iP(t[0])?t[0].toUpperCase():t[0],url:t[1],request_headers:{}};iP(n)&&"POST"===r.method&&n.match(/sentry_key/)&&(this.__sentry_own_request__=!0);let i=()=>{// For whatever reason, this is not the same instance here as from the outer method
let e=this[st];if(e&&4===this.readyState){try{// touching statusCode in some platforms throws
// an exception
e.status_code=this.status}catch(e){/* do nothing */}ss("xhr",{args:t,endTimestamp:Date.now(),startTimestamp:Date.now(),xhr:this})}};return"onreadystatechange"in this&&"function"==typeof this.onreadystatechange?i$(this,"onreadystatechange",function(e){return function(...t){return i(),e.apply(this,t)}}):this.addEventListener("readystatechange",i),i$(this,"setRequestHeader",function(e){return function(...t){let[n,r]=t,i=this[st];return i&&(i.request_headers[n.toLowerCase()]=r),e.apply(this,t)}}),e.apply(this,t)}}),i$(e,"send",function(e){return function(...t){let n=this[st];return n&&void 0!==t[0]&&(n.body=t[0]),ss("xhr",{args:t,startTimestamp:Date.now(),xhr:this}),e.apply(this,t)}})})();break;case"fetch":/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */(function(){if(!/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */function(){if(!("fetch"in i9))return!1;try{return new Headers,new Request("http://www.example.com"),new Response,!0}catch(e){return!1}}())return!1;// Fast path to avoid DOM I/O
// eslint-disable-next-line @typescript-eslint/unbound-method
if(i8(i9.fetch))return!0;// window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
// so create a "pure" iframe to see if that has native fetch
let e=!1,t=i9.document;// eslint-disable-next-line deprecation/deprecation
if(t&&"function"==typeof t.createElement)try{let n=t.createElement("iframe");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=i8(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",e)}return e})()&&i$(iA.GLOBAL_OBJ,"fetch",function(e){return function(...t){let{method:n,url:r}=/**
 * Parses the fetch arguments to find the used Http method and the url of the request
 */function(e){if(0===e.length)return{method:"GET",url:""};if(2===e.length){let[t,n]=e;return{url:so(t),method:sa(n,"method")?String(n.method).toUpperCase():"GET"}}let t=e[0];return{url:so(t),method:sa(t,"method")?String(t.method).toUpperCase():"GET"}}(t),i={args:t,fetchData:{method:n,url:r},startTimestamp:Date.now()};// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return ss("fetch",{...i}),e.apply(iA.GLOBAL_OBJ,t).then(e=>(ss("fetch",{...i,endTimestamp:Date.now(),response:e}),e),e=>{// NOTE: If you are a Sentry user, and you are seeing this stack frame,
//       it means the sentry.javascript SDK caught an error invoking your application code.
//       This is expected behavior and NOT indicative of a bug with sentry.javascript.
throw ss("fetch",{...i,endTimestamp:Date.now(),error:e}),e})}});break;case"history":/** JSDoc */(function(){if(!/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */function(){// NOTE: in Chrome App environment, touching history.pushState, *even inside
//       a try/catch block*, will cause Chrome to output an error to console.error
// borrowed from: https://github.com/angular/angular.js/pull/13945/files
/* eslint-disable @typescript-eslint/no-unsafe-member-access */// eslint-disable-next-line @typescript-eslint/no-explicit-any
let e=i7.chrome,t=e&&e.app&&e.app.runtime,n="history"in i7&&!!i7.history.pushState&&!!i7.history.replaceState;return!t&&n}())return;let e=se.onpopstate;/** @hidden */function t(e){return function(...t){let n=t.length>2?t[2]:void 0;if(n){// coerce to string (this is what pushState does)
let e=u,t=String(n);// keep track of the current URL state, as we always receive only the updated state
u=t,ss("history",{from:e,to:t})}return e.apply(this,t)}}se.onpopstate=function(...t){let n=se.location.href,r=u;if(u=n,ss("history",{from:r,to:n}),e)// https://github.com/getsentry/sentry-javascript/issues/3344
// https://github.com/bugsnag/bugsnag-js/issues/469
try{return e.apply(this,t)}catch(e){// no-empty
}},i$(se.history,"pushState",t),i$(se.history,"replaceState",t)})();break;case"error":sc=se.onerror,se.onerror=function(e,t,n,r,i){return ss("error",{column:r,error:i,line:n,msg:e,url:t}),!!sc&&!sc.__SENTRY_LOADER__&&sc.apply(this,arguments)},se.onerror.__SENTRY_INSTRUMENTED__=!0;break;case"unhandledrejection":su=se.onunhandledrejection,se.onunhandledrejection=function(e){return ss("unhandledrejection",e),!su||!!su.__SENTRY_LOADER__||su.apply(this,arguments)},se.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0;break;default:("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("unknown instrumentation type:",e);return}}(e)}/** JSDoc */function ss(e,t){if(e&&sn[e])for(let n of sn[e]||[])try{n(t)}catch(t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.error(`Error while triggering instrumentation handler.
Type: ${e}
Name: ${/**
 * Safely extract function name from itself
 */function(e){try{if(!e||"function"!=typeof e)return i4;return e.name||i4}catch(e){// Just accessing custom props in some Selenium environments
// can cause a "Permission denied" exception (see raven-js#495).
return i4}}(n)}
Error:`,t)}}function sa(e,t){return!!e&&"object"==typeof e&&!!e[t]}function so(e){return"string"==typeof e?e:e?sa(e,"url")?e.url:e.toString?e.toString():"":""}/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */function sl(e,t=!1){return n=>{// It's possible this handler might trigger multiple times for the same
// event (e.g. event propagation through node ancestors).
// Ignore if we've already captured that event.
if(!n||n._sentryCaptured||/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */function(e){// We are only interested in filtering `keypress` events for now.
if("keypress"!==e.type)return!1;try{let t=e.target;if(!t||!t.tagName)return!0;// Only consider keypress events on actual input elements. This will disregard keypresses targeting body
// e.g.tabbing through elements, hotkeys, etc.
if("INPUT"===t.tagName||"TEXTAREA"===t.tagName||t.isContentEditable)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}return!0}(n))return;iH(n,"_sentryCaptured",!0);let r="keypress"===n.type?"input":n.type;(void 0===p||!/**
 * Check whether two DOM events are similar to eachother. For example, two click events on the same button.
 */function(e,t){// If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
if(e.type!==t.type)return!1;try{// If both events have the same type, it's still possible that actions were performed on different targets.
// e.g. 2 clicks on different buttons.
if(e.target!==t.target)return!1}catch(e){// just accessing `target` property can throw an exception in some rare circumstances
// see: https://github.com/getsentry/sentry-javascript/issues/838
}// If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
// to which an event listener was attached), we treat them as the same action, as we want to capture
// only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
return!0}(p,n))&&(e({event:n,name:r,global:t}),p=n),// Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
clearTimeout(d),d=se.setTimeout(()=>{p=void 0},1e3)}}let sc=null,su=null;/** Grabs active transaction off scope, if any */function sd(e){let t=e||i5(),n=t.getScope();return n.getTransaction()}let sp=!1;/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */function sh(){let e=sd();if(e){let t="internal_error";("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Transaction: ${t} -> Global error occured`),e.setStatus(t)}}// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the
// node.js default exit behaviour
sh.tag="sentry_tracingErrorCallback";var iM=z("aBUrw");const sf="baggage",s_="sentry-",sm=/^sentry-/;/**
 * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with "sentry-".
 *
 * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility
 * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is
 * `undefined` the function will return `undefined`.
 * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`
 * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.
 */function sg(e){if(!e)return;// Prefix all DSC keys with "sentry-" and put them into a new object
let t=Object.entries(e).reduce((e,[t,n])=>(n&&(e[`${s_}${t}`]=n),e),{});return(/**
 * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.
 *
 * @param object The object to turn into a baggage header.
 * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header
 * is not spec compliant.
 */function(e){if(0!==Object.keys(e).length)return Object.entries(e).reduce((e,[t,n],r)=>{let i=`${encodeURIComponent(t)}=${encodeURIComponent(n)}`,s=0===r?i:`${e},${i}`;return s.length>8192?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`Not adding key: ${t} with val: ${n} to baggage header due to exceeding baggage size limits.`),e):s},"")}(t))}/**
 * Will parse a baggage header, which is a simple key-value map, into a flat object.
 *
 * @param baggageHeader The baggage header to parse.
 * @returns a flat object containing all the key-value pairs from `baggageHeader`.
 */function sy(e){return e.split(",").map(e=>e.split("=").map(e=>decodeURIComponent(e.trim()))).reduce((e,[t,n])=>(e[t]=n,e),{})}const sS=RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");/**
 * Create sentry-trace header from span context values.
 */function sb(e=iZ(),t=iZ().substring(16),n){let r="";return void 0!==n&&(r=n?"-1":"-0"),`${e}-${t}${r}`}var iM=z("aBUrw");/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */class sv{constructor(e=1e3){this._maxlen=e,this.spans=[]}/**
   * This is just so that we don't run out of memory while recording a lot
   * of spans. At some point we just stop and flush out the start of the
   * trace tree (i.e.the first n spans with the smallest
   * start_timestamp).
   */add(e){this.spans.length>this._maxlen?e.spanRecorder=void 0:this.spans.push(e)}}/**
 * Span contains all data about a span
 */class sE{/**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * Internal keeper of the status
   *//**
   * @inheritDoc
   *//**
   * Timestamp in seconds when the span was created.
   *//**
   * Timestamp in seconds when the span ended.
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   *//**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any
/**
   * List of spans that were finalized
   *//**
   * @inheritDoc
   *//**
   * The instrumenter that created this span.
   *//**
   * The origin of the span, giving context about what created the span.
   *//**
   * You should never call the constructor manually, always use `Sentry.startTransaction()`
   * or call `startChild()` on an existing span.
   * @internal
   * @hideconstructor
   * @hidden
   */constructor(e={}){this.traceId=e.traceId||iZ(),this.spanId=e.spanId||iZ().substring(16),this.startTimestamp=e.startTimestamp||(0,iM.timestampInSeconds)(),this.tags=e.tags||{},this.data=e.data||{},this.instrumenter=e.instrumenter||"sentry",this.origin=e.origin||"manual",e.parentSpanId&&(this.parentSpanId=e.parentSpanId),"sampled"in e&&(this.sampled=e.sampled),e.op&&(this.op=e.op),e.description&&(this.description=e.description),e.name&&(this.description=e.name),e.status&&(this.status=e.status),e.endTimestamp&&(this.endTimestamp=e.endTimestamp)}/** An alias for `description` of the Span. */get name(){return this.description||""}/** Update the name of the span. */set name(e){this.setName(e)}/**
   * @inheritDoc
   */startChild(e){let t=new sE({...e,parentSpanId:this.spanId,sampled:this.sampled,traceId:this.traceId});if(t.spanRecorder=this.spanRecorder,t.spanRecorder&&t.spanRecorder.add(t),t.transaction=this.transaction,("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&t.transaction){let n=e&&e.op||"< unknown op >",r=t.transaction.name||"< unknown name >",i=t.transaction.spanId,s=`[Tracing] Starting '${n}' span on transaction '${r}' (${i}).`;t.transaction.metadata.spanMetadata[t.spanId]={logMessage:s},iU.log(s)}return t}/**
   * @inheritDoc
   */setTag(e,t){return this.tags={...this.tags,[e]:t},this}/**
   * @inheritDoc
   */// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
setData(e,t){return this.data={...this.data,[e]:t},this}/**
   * @inheritDoc
   */setStatus(e){return this.status=e,this}/**
   * @inheritDoc
   */setHttpStatus(e){this.setTag("http.status_code",String(e)),this.setData("http.response.status_code",e);let t=/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */function(e){if(e<400&&e>=100)return"ok";if(e>=400&&e<500)switch(e){case 401:return"unauthenticated";case 403:return"permission_denied";case 404:return"not_found";case 409:return"already_exists";case 413:return"failed_precondition";case 429:return"resource_exhausted";default:return"invalid_argument"}if(e>=500&&e<600)switch(e){case 501:return"unimplemented";case 503:return"unavailable";case 504:return"deadline_exceeded";default:return"internal_error"}return"unknown_error"}(e);return"unknown_error"!==t&&this.setStatus(t),this}/**
   * @inheritDoc
   */setName(e){this.description=e}/**
   * @inheritDoc
   */isSuccess(){return"ok"===this.status}/**
   * @inheritDoc
   */finish(e){if(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&// Don't call this for transactions
this.transaction&&this.transaction.spanId!==this.spanId){let{logMessage:e}=this.transaction.metadata.spanMetadata[this.spanId];e&&iU.log(e.replace("Starting","Finishing"))}this.endTimestamp="number"==typeof e?e:(0,iM.timestampInSeconds)()}/**
   * @inheritDoc
   */toTraceparent(){return sb(this.traceId,this.spanId,this.sampled)}/**
   * @inheritDoc
   */toContext(){return iV({data:this.data,description:this.description,endTimestamp:this.endTimestamp,op:this.op,parentSpanId:this.parentSpanId,sampled:this.sampled,spanId:this.spanId,startTimestamp:this.startTimestamp,status:this.status,tags:this.tags,traceId:this.traceId})}/**
   * @inheritDoc
   */updateWithContext(e){return this.data=e.data||{},this.description=e.description,this.endTimestamp=e.endTimestamp,this.op=e.op,this.parentSpanId=e.parentSpanId,this.sampled=e.sampled,this.spanId=e.spanId||this.spanId,this.startTimestamp=e.startTimestamp||this.startTimestamp,this.status=e.status,this.tags=e.tags||{},this.traceId=e.traceId||this.traceId,this}/**
   * @inheritDoc
   */getTraceContext(){return iV({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,trace_id:this.traceId})}/**
   * @inheritDoc
   */toJSON(){return iV({data:Object.keys(this.data).length>0?this.data:void 0,description:this.description,op:this.op,parent_span_id:this.parentSpanId,span_id:this.spanId,start_timestamp:this.startTimestamp,status:this.status,tags:Object.keys(this.tags).length>0?this.tags:void 0,timestamp:this.endTimestamp,trace_id:this.traceId,origin:this.origin})}}/**
 * Creates a dynamic sampling context from a client.
 *
 * Dispatchs the `createDsc` lifecycle hook as a side effect.
 */function sT(e,t,n){let r=t.getOptions(),{publicKey:i}=t.getDsn()||{},{segment:s}=n&&n.getUser()||{},a=iV({environment:r.environment||iq,release:r.release,user_segment:s,public_key:i,trace_id:e});return t.emit&&t.emit("createDsc",a),a}/** JSDoc */class sw extends sE{/**
   * The reference to the current hub.
   *//**
   * This constructor should never be called manually. Those instrumenting tracing should use
   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
   * @internal
   * @hideconstructor
   * @hidden
   */constructor(e,t){super(e),// We need to delete description since it's set by the Span class constructor
// but not needed for transactions.
delete this.description,this._measurements={},this._contexts={},this._hub=t||i5(),this._name=e.name||"",this.metadata={source:"custom",...e.metadata,spanMetadata:{}},this._trimEnd=e.trimEnd,// this is because transactions are also spans, and spans have a transaction pointer
this.transaction=this;// If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means
// there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)
let n=this.metadata.dynamicSamplingContext;n&&(this._frozenDynamicSamplingContext={...n})}/** Getter for `name` property */get name(){return this._name}/** Setter for `name` property, which also sets `source` as custom */set name(e){this.setName(e)}/**
   * JSDoc
   */setName(e,t="custom"){this._name=e,this.metadata.source=t}/**
   * Attaches SpanRecorder to the span itself
   * @param maxlen maximum number of spans that can be recorded
   */initSpanRecorder(e=1e3){this.spanRecorder||(this.spanRecorder=new sv(e)),this.spanRecorder.add(this)}/**
   * @inheritDoc
   */setContext(e,t){null===t?delete this._contexts[e]:this._contexts[e]=t}/**
   * @inheritDoc
   */setMeasurement(e,t,n=""){this._measurements[e]={value:t,unit:n}}/**
   * @inheritDoc
   */setMetadata(e){this.metadata={...this.metadata,...e}}/**
   * @inheritDoc
   */finish(e){let t=this._finishTransaction(e);if(t)return this._hub.captureEvent(t)}/**
   * @inheritDoc
   */toContext(){let e=super.toContext();return iV({...e,name:this.name,trimEnd:this._trimEnd})}/**
   * @inheritDoc
   */updateWithContext(e){return super.updateWithContext(e),this.name=e.name||"",this._trimEnd=e.trimEnd,this}/**
   * @inheritdoc
   *
   * @experimental
   */getDynamicSamplingContext(){if(this._frozenDynamicSamplingContext)return this._frozenDynamicSamplingContext;let e=this._hub||i5(),t=e.getClient();if(!t)return{};let n=e.getScope(),r=sT(this.traceId,t,n),i=this.metadata.sampleRate;void 0!==i&&(r.sample_rate=`${i}`);// We don't want to have a transaction name in the DSC if the source is "url" because URLs might contain PII
let s=this.metadata.source;// Uncomment if we want to make DSC immutable
// this._frozenDynamicSamplingContext = dsc;
return s&&"url"!==s&&(r.transaction=this.name),void 0!==this.sampled&&(r.sampled=String(this.sampled)),r}/**
   * Override the current hub with a new one.
   * Used if you want another hub to finish the transaction.
   *
   * @internal
   */setHub(e){this._hub=e}/**
   * Finish the transaction & prepare the event to send to Sentry.
   */_finishTransaction(e){// This transaction is already finished, so we should not flush it again.
if(void 0!==this.endTimestamp)return;this.name||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("Transaction has no name, falling back to `<unlabeled transaction>`."),this.name="<unlabeled transaction>"),// just sets the end timestamp
super.finish(e);let t=this._hub.getClient();if(t&&t.emit&&t.emit("finishTransaction",this),!0!==this.sampled){// At this point if `sampled !== true` we want to discard the transaction.
("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] Discarding transaction because its trace was not chosen to be sampled."),t&&t.recordDroppedEvent("sample_rate","transaction");return}let n=this.spanRecorder?this.spanRecorder.spans.filter(e=>e!==this&&e.endTimestamp):[];this._trimEnd&&n.length>0&&(this.endTimestamp=n.reduce((e,t)=>e.endTimestamp&&t.endTimestamp?e.endTimestamp>t.endTimestamp?e:t:e).endTimestamp);let r=this.metadata,i={contexts:{...this._contexts,// We don't want to override trace context
trace:this.getTraceContext()},spans:n,start_timestamp:this.startTimestamp,tags:this.tags,timestamp:this.endTimestamp,transaction:this.name,type:"transaction",sdkProcessingMetadata:{...r,dynamicSamplingContext:this.getDynamicSamplingContext()},...r.source&&{transaction_info:{source:r.source}}},s=Object.keys(this._measurements).length>0;return s&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding measurements to transaction",JSON.stringify(this._measurements,void 0,2)),i.measurements=this._measurements),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`),i}}const sk={idleTimeout:1e3,finalTimeout:3e4,heartbeatInterval:5e3};/**
 * @inheritDoc
 */class sx extends sv{constructor(e,t,n,r){super(r),this._pushActivity=e,this._popActivity=t,this.transactionSpanId=n}/**
   * @inheritDoc
   */add(e){e.spanId!==this.transactionSpanId&&(// We patch span.finish() to pop an activity after setting an endTimestamp.
e.finish=t=>{e.endTimestamp="number"==typeof t?t:(0,iM.timestampInSeconds)(),this._popActivity(e.spanId)},void 0===e.endTimestamp&&this._pushActivity(e.spanId)),super.add(e)}}/**
 * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.
 * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will
 * put itself on the scope on creation.
 */class sI extends sw{// Activities store a list of active spans
// Track state of activities in previous heartbeat
// Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.
// We should not use heartbeat if we finished a transaction
// Idle timeout was canceled and we should finish the transaction with the last span end.
/**
   * Timer that tracks Transaction idleTimeout
   */constructor(e,t,/**
     * The time to wait in ms until the idle transaction will be finished. This timer is started each time
     * there are no active spans on this transaction.
     */n=sk.idleTimeout,/**
     * The final value in ms that a transaction cannot exceed
     */r=sk.finalTimeout,i=sk.heartbeatInterval,s=!1){super(e,t),this._idleHub=t,this._idleTimeout=n,this._finalTimeout=r,this._heartbeatInterval=i,this._onScope=s,this.activities={},this._heartbeatCounter=0,this._finished=!1,this._idleTimeoutCanceledPermanently=!1,this._beforeFinishCallbacks=[],this._finishReason="externalFinish",s&&(// We set the transaction here on the scope so error events pick up the trace
// context and attach it to the error.
("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`),t.configureScope(e=>e.setSpan(this))),this._restartIdleTimeout(),setTimeout(()=>{this._finished||(this.setStatus("deadline_exceeded"),this._finishReason="finalTimeout",this.finish())},this._finalTimeout)}/** {@inheritDoc} */finish(e=(0,iM.timestampInSeconds)()){if(this._finished=!0,this.activities={},"ui.action.click"===this.op&&this.setTag("finishReason",this._finishReason),this.spanRecorder){for(let t of(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] finishing IdleTransaction",new Date(1e3*e).toISOString(),this.op),this._beforeFinishCallbacks))t(this,e);this.spanRecorder.spans=this.spanRecorder.spans.filter(t=>{// If we are dealing with the transaction itself, we just return it
if(t.spanId===this.spanId)return!0;// We cancel all pending spans with status "cancelled" to indicate the idle transaction was finished early
!t.endTimestamp&&(t.endTimestamp=e,t.setStatus("cancelled"),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] cancelling span since transaction ended early",JSON.stringify(t,void 0,2)));let n=t.startTimestamp<e,r=(this._finalTimeout+this._idleTimeout)/1e3,i=t.endTimestamp-this.startTimestamp<r;if("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__){let e=JSON.stringify(t,void 0,2);n?i||iU.log("[Tracing] discarding Span since it finished after Transaction final timeout",e):iU.log("[Tracing] discarding Span since it happened after Transaction was finished",e)}return n&&i}),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] flushing IdleTransaction")}else("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] No active IdleTransaction");// if `this._onScope` is `true`, the transaction put itself on the scope when it started
if(this._onScope){let e=this._idleHub.getScope();e.getTransaction()===this&&e.setSpan(void 0)}return super.finish(e)}/**
   * Register a callback function that gets excecuted before the transaction finishes.
   * Useful for cleanup or if you want to add any additional spans based on current context.
   *
   * This is exposed because users have no other way of running something before an idle transaction
   * finishes.
   */registerBeforeFinishCallback(e){this._beforeFinishCallbacks.push(e)}/**
   * @inheritDoc
   */initSpanRecorder(e){this.spanRecorder||(this.spanRecorder=new sx(e=>{this._finished||this._pushActivity(e)},e=>{this._finished||this._popActivity(e)},this.spanId,e),// Start heartbeat so that transactions do not run forever.
("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("Starting heartbeat"),this._pingHeartbeat()),this.spanRecorder.add(this)}/**
   * Cancels the existing idle timeout, if there is one.
   * @param restartOnChildSpanChange Default is `true`.
   *                                 If set to false the transaction will end
   *                                 with the last child span.
   */cancelIdleTimeout(e,{restartOnChildSpanChange:t}={restartOnChildSpanChange:!0}){this._idleTimeoutCanceledPermanently=!1===t,this._idleTimeoutID&&(clearTimeout(this._idleTimeoutID),this._idleTimeoutID=void 0,0===Object.keys(this.activities).length&&this._idleTimeoutCanceledPermanently&&(this._finishReason="cancelled",this.finish(e)))}/**
   * Temporary method used to externally set the transaction's `finishReason`
   *
   * ** WARNING**
   * This is for the purpose of experimentation only and will be removed in the near future, do not use!
   *
   * @internal
   *
   */setFinishReason(e){this._finishReason=e}/**
   * Restarts idle timeout, if there is no running idle timeout it will start one.
   */_restartIdleTimeout(e){this.cancelIdleTimeout(),this._idleTimeoutID=setTimeout(()=>{this._finished||0!==Object.keys(this.activities).length||(this._finishReason="idleTimeout",this.finish(e))},this._idleTimeout)}/**
   * Start tracking a specific activity.
   * @param spanId The span id that represents the activity
   */_pushActivity(e){this.cancelIdleTimeout(void 0,{restartOnChildSpanChange:!this._idleTimeoutCanceledPermanently}),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] pushActivity: ${e}`),this.activities[e]=!0,("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] new activities count",Object.keys(this.activities).length)}/**
   * Remove an activity from usage
   * @param spanId The span id that represents the activity
   */_popActivity(e){if(this.activities[e]&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] popActivity ${e}`),// eslint-disable-next-line @typescript-eslint/no-dynamic-delete
delete this.activities[e],("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] new activities count",Object.keys(this.activities).length)),0===Object.keys(this.activities).length){let e=(0,iM.timestampInSeconds)();this._idleTimeoutCanceledPermanently?(this._finishReason="cancelled",this.finish(e)):// Remember timestampInSeconds is in seconds, timeout is in ms
this._restartIdleTimeout(e+this._idleTimeout/1e3)}}/**
   * Checks when entries of this.activities are not changing for 3 beats.
   * If this occurs we finish the transaction.
   */_beat(){// We should not be running heartbeat if the idle transaction is finished.
if(this._finished)return;let e=Object.keys(this.activities).join("");e===this._prevHeartbeatString?this._heartbeatCounter++:this._heartbeatCounter=1,this._prevHeartbeatString=e,this._heartbeatCounter>=3?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] Transaction finished because of no change for 3 heart beats"),this.setStatus("deadline_exceeded"),this._finishReason="heartbeatFailed",this.finish()):this._pingHeartbeat()}/**
   * Pings the heartbeat
   */_pingHeartbeat(){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`),setTimeout(()=>{this._beat()},this._heartbeatInterval)}}// Treeshakable guard to remove all code related to tracing
/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */function sC(e){if("boolean"==typeof __SENTRY_TRACING__&&!__SENTRY_TRACING__)return!1;let t=i5().getClient(),n=e||t&&t.getOptions();return!!n&&(n.enableTracing||"tracesSampleRate"in n||"tracesSampler"in n)}/**
 * Makes a sampling decision for the given transaction and stores it on the transaction.
 *
 * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be
 * sent to Sentry.
 *
 * This method muttes the given `transaction` and will set the `sampled` value on it.
 * It returns the same transaction, for convenience.
 */function sR(e,t,n){var r;let i;return sC(t)?void 0!==e.sampled?e.setMetadata({sampleRate:Number(e.sampled)}):("function"==typeof t.tracesSampler?(i=t.tracesSampler(n),e.setMetadata({sampleRate:Number(i)})):void 0!==n.parentSampled?i=n.parentSampled:void 0!==t.tracesSampleRate?(i=t.tracesSampleRate,e.setMetadata({sampleRate:Number(i)})):(// When `enableTracing === true`, we use a sample rate of 100%
i=1,e.setMetadata({sampleRate:i})),// we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
// eslint-disable-next-line @typescript-eslint/no-explicit-any
("number"!=typeof(r=i)||r==r)&&("number"==typeof r||"boolean"==typeof r)?(r<0||r>1)&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${r}.`),1):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(r)} of type ${JSON.stringify(typeof r)}.`),1))?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("[Tracing] Discarding transaction because of invalid sample rate."),e.sampled=!1):i?(// Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
// a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
e.sampled=Math.random()<i,e.sampled)?("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] starting ${e.op} transaction - ${e.name}`):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(i)})`):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Discarding transaction because ${"function"==typeof t.tracesSampler?"tracesSampler returned 0 or false":"a negative sampling decision was inherited or tracesSampleRate is set to 0"}`),e.sampled=!1):e.sampled=!1,e}/** Returns all trace headers that are currently on the top scope. */function sN(){let e=this.getScope(),t=e.getSpan();return t?{"sentry-trace":t.toTraceparent()}:{}}/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */function sA(e,t){let n=this.getClient(),r=n&&n.getOptions()||{},i=r.instrumenter||"sentry",s=e.instrumenter||"sentry";i!==s&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.error(`A transaction was started with instrumenter=\`${s}\`, but the SDK is configured with the \`${i}\` instrumenter.
The transaction will not be sampled. Please use the ${i} instrumentation to start transactions.`),e.sampled=!1);let a=new sw(e,this);return(a=sR(a,r,{parentSampled:e.parentSampled,transactionContext:e,...t})).sampled&&a.initSpanRecorder(r._experiments&&r._experiments.maxSpans),n&&n.emit&&n.emit("startTransaction",a),a}/**
 * Create new idle transaction.
 */function sD(e,t,n,r,i,s,a){let o=e.getClient(),l=o&&o.getOptions()||{},c=new sI(t,e,n,r,a,i);return(c=sR(c,l,{parentSampled:t.parentSampled,transactionContext:t,...s})).sampled&&c.initSpanRecorder(l._experiments&&l._experiments.maxSpans),o&&o.emit&&o.emit("startTransaction",c),c}var iA=z("3vPaK");const sO=iA.GLOBAL_OBJ;var iM=z("aBUrw");const sB=(e,t,n)=>{let r,i;return s=>{t.value>=0&&(s||n)&&((i=t.value-(r||0))||void 0===r)&&(r=t.value,t.delta=i,e(t))}},sU=()=>`v3-${Date.now()}-${Math.floor(Math.random()*(9e12-1))+1e12}`,sM=()=>{// eslint-disable-next-line deprecation/deprecation
let e=sO.performance.timing,t=sO.performance.navigation.type,n={entryType:"navigation",startTime:0,type:2==t?"back_forward":1===t?"reload":"navigate"};for(let t in e)"navigationStart"!==t&&"toJSON"!==t&&(n[t]=Math.max(e[t]-e.navigationStart,0));return n},sL=()=>sO.__WEB_VITALS_POLYFILL__?sO.performance&&(performance.getEntriesByType&&performance.getEntriesByType("navigation")[0]||sM()):sO.performance&&performance.getEntriesByType&&performance.getEntriesByType("navigation")[0],sG=()=>{let e=sL();return e&&e.activationStart||0},sP=(e,t)=>{let n=sL(),r="navigate";return n&&(r=sO.document.prerendering||sG()>0?"prerender":n.type.replace(/_/g,"-")),{name:e,value:void 0===t?-1:t,rating:"good",delta:0,entries:[],id:sU(),navigationType:r}},sY=(e,t,n)=>{try{if(PerformanceObserver.supportedEntryTypes.includes(e)){let r=new PerformanceObserver(e=>{t(e.getEntries())});return r.observe(Object.assign({type:e,buffered:!0},n||{})),r}}catch(e){// Do nothing.
}},sF=(e,t)=>{let n=r=>{("pagehide"===r.type||"hidden"===sO.document.visibilityState)&&(e(r),t&&(removeEventListener("visibilitychange",n,!0),removeEventListener("pagehide",n,!0)))};addEventListener("visibilitychange",n,!0),// Some browsers have buggy implementations of visibilitychange,
// so we use pagehide in addition, just to be safe.
addEventListener("pagehide",n,!0)},sj=e=>{let t;let n=sP("CLS",0),r=0,i=[],s=e=>{e.forEach(e=>{// Only count layout shifts without recent user input.
if(!e.hadRecentInput){let s=i[0],a=i[i.length-1];r&&0!==i.length&&e.startTime-a.startTime<1e3&&e.startTime-s.startTime<5e3?(r+=e.value,i.push(e)):(r=e.value,i=[e]),r>n.value&&(n.value=r,n.entries=i,t&&t())}})},a=sY("layout-shift",s);if(a){t=sB(e,n);let r=()=>{s(a.takeRecords()),t(!0)};return sF(r),r}};/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */let sz=-1;const sW=()=>"hidden"!==sO.document.visibilityState||sO.document.prerendering?1/0:0,s$=()=>{sF(({timeStamp:e})=>{sz=e},!0)},sH=()=>(sz<0&&(// If the document is hidden when this code runs, assume it was hidden
    // since navigation start. This isn't a perfect heuristic, but it's the
    // best we can do until an API is available to support querying past
    // visibilityState.
    sz=sW(),s$()),{get firstHiddenTime(){return sz}}),sV=e=>{let t;let n=sH(),r=sP("FID"),i=e=>{// Only report if the page wasn't hidden prior to the first input.
e.startTime<n.firstHiddenTime&&(r.value=e.processingStart-e.startTime,r.entries.push(e),t(!0))},s=e=>{e.forEach(i)},a=sY("first-input",s);t=sB(e,r),a&&sF(()=>{s(a.takeRecords()),a.disconnect()},!0)},sZ={},sq=e=>{let t;let n=sH(),r=sP("LCP"),i=e=>{let i=e[e.length-1];if(i){// The startTime attribute returns the value of the renderTime if it is
// not 0, and the value of the loadTime otherwise. The activationStart
// reference is used because LCP should be relative to page activation
// rather than navigation start if the page was prerendered.
let e=Math.max(i.startTime-sG(),0);// Only report if the page wasn't hidden prior to LCP.
e<n.firstHiddenTime&&(r.value=e,r.entries=[i],t())}},s=sY("largest-contentful-paint",i);if(s){t=sB(e,r);let n=()=>{sZ[r.id]||(i(s.takeRecords()),s.disconnect(),sZ[r.id]=!0,t(!0))};return(// Stop listening after input. Note: while scrolling is an input that
// stop LCP observation, it's unreliable since it can be programmatically
// generated. See: https://github.com/GoogleChrome/web-vitals/issues/75
["keydown","click"].forEach(e=>{addEventListener(e,n,{once:!0,capture:!0})}),sF(n,!0),n)}};/**
 * Checks if a given value is a valid measurement value.
 */function sJ(e){return"number"==typeof e&&isFinite(e)}/**
 * Helper function to start child on transactions. This function will make sure that the transaction will
 * use the start timestamp of the created child span if it is earlier than the transactions actual
 * start timestamp.
 */function sK(e,{startTimestamp:t,...n}){return t&&e.startTimestamp>t&&(e.startTimestamp=t),e.startChild({startTimestamp:t,...n})}/**
 * Converts from milliseconds to seconds
 * @param time time in ms
 */function sX(e){return e/1e3}function sQ(){// @ts-expect-error we want to make sure all of these are available, even if TS is sure they are
return sO&&sO.addEventListener&&sO.performance}let s0=0,s1={};/** Create performance navigation related spans */function s2(e,t,n,r,i,s){let a=s?t[s]:t[`${n}End`],o=t[`${n}Start`];o&&a&&sK(e,{op:"browser",origin:"auto.browser.browser.metrics",description:i||n,startTimestamp:r+sX(o),endTimestamp:r+sX(a)})}var iM=z("aBUrw");/* eslint-disable max-lines */const s5=["localhost",/^\/(?!\/)/],s3={traceFetch:!0,traceXHR:!0,enableHTTPTimings:!0,// TODO (v8): Remove this property
tracingOrigins:s5,tracePropagationTargets:s5};/** Registers span creators for xhr and fetch requests  */function s6(e){let{traceFetch:t,traceXHR:n,tracePropagationTargets:r,tracingOrigins:i,shouldCreateSpanForRequest:s,enableHTTPTimings:a}={traceFetch:s3.traceFetch,traceXHR:s3.traceXHR,...e},o="function"==typeof s?s:e=>!0,l=e=>/**
 * Test the given string against an array of strings and regexes. By default, string matching is done on a
 * substring-inclusion basis rather than a strict equality basis
 *
 * @param testString The string to test
 * @param patterns The patterns against which to test the string
 * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to
 * count. If false, `testString` will match a string pattern if it contains that pattern.
 * @returns
 */(function(e,t=[],n=!1){return t.some(t=>/**
 * Checks if the given value matches a regex or string
 *
 * @param value The string to test
 * @param pattern Either a regex or a string against which `value` will be matched
 * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match
 * `pattern` if it contains `pattern`. Only applies to string-type patterns.
 */(function(e,t,n=!1){return!!iP(e)&&(iG(t,"RegExp")?t.test(e):!!iP(t)&&(n?e===t:e.includes(t)))})(e,t,n))})(e,r||i||s5),c={};t&&si("fetch",e=>{let t=/**
 * Create and track fetch request spans
 *
 * @returns Span if a span was created, otherwise void.
 */function(e,t,n,r){if(!sC()||!e.fetchData)return;let i=t(e.fetchData.url);if(e.endTimestamp&&i){let t=e.fetchData.__span;if(!t)return;let n=r[t];if(n){if(e.response){// TODO (kmclb) remove this once types PR goes through
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
n.setHttpStatus(e.response.status);let t=e.response&&e.response.headers&&e.response.headers.get("content-length"),r=parseInt(t);r>0&&n.setData("http.response_content_length",r)}else e.error&&n.setStatus("internal_error");n.finish(),// eslint-disable-next-line @typescript-eslint/no-dynamic-delete
delete r[t]}return}let s=i5(),a=s.getScope(),o=s.getClient(),l=a.getSpan(),{method:c,url:u}=e.fetchData,d=i&&l?l.startChild({data:{url:u,type:"fetch","http.method":c},description:`${c} ${u}`,op:"http.client",origin:"auto.http.browser"}):void 0;if(d&&(e.fetchData.__span=d.spanId,r[d.spanId]=d),n(e.fetchData.url)&&o){let t=e.args[0];// In case the user hasn't set the second argument of a fetch call we default it to `{}`.
e.args[1]=e.args[1]||{};// eslint-disable-next-line @typescript-eslint/no-explicit-any
let n=e.args[1];// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
n.headers=/**
 * Adds sentry-trace and baggage headers to the various forms of fetch headers
 */function(e,t,n,r,i){let s=i||n.getSpan(),a=s&&s.transaction,{traceId:o,sampled:l,dsc:c}=n.getPropagationContext(),u=s?s.toTraceparent():sb(o,void 0,l),d=a?a.getDynamicSamplingContext():c||sT(o,t,n),p=sg(d),h="undefined"!=typeof Request&&ij(e,Request)?e.headers:r.headers;if(!h)return{"sentry-trace":u,baggage:p};if("undefined"!=typeof Headers&&ij(h,Headers)){let e=new Headers(h);return e.append("sentry-trace",u),p&&// Its therefore safe to simply push a "baggage" entry, even though there might already be another baggage header.
e.append(sf,p),e}if(Array.isArray(h)){let e=[...h,["sentry-trace",u]];return p&&// Its therefore safe to simply push a "baggage" entry, even though there might already be another baggage header.
e.push([sf,p]),e}{let e="baggage"in h?h.baggage:void 0,t=[];return Array.isArray(e)?t.push(...e):e&&t.push(e),p&&t.push(p),{...h,"sentry-trace":u,baggage:t.length>0?t.join(","):void 0}}}(t,o,a,n,d)}return d}(e,o,l,c);a&&t&&s4(t)}),n&&si("xhr",e=>{let t=/**
 * Create and track xhr request spans
 *
 * @returns Span if a span was created, otherwise void.
 */// eslint-disable-next-line complexity
function(e,t,n,r){let i=e.xhr,s=i&&i[st];if(!sC()||i&&i.__sentry_own_request__||!i||!s)return;let a=t(s.url);// check first if the request has finished and is tracked by an existing span which should now end
if(e.endTimestamp&&a){let e=i.__sentry_xhr_span_id__;if(!e)return;let t=r[e];t&&(t.setHttpStatus(s.status_code),t.finish(),// eslint-disable-next-line @typescript-eslint/no-dynamic-delete
delete r[e]);return}let o=i5(),l=o.getScope(),c=l.getSpan(),u=a&&c?c.startChild({data:{...s.data,type:"xhr","http.method":s.method,url:s.url},description:`${s.method} ${s.url}`,op:"http.client",origin:"auto.http.browser"}):void 0;if(u&&(i.__sentry_xhr_span_id__=u.spanId,r[i.__sentry_xhr_span_id__]=u),i.setRequestHeader&&n(s.url)){if(u){let e=u&&u.transaction,t=e&&e.getDynamicSamplingContext(),n=sg(t);s8(i,u.toTraceparent(),n)}else{let e=o.getClient(),{traceId:t,sampled:n,dsc:r}=l.getPropagationContext(),s=sb(t,void 0,n),a=r||(e?sT(t,e,l):void 0),c=sg(a);s8(i,s,c)}}return u}(e,o,l,c);a&&t&&s4(t)})}/**
 * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,
 * so that when timings hit their per-browser limit they don't need to be removed.
 *
 * @param span A span that has yet to be finished, must contain `url` on data.
 */function s4(e){let t=e.data.url,n=new PerformanceObserver(r=>{let i=r.getEntries();i.forEach(r=>{if("resource"===r.entryType&&"initiatorType"in r&&"string"==typeof r.nextHopProtocol&&("fetch"===r.initiatorType||"xmlhttprequest"===r.initiatorType)&&r.name.endsWith(t)){let t=function(e){let{name:t,version:n}=/**
 * Converts ALPN protocol ids to name and version.
 *
 * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)
 * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol
 */function(e){let t="unknown",n="unknown",r="";for(let i of e){// http/1.1 etc.
if("/"===i){[t,n]=e.split("/");break}// h2, h3 etc.
if(!isNaN(Number(i))){t="h"===r?"http":r,n=e.split(r)[1];break}r+=i}return r===e&&(t=r),{name:t,version:n}}(e.nextHopProtocol),r=[];return(r.push(["network.protocol.version",n],["network.protocol.name",t]),iM.browserPerformanceTimeOrigin)?[...r,["http.request.redirect_start",s9(e.redirectStart)],["http.request.fetch_start",s9(e.fetchStart)],["http.request.domain_lookup_start",s9(e.domainLookupStart)],["http.request.domain_lookup_end",s9(e.domainLookupEnd)],["http.request.connect_start",s9(e.connectStart)],["http.request.secure_connection_start",s9(e.secureConnectionStart)],["http.request.connection_end",s9(e.connectEnd)],["http.request.request_start",s9(e.requestStart)],["http.request.response_start",s9(e.responseStart)],["http.request.response_end",s9(e.responseEnd)]]:r}(r);t.forEach(t=>e.setData(...t)),n.disconnect()}})});n.observe({entryTypes:["resource"]})}function s9(e=0){return((iM.browserPerformanceTimeOrigin||performance.timeOrigin)+e)/1e3}function s8(e,t,n){try{// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.setRequestHeader("sentry-trace",t),n&&// We can therefore simply set a baggage header without checking what was there before
// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
e.setRequestHeader(sf,n)}catch(e){// Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.
}}var iM=z("aBUrw");/** Options for Browser Tracing integration */const s7={...sk,markBackgroundTransactions:!0,routingInstrumentation:/**
 * Default function implementing pageload and navigation transactions
 */function(e,t=!0,n=!0){let r;if(!sO||!sO.location){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("Could not initialize routing instrumentation due to invalid location");return}let i=sO.location.href;t&&(r=e({name:sO.location.pathname,// pageload should always start at timeOrigin (and needs to be in s, not ms)
startTimestamp:iM.browserPerformanceTimeOrigin?iM.browserPerformanceTimeOrigin/1e3:void 0,op:"pageload",origin:"auto.pageload.browser",metadata:{source:"url"}})),n&&si("history",({to:t,from:n})=>{/**
       * This early return is there to account for some cases where a navigation transaction starts right after
       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't
       * create an uneccessary navigation transaction.
       *
       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also
       * only be caused in certain development environments where the usage of a hot module reloader is causing
       * errors.
       */if(void 0===n&&i&&-1!==i.indexOf(t)){i=void 0;return}n!==t&&(i=void 0,r&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Finishing current transaction with op: ${r.op}`),// If there's an open transaction on the scope, we need to finish it before creating an new one.
r.finish()),r=e({name:sO.location.pathname,op:"navigation",origin:"auto.navigation.browser",metadata:{source:"url"}}))})},startTransactionOnLocationChange:!0,startTransactionOnPageLoad:!0,enableLongTask:!0,_experiments:{},...s3};/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 */class ae{// This class currently doesn't have a static `id` field like the other integration classes, because it prevented
// @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.
// TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all
// integrations.
/** Browser Tracing integration options *//**
   * @inheritDoc
   */constructor(e){this.name="BrowserTracing",this._hasSetTracePropagationTargets=!1,/**
 * Adds tracing extensions to the global hub.
 */function(){let e=i1();e.__SENTRY__&&(e.__SENTRY__.extensions=e.__SENTRY__.extensions||{},e.__SENTRY__.extensions.startTransaction||(e.__SENTRY__.extensions.startTransaction=sA),e.__SENTRY__.extensions.traceHeaders||(e.__SENTRY__.extensions.traceHeaders=sN),sp||(sp=!0,si("error",sh),si("unhandledrejection",sh)))}(),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(this._hasSetTracePropagationTargets=!!(e&&// eslint-disable-next-line deprecation/deprecation
(e.tracePropagationTargets||e.tracingOrigins))),this.options={...s7,...e},void 0!==this.options._experiments.enableLongTask&&(this.options.enableLongTask=this.options._experiments.enableLongTask),e&&!e.tracePropagationTargets&&e.tracingOrigins&&(this.options.tracePropagationTargets=e.tracingOrigins),this._collectWebVitals=/**
 * Start tracking web vitals
 *
 * @returns A function that forces web vitals collection
 */function(){let e=sQ();if(e&&iM.browserPerformanceTimeOrigin){e.mark&&sO.performance.mark("sentry-tracing-init"),sV(e=>{let t=e.entries.pop();if(!t)return;let n=sX(iM.browserPerformanceTimeOrigin),r=sX(t.startTime);("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding FID"),s1.fid={value:e.value,unit:"millisecond"},s1["mark.fid"]={value:n+r,unit:"second"}});let t=sj(e=>{let t=e.entries.pop();t&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding CLS"),s1.cls={value:e.value,unit:""},f=t)}),n=sq(e=>{let t=e.entries.pop();t&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding LCP"),s1.lcp={value:e.value,unit:"millisecond"},h=t)});return()=>{t&&t(),n&&n()}}return()=>void 0}(),this.options.enableLongTask&&sY("longtask",e=>{for(let t of e){let e=sd();if(!e)return;let n=sX(iM.browserPerformanceTimeOrigin+t.startTime),r=sX(t.duration);e.startChild({description:"Main UI thread blocked",op:"ui.long-task",origin:"auto.ui.browser.metrics",startTimestamp:n,endTimestamp:n+r})}}),this.options._experiments.enableInteractions&&sY("event",e=>{for(let t of e){let e=sd();if(!e)return;if("click"===t.name){let n=sX(iM.browserPerformanceTimeOrigin+t.startTime),r=sX(t.duration);e.startChild({description:iW(t.target),op:`ui.interaction.${t.name}`,origin:"auto.ui.browser.metrics",startTimestamp:n,endTimestamp:n+r})}}},{durationThreshold:0})}/**
   * @inheritDoc
   */setupOnce(e,t){this._getCurrentHub=t;let n=t(),r=n.getClient(),i=r&&r.getOptions(),{routingInstrumentation:s,startTransactionOnLocationChange:a,startTransactionOnPageLoad:o,markBackgroundTransactions:l,traceFetch:c,traceXHR:u,shouldCreateSpanForRequest:d,enableHTTPTimings:p,_experiments:h}=this.options,f=i&&i.tracePropagationTargets,_=f||this.options.tracePropagationTargets;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&this._hasSetTracePropagationTargets&&f&&iU.warn("[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used."),s(e=>{let n=this._createRouteTransaction(e);return this.options._experiments.onStartRouteTransaction&&this.options._experiments.onStartRouteTransaction(n,e,t),n},o,a),l&&(sO&&sO.document?sO.document.addEventListener("visibilitychange",()=>{let e=sd();if(sO.document.hidden&&e){let t="cancelled";("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Transaction: ${t} -> since tab moved to the background, op: ${e.op}`),e.status||e.setStatus(t),e.setTag("visibilitychange","document.hidden"),e.finish()}}):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn("[Tracing] Could not set up background tab detection due to lack of global document")),h.enableInteractions&&this._registerInteractionListener(),s6({traceFetch:c,traceXHR:u,tracePropagationTargets:_,shouldCreateSpanForRequest:d,enableHTTPTimings:p})}/** Create routing idle transaction. */_createRouteTransaction(e){if(!this._getCurrentHub){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Did not create ${e.op} transaction because _getCurrentHub is invalid.`);return}let t=this._getCurrentHub(),{beforeNavigate:n,idleTimeout:r,finalTimeout:i,heartbeatInterval:s}=this.options,a="pageload"===e.op,o=a?at("sentry-trace"):"",l=a?at("baggage"):"",{traceparentData:c,dynamicSamplingContext:u,propagationContext:d}=/**
 * Create tracing context from incoming headers.
 */function(e,t){let n=/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */function(e){let t;if(!e)return;let n=e.match(sS);if(n)return"1"===n[3]?t=!0:"0"===n[3]&&(t=!1),{traceId:n[1],parentSampled:t,parentSpanId:n[2]}}(e),r=/**
 * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the "sentry-" prefixed values
 * from it.
 *
 * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.
 * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.
 */function(e){if(!iP(e)&&!Array.isArray(e))return;// Intermediary object to store baggage key value pairs of incoming baggage headers on.
// It is later used to read Sentry-DSC-values from.
let t={};if(Array.isArray(e))t=e.reduce((e,t)=>{let n=sy(t);return{...e,...n}},{});else{// Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but
// this is how we choose to handle it)
if(!e)return;t=sy(e)}// Read all "sentry-" prefixed values out of the baggage object and put it onto a dynamic sampling context object.
let n=Object.entries(t).reduce((e,[t,n])=>{if(t.match(sm)){let r=t.slice(s_.length);e[r]=n}return e},{});return(// Only return a dynamic sampling context object if there are keys in it.
// A keyless object means there were no sentry values on the header, which means that there is no DSC.
Object.keys(n).length>0?n:void 0)}(t),{traceId:i,parentSpanId:s,parentSampled:a}=n||{},o={traceId:i||iZ(),spanId:iZ().substring(16),sampled:a};return s&&(o.parentSpanId=s),r&&(o.dsc=r),{traceparentData:n,dynamicSamplingContext:r,propagationContext:o}}(o,l),p={...e,...c,metadata:{...e.metadata,dynamicSamplingContext:c&&!u?{}:u},trimEnd:!0},_="function"==typeof n?n(p):p,m=void 0===_?{...p,sampled:!1}:_;// If `beforeNavigate` set a custom name, record that fact
m.metadata=m.name!==p.name?{...m.metadata,source:"custom"}:m.metadata,this._latestRouteName=m.name,this._latestRouteSource=m.metadata&&m.metadata.source,!1===m.sampled&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Will not send ${m.op} transaction because of beforeNavigate.`),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Tracing] Starting ${m.op} transaction on scope`);let{location:g}=sO,y=sD(t,m,r,i,!0,{location:g},s),S=t.getScope();return a&&c?S.setPropagationContext(d):// created idle transaction.
S.setPropagationContext({traceId:y.traceId,spanId:y.spanId,parentSpanId:y.parentSpanId,sampled:y.sampled}),y.registerBeforeFinishCallback(e=>{this._collectWebVitals(),/** Add performance related spans to a transaction */function(e){let t,n;let r=sQ();if(!r||!sO.performance.getEntries||!iM.browserPerformanceTimeOrigin)return;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Tracing] Adding & adjusting spans using Performance API");let i=sX(iM.browserPerformanceTimeOrigin),s=r.getEntries();// Measurements are only available for pageload transactions
if(// eslint-disable-next-line @typescript-eslint/no-explicit-any
s.slice(s0).forEach(r=>{let s=sX(r.startTime),a=sX(r.duration);if("navigation"!==e.op||!(i+s<e.startTimestamp))switch(r.entryType){case"navigation":["unloadEvent","redirect","domContentLoadedEvent","loadEvent","connect"].forEach(t=>{s2(e,r,t,i)}),s2(e,r,"secureConnection",i,"TLS/SSL","connectEnd"),s2(e,r,"fetch",i,"cache","domainLookupStart"),s2(e,r,"domainLookup",i,"DNS"),sK(e,{op:"browser",origin:"auto.browser.browser.metrics",description:"request",startTimestamp:i+sX(r.requestStart),endTimestamp:i+sX(r.responseEnd)}),sK(e,{op:"browser",origin:"auto.browser.browser.metrics",description:"response",startTimestamp:i+sX(r.responseStart),endTimestamp:i+sX(r.responseEnd)}),t=i+sX(r.responseStart),n=i+sX(r.requestStart);break;case"mark":case"paint":case"measure":{/** Create measure related spans */(function(e,t,n,r,i){let s=i+n;sK(e,{description:t.name,endTimestamp:s+r,op:t.entryType,origin:"auto.resource.browser.metrics",startTimestamp:s})})(e,r,s,a,i);// capture web vitals
let t=sH(),n=r.startTime<t.firstHiddenTime;"first-paint"===r.name&&n&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding FP"),s1.fp={value:r.startTime,unit:"millisecond"}),"first-contentful-paint"===r.name&&n&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding FCP"),s1.fcp={value:r.startTime,unit:"millisecond"});break}case"resource":{let t=r.name.replace(sO.location.origin,"");/** Create resource-related spans */(function(e,t,n,r,i,s){// we already instrument based on fetch and xhr, so we don't need to
// duplicate spans here.
if("xmlhttprequest"===t.initiatorType||"fetch"===t.initiatorType)return;// eslint-disable-next-line @typescript-eslint/no-explicit-any
let a={};"transferSize"in t&&(a["http.response_transfer_size"]=t.transferSize),"encodedBodySize"in t&&(a["http.response_content_length"]=t.encodedBodySize),"decodedBodySize"in t&&(a["http.decoded_response_content_length"]=t.decodedBodySize),"renderBlockingStatus"in t&&(a["resource.render_blocking_status"]=t.renderBlockingStatus);let o=s+r;sK(e,{description:n,endTimestamp:o+i,op:t.initiatorType?`resource.${t.initiatorType}`:"resource.other",origin:"auto.resource.browser.metrics",startTimestamp:o,data:a})})(e,r,t,s,a,i)}}}),s0=Math.max(s.length-1,0),/**
 * Capture the information of the user agent.
 */function(e){let t=sO.navigator;if(!t)return;// track network connectivity
let n=t.connection;n&&(n.effectiveType&&e.setTag("effectiveConnectionType",n.effectiveType),n.type&&e.setTag("connectionType",n.type),sJ(n.rtt)&&(s1["connection.rtt"]={value:n.rtt,unit:"millisecond"})),sJ(t.deviceMemory)&&e.setTag("deviceMemory",`${t.deviceMemory} GB`),sJ(t.hardwareConcurrency)&&e.setTag("hardwareConcurrency",String(t.hardwareConcurrency))}(e),"pageload"===e.op){"number"==typeof t&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding TTFB"),s1.ttfb={value:(t-e.startTimestamp)*1e3,unit:"millisecond"},"number"==typeof n&&n<=t&&// This is the time between the start of the request and the start of the response in milliseconds.
(s1["ttfb.requestTime"]={value:(t-n)*1e3,unit:"millisecond"})),["fcp","fp","lcp"].forEach(t=>{if(!s1[t]||i>=e.startTimestamp)return;// The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.
// Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need
// to be adjusted to be relative to transaction.startTimestamp.
let n=s1[t].value,r=i+sX(n),s=Math.abs((r-e.startTimestamp)*1e3),a=s-n;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log(`[Measurements] Normalized ${t} from ${n} to ${s} (${a})`),s1[t].value=s});let r=s1["mark.fid"];r&&s1.fid&&(sK(e,{description:"first input delay",endTimestamp:r.value+sX(s1.fid.value),op:"ui.action",origin:"auto.ui.browser.metrics",startTimestamp:r.value}),// Delete mark.fid as we don't want it to be part of final payload
delete s1["mark.fid"]),"fcp"in s1||delete s1.cls,Object.keys(s1).forEach(t=>{e.setMeasurement(t,s1[t].value,s1[t].unit)}),h&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding LCP Data"),h.element&&e.setTag("lcp.element",iW(h.element)),h.id&&e.setTag("lcp.id",h.id),h.url&&e.setTag("lcp.url",h.url.trim().slice(0,200)),e.setTag("lcp.size",h.size)),f&&f.sources&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.log("[Measurements] Adding CLS Data"),f.sources.forEach((t,n)=>e.setTag(`cls.source.${n+1}`,iW(t.node))))}h=void 0,f=void 0,s1={}}(e)}),y}/** Start listener for interaction transactions */_registerInteractionListener(){let e;let t=()=>{let{idleTimeout:t,finalTimeout:n,heartbeatInterval:r}=this.options,i="ui.action.click",s=sd();if(s&&s.op&&["navigation","pageload"].includes(s.op)){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Did not create ${i} transaction because a pageload or navigation transaction is in progress.`);return}if(e&&(e.setFinishReason("interactionInterrupted"),e.finish(),e=void 0),!this._getCurrentHub){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Did not create ${i} transaction because _getCurrentHub is invalid.`);return}if(!this._latestRouteName){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&iU.warn(`[Tracing] Did not create ${i} transaction because _latestRouteName is missing.`);return}let a=this._getCurrentHub(),{location:o}=sO,l={name:this._latestRouteName,op:i,trimEnd:!0,metadata:{source:this._latestRouteSource||"url"}};e=sD(a,l,t,n,!0,{location:o},r)};["click"].forEach(e=>{addEventListener(e,t,{once:!1,capture:!0})})}}/** Returns the value of a meta tag */function at(e){var t;// Can't specify generic to `getDomElement` because tracing can be used
// in a variety of environments, have to disable `no-unsafe-member-access`
// as a result.
let n=(t=`meta[name=${e}]`,iz.document&&iz.document.querySelector?iz.document.querySelector(t):null);// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
return n?n.getAttribute("content"):void 0}var ej=z("37cNF"),ec=z("ljiYl"),an=z("3z36P");function ar(e,t){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).info(`[Offline]: ${e}`,t)}var ej=z("37cNF");// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being
// modified and simplified: https://github.com/jakearchibald/idb-keyval
//
// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca
// Original licence:
// Copyright 2016, Jake Archibald
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
function ai(e){return new Promise((t,n)=>{// @ts-expect-error - file size hacks
e.oncomplete=e.onsuccess=()=>t(e.result),// @ts-expect-error - file size hacks
e.onabort=e.onerror=()=>n(e.error)})}function as(e){return ai(e.getAllKeys())}function aa(e){let t;// Lazily create the store only when it's needed
function n(){return void 0==t&&(t=/** Create or open an IndexedDb store */function(e,t){let n=indexedDB.open(e);n.onupgradeneeded=()=>n.result.createObjectStore(t);let r=ai(n);return e=>r.then(n=>e(n.transaction(t,"readwrite").objectStore(t)))}(e.dbName||"sentry-offline",e.storeName||"queue")),t}return{insert:async t=>{try{var r,i;let s=await (0,ej.serializeEnvelope)(t,e.textEncoder);await (r=n(),i=e.maxQueueSize||30,r(e=>as(e).then(t=>{if(!(t.length>=i))return(// We insert with an incremented key so that the entries are popped in order
    e.put(s,Math.max(...t,0)+1),ai(e.transaction))})))}catch(e){//
}},pop:async()=>{try{let t=await n()(e=>as(e).then(t=>{if(0!==t.length)return ai(e.get(t[0])).then(n=>(e.delete(t[0]),ai(e.transaction).then(()=>n)))}));if(t)return(0,ej.parseEnvelope)(t,e.textEncoder||new TextEncoder,e.textDecoder||new TextDecoder)}catch(e){//
}}}}/**
 * Creates a transport that uses IndexedDb to store events when offline.
 */function ao(e){var t;return t=t=>{let n;let r=e(t),i=t.createStore?t.createStore(t):void 0,s=5e3;function a(e){i&&(n&&clearTimeout(n),"number"!=typeof(n=setTimeout(async()=>{n=void 0;let e=await i.pop();e&&(ar("Attempting to send previously queued event"),l(e).catch(e=>{ar("Failed to retry sending",e)}))},e))&&n.unref&&n.unref())}function o(){n||(a(s),s=Math.min(2*s,36e5))}async function l(e){try{let t=await r.send(e),n=100;if(t){// If there's a retry-after header, use that as the next delay.
if(t.headers&&t.headers["retry-after"])n=(0,an.parseRetryAfterHeader)(t.headers["retry-after"]);else if((t.statusCode||0)>=400)return t}return a(n),s=5e3,t}catch(r){var n;if(i&&await (n=s,// We don't queue Session Replay envelopes because they are:
// - Ordered and Replay relies on the response status to know when they're successfully sent.
// - Likely to fill the queue quickly and block other events from being sent.
// We also want to drop client reports because they can be generated when we retry sending events while offline.
!(0,ej.envelopeContainsItemType)(e,["replay_event","replay_recording","client_report"])&&(!t.shouldStore||t.shouldStore(e,r,n))))return await i.insert(e),o(),ar("Error sending. Event queued",r),{};throw r}}return t.flushAtStartup&&o(),{send:l,flush:e=>r.flush(e)}},e=>t({...e,createStore:aa})}var eu=z("fSbgy"),ec=z("ljiYl"),eb=z("9jSUf"),eX=z("lJotG"),al=z("2ZW7W"),eu=z("fSbgy"),e_=z("lVAot"),ej=z("37cNF"),eH=z("3dCyu"),ec=z("ljiYl"),eb=z("9jSUf"),eX=z("lJotG");// Use 0 as main thread id which is identical to threadId in node:worker_threads
// where main logs 0 and workers seem to log in increments of 1
const ac=String(0);// Machine properties (eval only once)
let au="",ad="",ap="",ah=eX.WINDOW.navigator&&eX.WINDOW.navigator.userAgent||"",af="";const a_=eX.WINDOW.navigator&&eX.WINDOW.navigator.language||eX.WINDOW.navigator&&eX.WINDOW.navigator.languages&&eX.WINDOW.navigator.languages[0]||"",am=eX.WINDOW.navigator&&eX.WINDOW.navigator.userAgentData;"object"==typeof am&&null!==am&&"getHighEntropyValues"in am&&am.getHighEntropyValues(["architecture","model","platform","platformVersion","fullVersionList"]).then(e=>{if(au=e.platform||"",ap=e.architecture||"",af=e.model||"",ad=e.platformVersion||"",e.fullVersionList&&e.fullVersionList.length>0){let t=e.fullVersionList[e.fullVersionList.length-1];ah=`${t.brand} ${t.version}`}}).catch(e=>void 0);const ag=new WeakMap,ay=new Map;// Keep a flag value to avoid re-initializing the profiler constructor. If it fails
// once, it will always fail and this allows us to early return.
let aS=!1;/**
 * Safety wrapper for startTransaction for the unlikely case that transaction starts before tracing is imported -
 * if that happens we want to avoid throwing an error from profiling code.
 * see https://github.com/getsentry/sentry-javascript/issues/4731.
 *
 * @experimental
 */function ab(e){return e?av(e):(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Transaction is undefined, skipping profiling"),e)}/**
 * Wraps startTransaction and stopTransaction with profiling related logic.
 * startProfiling is called after the call to startTransaction in order to avoid our own code from
 * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.
 */function av(e){let t;// Feature support check first
let n=eX.WINDOW.Profiler;if("function"!=typeof n)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Profiling is not supported by this browser, Profiler interface missing on window object."),e;// If constructor failed once, it will always fail, so we can early return.
if(aS)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Profiling has been disabled for the duration of the current user session."),e;let r=(0,eu.getCurrentHub)().getClient(),i=r&&r.getOptions();if(!i)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Profiling disabled, no options found."),e;// @ts-expect-error profilesSampleRate is not part of the browser options yet
let s=i.profilesSampleRate;// Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The
// only valid values are booleans or numbers between 0 and 1.)
if(!// we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
("number"!=typeof s&&"boolean"!=typeof s||"number"==typeof s&&isNaN(s)?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn(`[Profiling] Invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(s)} of type ${JSON.stringify(typeof s)}.`),!1):!0===s||!1===s||!(s<0)&&!(s>1)||(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn(`[Profiling] Invalid sample rate. Sample rate must be between 0 and 1. Got ${s}.`),!1)))return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn("[Profiling] Discarding profile because of invalid sample rate."),e;// if the function returned 0 (or false), or if `profileSampleRate` is 0, it's a sign the profile should be dropped
if(!s)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Discarding profile because a negative sampling decision was inherited or profileSampleRate is set to 0"),e;// Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
// a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
let a=!0===s||Math.random()<s;// Check if we should sample this profile
if(!a)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] Discarding profile because it's not included in the random sample (sampling rate = ${Number(s)})`),e;// Attempt to initialize the profiler constructor, if it fails, we disable profiling for the current user session.
// This is likely due to a missing 'Document-Policy': 'js-profiling' header. We do not want to throw an error if this happens
// as we risk breaking the user's application, so just disable profiling and log an error.
try{t=new n({sampleInterval:10,maxBufferSize:Math.floor(3e3)})}catch(e){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&((0,ec.logger).log("[Profiling] Failed to initialize the Profiling constructor, this is likely due to a missing 'Document-Policy': 'js-profiling' header."),(0,ec.logger).log("[Profiling] Disabling profiling for current user session.")),aS=!0}// We failed to construct the profiler, fallback to original transaction - there is no need to log
// anything as we already did that in the try/catch block.
if(!t)return e;("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] started profiling transaction: ${e.name||e.description}`);// We create "unique" transaction names to avoid concurrent transactions with same names
// from being ignored by the profiler. From here on, only this transaction name should be used when
// calling the profiler methods. Note: we log the original name to the user to avoid confusion.
let o=(0,eb.uuid4)();/**
   * Idempotent handler for profile stop
   */async function l(){// Check if the profile exists and return it the behavior has to be idempotent as users may call transaction.finish multiple times.
if(!e||!t)return null;// This is temporary - we will use the collected span data to evaluate
// if deferring txn.finish until profiler resolves is a viable approach.
let n=e.startChild({description:"profiler.stop",op:"profiler",origin:"auto.profiler.browser"});return t.stop().then(t=>((n.finish(),c&&((0,eX.WINDOW).clearTimeout(c),c=void 0),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] stopped profiling of transaction: ${e.name||e.description}`),t)?/**
 *
 */function(e,t){if(ay.set(e,t),ay.size>30){let e=ay.keys().next().value;ay.delete(e)}}(o,t):("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] profiler returned null profile for: ${e.name||e.description}`,"this may indicate an overlapping transaction or a call to stopProfiling with a profile title that was never started"),null)).catch(e=>(n.finish(),("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] error while stopping profiler:",e),null))}// Enqueue a timeout to prevent profiles from running over max duration.
let c=(0,eX.WINDOW).setTimeout(()=>{("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] max profile duration elapsed, stopping profiling for:",e.name||e.description),// If the timeout exceeds, we want to stop profiling, but not finish the transaction
l()},3e4),u=e.finish.bind(e);return e.finish=/**
   * Wraps startTransaction and stopTransaction with profiling related logic.
   * startProfiling is called after the call to startTransaction in order to avoid our own code from
   * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.
   */function(){return e?(// onProfileHandler should always return the same profile even if this is called multiple times.
// Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.
l().then(()=>{e.setContext("profile",{profile_id:o}),u()},()=>{// If onProfileHandler fails, we still want to call the original finish method.
u()}),e):u()},e}var ec=z("ljiYl");/**
 * Browser profiling integration. Stores any event that has contexts["profile"]["profile_id"]
 * This exists because we do not want to await async profiler.stop calls as transaction.finish is called
 * in a synchronous context. Instead, we handle sending the profile async from the promise callback and
 * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the
 * integration less reliable as we might be dropping profiles when the cache is full.
 *
 * @experimental
 */class aE{static __initStatic(){this.id="BrowserProfilingIntegration"}constructor(){this.name=aE.id}/**
   * @inheritDoc
   */setupOnce(e,t){this.getCurrentHub=t;let n=this.getCurrentHub().getClient();n&&"function"==typeof n.on?(n.on("startTransaction",e=>{av(e)}),n.on("beforeEnvelope",e=>{// if not profiles are in queue, there is nothing to add to the envelope.
if(!ay.size)return;let t=/**
 * Finds transactions with profile_id context in the envelope
 * @param envelope
 * @returns
 */function(e){let t=[];return(0,ej.forEachEnvelopeItem)(e,(e,n)=>{if("transaction"===n)for(let n=1;n<e.length;n++){let r=e[n];r&&r.contexts&&r.contexts.profile&&r.contexts.profile.profile_id&&t.push(e[n])}}),t}(e);if(!t.length)return;let n=[];for(let e of t){var r,i,s;let t=e&&e.contexts,a=t&&t.profile&&t.profile.profile_id;if(!a){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] cannot find profile for a transaction without a profile context");continue}t&&t.profile&&delete t.profile;let o=ay.get(a);if(!o){("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] Could not retrieve profile for transaction: ${a}`);continue}ay.delete(a);let l=(r=a,i=o,s=e,(i.samples.length<2?(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&// they are not seeing any profiling data and we cant avoid the back and forth
// of asking them to provide us with a dump of the profile data.
(0,ec.logger).log("[Profiling] Discarding profile because it contains less than 2 samples"),1):!i.frames.length&&(("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log("[Profiling] Discarding profile because it contains no frames"),1))?null:/**
 * Creates a profiling event envelope from a Sentry event. If profile does not pass
 * validation, returns null.
 * @param event
 * @param dsn
 * @param metadata
 * @param tunnel
 * @returns {EventEnvelope | null}
 *//**
 * Creates a profiling event envelope from a Sentry event.
 */function(e,t,n){if("transaction"!==e.type)// we type guard this behavior with isProfiledTransactionEvent.
throw TypeError("Profiling events may only be attached to transactions, this should never occur.");if(null==t)throw TypeError(`Cannot construct profiling event envelope without a valid profile. Got ${t} instead.`);let r=// Profile is marked as optional because it is deleted from the metadata
// by the integration before the event is processed by other integrations.
function(e){let t=e&&e.contexts&&e.contexts.trace&&e.contexts.trace.trace_id;return("string"==typeof t&&32!==t.length&&("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).log(`[Profiling] Invalid traceId: ${t} on profiled event`),"string"!=typeof t)?"":t}(e),i="thread_metadata"in t?t:/**
 * Converts a JSSelfProfile to a our sampled format.
 * Does not currently perform stack indexing.
 */function(e){let t;let n=0,r={samples:[],stacks:[],frames:[],thread_metadata:{[ac]:{name:"main"}}};if(!e.samples.length)return r;// We assert samples.length > 0 above and timestamp should always be present
let i=e.samples[0].timestamp,s="number"==typeof performance.timeOrigin?performance.timeOrigin:e_.browserPerformanceTimeOrigin||0,a=s-(e_.browserPerformanceTimeOrigin||s);for(let s=0;s<e.samples.length;s++){let o=e.samples[s];// If sample has no stack, add an empty sample
if(void 0===o.stackId){void 0===t&&(t=n,r.stacks[t]=[],n++),r.samples[s]={// convert ms timestamp to ns
elapsed_since_start_ns:((o.timestamp+a-i)*1e6).toFixed(0),stack_id:t,thread_id:ac};continue}let l=e.stacks[o.stackId],c=[];for(;l;){c.push(l.frameId);let t=e.frames[l.frameId];void 0===r.frames[l.frameId]&&(r.frames[l.frameId]={function:t.name,abs_path:"number"==typeof t.resourceId?e.resources[t.resourceId]:void 0,lineno:t.line,colno:t.column}),l=void 0===l.parentId?void 0:e.stacks[l.parentId]}let u={// convert ms timestamp to ns
elapsed_since_start_ns:((o.timestamp+a-i)*1e6).toFixed(0),stack_id:n,thread_id:ac};r.stacks[n]=c,r.samples[s]=u,n++}return r}(t),s="number"==typeof e.start_timestamp?1e3*e.start_timestamp:Date.now(),a="number"==typeof e.timestamp?1e3*e.timestamp:Date.now(),o={event_id:n,timestamp:new Date(s).toISOString(),platform:"javascript",version:"1",release:e.release||"",environment:e.environment||al.DEFAULT_ENVIRONMENT,runtime:{name:"javascript",version:eX.WINDOW.navigator.userAgent},os:{name:au,version:ad,build_number:ah},device:{locale:a_,model:af,manufacturer:ah,architecture:ap,is_emulator:!1},debug_meta:{images:/**
 * Applies debug meta data to an event from a list of paths to resources (sourcemaps)
 */function(e){let t;let n=eH.GLOBAL_OBJ._sentryDebugIds;if(!n)return[];let r=(0,eu.getCurrentHub)();if(!r)return[];let i=r.getClient();if(!i)return[];let s=i.getOptions();if(!s)return[];let a=s.stackParser;if(!a)return[];let o=ag.get(a);o?t=o:(t=new Map,ag.set(a,t));// Build a map of filename -> debug_id
let l=Object.keys(n).reduce((e,r)=>{let i;let s=t.get(r);s?i=s:(i=a(r),t.set(r,i));for(let t=i.length-1;t>=0;t--){let s=i[t],a=s&&s.filename;if(s&&a){e[a]=n[r];break}}return e},{}),c=[];for(let t of e)t&&l[t]&&c.push({type:"sourcemap",code_file:t,debug_id:l[t]});return c}(t.resources)},profile:i,transactions:[{name:e.transaction||"",id:e.event_id||(0,eb.uuid4)(),trace_id:r,active_thread_id:ac,relative_start_ns:"0",relative_end_ns:((a-s)*1e6).toFixed(0)}]};return o}(s,i,r));l&&n.push(l)}!/**
 * Adds items to envelope if they are not already present - mutates the envelope.
 * @param envelope
 */function(e,t){if(t.length)for(let n of t)e[1].push([{type:"profile"},n])}(e,n)})):(0,ec.logger).warn("[Profiling] Client does not support hooks, profiling will be disabled")}}aE.__initStatic(),z("jrBuy"),z("fa62i"),z("5DHQv"),z("9zhFP"),z("49tkP"),z("Yr1pj");let aT={};eX.WINDOW.Sentry&&eX.WINDOW.Sentry.Integrations&&(aT=eX.WINDOW.Sentry.Integrations);const aw={...aT,...eY,...e0};var eQ=z("7qvsU"),eJ=z("kLkMW");/**
 * Inits the React SDK
 */function ak(e){let t={_metadata:{},...e};t._metadata.sdk=t._metadata.sdk||{name:"sentry.javascript.react",packages:[{name:"npm:@sentry/react",version:eJ.SDK_VERSION}],version:eJ.SDK_VERSION},(0,eQ.init)(t)}var eu=z("fSbgy"),e_=z("lVAot"),ax=z("Hamgg"),aI=z("gZRxI");const aC="ui.react.render",aR="ui.react.mount",aN="/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx";/**
 * The Profiler component leverages Sentry's Tracing integration to generate
 * spans based on component lifecycles.
 */class aA extends aI.Component{/**
   * The span of the mount activity
   * Made protected for the React Native SDK to access
   *//**
   * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate
   */// eslint-disable-next-line @typescript-eslint/member-ordering
static __initStatic(){this.defaultProps={disabled:!1,includeRender:!0,includeUpdates:!0}}constructor(e){super(e);let{name:t,disabled:n=!1}=this.props;if(n)return;let r=aB();r&&(this._mountSpan=r.startChild({description:`<${t}>`,op:aR,origin:"auto.ui.react.profiler"}))}// If a component mounted, we can finish the mount activity.
componentDidMount(){this._mountSpan&&this._mountSpan.finish()}shouldComponentUpdate({updateProps:e,includeUpdates:t=!0}){// Only generate an update span if includeUpdates is true, if there is a valid mountSpan,
// and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.
// We are just trying to give baseline clues for further investigation.
if(t&&this._mountSpan&&e!==this.props.updateProps){// See what props haved changed between the previous props, and the current props. This is
// set as data on the span. We just store the prop keys as the values could be potenially very large.
let t=Object.keys(e).filter(t=>e[t]!==this.props.updateProps[t]);if(t.length>0){let e=(0,e_.timestampInSeconds)();this._updateSpan=this._mountSpan.startChild({data:{changedProps:t},description:`<${this.props.name}>`,op:"ui.react.update",origin:"auto.ui.react.profiler",startTimestamp:e})}}return!0}componentDidUpdate(){this._updateSpan&&(this._updateSpan.finish(),this._updateSpan=void 0)}// If a component is unmounted, we can say it is no longer on the screen.
// This means we can finish the span representing the component render.
componentWillUnmount(){let{name:e,includeRender:t=!0}=this.props;this._mountSpan&&t&&// next activity as a child to the component mount activity.
this._mountSpan.startChild({description:`<${e}>`,endTimestamp:(0,e_.timestampInSeconds)(),op:aC,origin:"auto.ui.react.profiler",startTimestamp:this._mountSpan.endTimestamp})}render(){return this.props.children}}/**
 * withProfiler is a higher order component that wraps a
 * component in a {@link Profiler} component. It is recommended that
 * the higher order component be used over the regular {@link Profiler} component.
 *
 * @param WrappedComponent component that is wrapped by Profiler
 * @param options the {@link ProfilerProps} you can pass into the Profiler
 */function aD(e,t){let n=t&&t.name||e.displayName||e.name||"unknown",r=r=>aI.createElement(aA,{...t,name:n,updateProps:r,__self:this,__source:{fileName:aN,lineNumber:149}},aI.createElement(e,{...r,__self:this,__source:{fileName:aN,lineNumber:150}}));return r.displayName=`profiler(${n})`,/*@__PURE__*/Y(ax)(r,e),r}/**
 *
 * `useProfiler` is a React hook that profiles a React component.
 *
 * Requires React 16.8 or above.
 * @param name displayName of component being profiled
 */function aO(e,t={disabled:!1,hasRenderSpan:!0}){let[n]=aI.useState(()=>{if(t&&t.disabled)return;let n=aB();if(n)return n.startChild({description:`<${e}>`,op:aR,origin:"auto.ui.react.profiler"})});aI.useEffect(()=>(n&&n.finish(),()=>{n&&t.hasRenderSpan&&n.startChild({description:`<${e}>`,endTimestamp:(0,e_.timestampInSeconds)(),op:aC,origin:"auto.ui.react.profiler",startTimestamp:n.endTimestamp})}),[])}/** Grabs active transaction off scope */function aB(e=(0,eu.getCurrentHub)()){if(e){let t=e.getScope();return t.getTransaction()}}aA.__initStatic(),z("9CQuz");var el=z("2vdtW"),eo=z("5X2BG"),eu=z("fSbgy"),em=z("csRh4");const aU={attachReduxState:!0,actionTransformer:e=>e,stateTransformer:e=>e||null};/**
 * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.
 *
 * @param enhancerOptions Options to pass to the enhancer
 */function aM(e){// Note: We return an any type as to not have type conflicts.
let t={...aU,...e};return e=>(n,r)=>(t.attachReduxState&&(0,el.addGlobalEventProcessor)((e,t)=>{try{// @ts-expect-error try catch to reduce bundle size
        void 0===e.type&&"redux"===e.contexts.state.state.type&&(t.attachments=[...t.attachments||[],// @ts-expect-error try catch to reduce bundle size
        {filename:"redux_state.json",data:JSON.stringify(e.contexts.state.state.value)}])}catch(e){// empty
        }return e}),e((e,r)=>{let i=n(e,r);return(0,eo.configureScope)(e=>{/* Action breadcrumbs */let n=t.actionTransformer(r);null!=n&&e.addBreadcrumb({category:"redux.action",data:n,type:"info"});/* Set latest state to scope */let s=t.stateTransformer(i);if(null!=s){let t=(0,eu.getCurrentHub)().getClient(),n=t&&t.getOptions(),r=n&&n.normalizeDepth||3,i={state:{type:"redux",value:s}};(0,em.addNonEnumerableProperty)(i,"__sentry_override_normalization_depth__",3+// 3 layers for `state.value.transformedState`
        r),e.setContext("state",i)}else e.setContext("state",null);/* Allow user to configure scope with latest state */let{configureScopeWithState:a}=t;"function"==typeof a&&a(e,i)}),i},r))}// Many of the types below had to be mocked out to prevent typescript issues
// these types are required for correct functionality.
/**
 * Creates routing instrumentation for React Router v3
 * Works for React Router >= 3.2.0 and < 4.0.0
 *
 * @param history object from the `history` library
 * @param routes a list of all routes, should be
 * @param match `Router.match` utility
 */function aL(e,t,n){return(r,i=!0,s=!0)=>{let a,o;i&&eX.WINDOW&&eX.WINDOW.location&&aG(t,eX.WINDOW.location,n,(e,t="url")=>{a=r({name:o=e,op:"pageload",origin:"auto.pageload.react.reactrouterv3",tags:{"routing.instrumentation":"react-router-v3"},metadata:{source:t}})}),s&&e.listen&&e.listen(e=>{if("PUSH"===e.action||"POP"===e.action){a&&a.finish();let i={"routing.instrumentation":"react-router-v3"};o&&(i.from=o),aG(t,e,n,(e,t="url")=>{a=r({name:o=e,op:"navigation",origin:"auto.navigation.react.reactrouterv3",tags:i,metadata:{source:t}})})}})}}/**
 * Normalize transaction names using `Router.match`
 */function aG(e,t,n,r){let i=t.pathname;n({location:t,routes:e},(e,t,n)=>{if(e||!n)return r(i);let s=/**
 * Generate route name from array of routes
 */function(e){if(!Array.isArray(e)||0===e.length)return"";let t=e.filter(e=>!!e.path),n=-1;for(let e=t.length-1;e>=0;e--){let r=t[e];if(r.path&&r.path.startsWith("/")){n=e;break}}return t.slice(n).filter(({path:e})=>!!e).map(({path:e})=>e).join("")}(n.routes||[]);return 0===s.length||"/*"===s?r(i):r(i=s,"route")})}var eX=(z("lJotG"),z("lJotG")),ax=z("Hamgg"),aI=z("gZRxI");function aP(e,t,n){return aF(e,"react-router-v4",t,n)}function aY(e,t,n){return aF(e,"react-router-v5",t,n)}function aF(e,t,n=[],r){/**
   * Normalizes a transaction name. Returns the new name as well as the
   * source of the transaction.
   *
   * @param pathname The initial pathname we normalize
   */function i(e){if(0===n.length||!r)return[e,"url"];let t=/**
 * Matches a set of routes to a pathname
 * Based on implementation from
 */function e(t,n,r,i=[]){return t.some(t=>{let s=t.path?r(n,t):i.length?i[i.length-1].match// use parent match
:{path:"/",url:"/",params:{},isExact:"/"===n};// use default "root" match
return s&&(i.push({route:t,match:s}),t.routes&&e(t.routes,n,r,i)),!!s}),i}(n,e,r);// eslint-disable-next-line @typescript-eslint/prefer-for-of
for(let e=0;e<t.length;e++)if(t[e].match.isExact)return[t[e].match.path,"route"];return[e,"url"]}let s={"routing.instrumentation":t};return(t,n=!0,r=!0)=>{let a=e&&e.location?e.location.pathname:eX.WINDOW&&eX.WINDOW.location?eX.WINDOW.location.pathname:void 0;if(n&&a){let[e,n]=i(a);_=t({name:e,op:"pageload",origin:"auto.pageload.react.reactrouter",tags:s,metadata:{source:n}})}r&&e.listen&&e.listen((e,n)=>{if(n&&("PUSH"===n||"POP"===n)){_&&_.finish();let[n,r]=i(e.pathname);_=t({name:n,op:"navigation",origin:"auto.navigation.react.reactrouter",tags:s,metadata:{source:r}})}})}}/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */function aj(e){let t=e.displayName||e.name,n=t=>(_&&t&&t.computedMatch&&t.computedMatch.isExact&&_.setName(t.computedMatch.path,"route"),aI.createElement(e,{...t,__self:this,__source:{fileName:"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouter.tsx",lineNumber:174}}));// @ts-expect-error Setting more specific React Component typing for `R` generic above
// will break advanced type inference done by react router params:
// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164
return n.displayName=`sentryRoute(${t})`,/*@__PURE__*/Y(ax)(n,e),n}var eX=z("lJotG"),az=z("70TMV"),ec=z("ljiYl"),ax=z("Hamgg"),aI=z("gZRxI");const aW="/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouterv6.tsx",a$={"routing.instrumentation":"react-router-v6"};// Inspired from Donnie McNeal's solution:
function aH(e,t,n,r,i){return(s,a=!0,o=!0)=>{let l=eX.WINDOW&&eX.WINDOW.location&&eX.WINDOW.location.pathname;a&&l&&(m=s({name:l,op:"pageload",origin:"auto.pageload.react.reactrouterv6",tags:a$,metadata:{source:"url"}})),g=e,y=t,S=n,v=i,b=r,E=s,T=o}}function aV(e,t,n,r=""){if(!e||0===e.length)return[t.pathname,"url"];let i="";if(n)for(let e=0;e<n.length;e++){let s=n[e],a=s.route;if(a){// Early return if index route
if(a.index)return[s.pathname,"route"];let e=a.path;if(e){let n="/"===e[0]||"/"===i[i.length-1]?e:`/${e}`;if(i+=n,r+s.pathname===t.pathname){if(// <Route path="/stores/:storeId/products/:productId" element={<div>Product</div>} />
// We should check against the branch.pathname for the number of / seperators
(0,az.getNumberOfUrlSegments)(i)!==(0,az.getNumberOfUrlSegments)(s.pathname)&&// We should not count wildcard operators in the url segments calculation
"/*"!==i.slice(-2))return[r+n,"route"];return[r+i,"route"]}}}}return[t.pathname,"url"]}function aZ(e,t,n,r){let i=Array.isArray(n)?n:v(t,e,r);m&&i&&m.setName(...aV(t,e,i,r))}function aq(e,t,n,r,i){let s=Array.isArray(r)?r:v(t,e,i);if(T&&("PUSH"===n||"POP"===n)&&s){m&&m.finish();let[n,r]=aV(t,e,s,i);m=E({name:n,op:"navigation",origin:"auto.navigation.react.reactrouterv6",tags:a$,metadata:{source:r}})}}// eslint-disable-next-line @typescript-eslint/no-explicit-any
function aJ(e){if(!g||!y||!S||!b||!v||!E)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn(`reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.
      useEffect: ${g}. useLocation: ${y}. useNavigationType: ${S}.
      createRoutesFromChildren: ${b}. matchRoutes: ${v}. customStartTransaction: ${E}.`),e;let t=!0,n=n=>{let r=y(),i=S();// @ts-expect-error Setting more specific React Component typing for `R` generic above
// will break advanced type inference done by react router params
return g(()=>{let e=b(n.children);t?(aZ(r,e),t=!1):aq(r,e,i)},// when the children change. We only want to start transactions when the location or navigation type change.
[r,i]),aI.createElement(e,{...n,__self:this,__source:{fileName:aW,lineNumber:209}})};// @ts-expect-error Setting more specific React Component typing for `R` generic above
// will break advanced type inference done by react router params
return /*@__PURE__*/Y(ax)(n,e),n}function aK(e){if(!g||!y||!S||!v||!E)return("undefined"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(0,ec.logger).warn("reactRouterV6Instrumentation was unable to wrap `useRoutes` because of one or more missing parameters."),e;let t=!0,n=n=>{let{routes:r,locationArg:i}=n,s=e(r,i),a=y(),o=S(),l="string"==typeof i||i&&i.pathname?i:a;return g(()=>{let e="string"==typeof l?{pathname:l}:l;t?(aZ(e,r),t=!1):aq(e,r,o)},[o,l]),s};// eslint-disable-next-line react/display-name
return(e,t)=>aI.createElement(n,{routes:e,locationArg:t,__self:this,__source:{fileName:aW,lineNumber:266}})}function aX(e){// `opts` for createBrowserHistory and createMemoryHistory are different, but also not relevant for us at the moment.
// `basename` is the only option that is relevant for us, and it is the same for all.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
return function(t,n){let r=e(t,n),i=n&&n.basename;return"POP"===r.state.historyAction&&m&&aZ(r.state.location,t,void 0,i),r.subscribe(e=>{let n=e.location;T&&("PUSH"===e.historyAction||"POP"===e.historyAction)&&m&&aq(n,t,e.historyAction,void 0,i)}),r}}Object.keys(ea).forEach(function(e){"default"===e||"__esModule"===e||es.hasOwnProperty(e)||Object.defineProperty(es,e,{enumerable:!0,get:function(){return ea[e]}})});var aQ=z("e5i1Q");const a0=["PostMessageIO:PluginDisabled","PostMessageIO:InvalidContext","Invalid context, missing board","Plugin disabled on board","chrome-extension:"];es.init({enabled:"local"!==aQ.environment,dsn:aQ.sentryDsn,release:"trello-slack-pup@3793",environment:aQ.environment,integrations:[new ei({depth:5})],beforeBreadcrumb:()=>null,beforeSend(e,t){// returning null will cause an event to not be sent
// let's use that to de-noise our events and drop any events that are
// known to be errors that are hard to avoid i.e. those that are caused
// when navigating forward/back between or away from boards
// it'd be nice to properly catch these but that is too much burden for
// right now and we need our Sentry errors to be high signal to noise ratio
if(window.TrelloPowerUp&&e.exception){let t=window.TrelloPowerUp.PostMessageIO;if(e.exception instanceof t.PluginDisabled||e.exception instanceof t.InvalidContext)return null}if(e.exception){let t=JSON.stringify(e.exception);if(a0.some(e=>-1!==t.indexOf(e)))return null}if(e.extra){let t=JSON.stringify(e.extra);if(a0.some(e=>-1!==t.indexOf(e)))return null}let n=t.originalException;return(// handle CustomEvents which have real Errors buried inside them.
// code was taken from this github thread: https://github.com/getsentry/sentry-javascript/issues/2380
n instanceof window.CustomEvent&&n.detail&&n.detail.reason&&n.detail.reason instanceof Error?(es.withScope(()=>{// pull out the embedded Error object
let e=n.detail.reason;n.detail.reason="<error object captured above>",// capture the rest of the CustomEvent's data as extra
es.setExtras({originalThrownObject:n}),// create a new event out of the real Error, annotated with the other data
es.captureException(e)}),null):e)}}),window.Sentry=es;//# sourceMappingURL=app.41f3d4ad.js.map

//# sourceMappingURL=app.41f3d4ad.js.map
