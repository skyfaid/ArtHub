package services;

import entities.Activite;
import entities.Evenement;
import utils.MyDataBase;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public     class ServiceActivite implements ServiceCrud<Activite> {
    private Connection connection;

    public ServiceActivite() {
        this.connection = MyDataBase.getInstance().getConnection();
    }

  /*  @Override
    public Activite recupererById(int id) throws SQLException {
        String sql = "SELECT * FROM activite WHERE id_activite = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                Activite activite = new Activite();
                activite.setId_activite(resultSet.getInt("id_activite"));
                activite.setNom_act(resultSet.getString("nom_act"));
                activite.setDateDebut(resultSet.getDate("dateDebut"));
                activite.setDateFin(resultSet.getDate("dateFin"));
                activite.setLieu(resultSet.getString("Lieu"));
                activite.setNbre_places(resultSet.getInt("nbre_places"));
                activite.setType_act(resultSet.getString("type_act"));
                return activite;
            }
        }
        return null;
    }*/

    @Override
    public Activite recupererById(int id) throws SQLException {
        return null;
    }

    @Override
    public List<Activite> recuperer(){
        List<Activite> activites = new ArrayList<>();
        String sql = "SELECT * FROM activite";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                LocalDate datedebut = resultSet.getDate("dateDebut") != null ? resultSet.getDate("dateDebut").toLocalDate() : null;
                LocalDate datefin = resultSet.getDate("dateFin") != null ? resultSet.getDate("dateFin").toLocalDate() : null;
                Activite activite = new Activite(
                        resultSet.getInt("id_activite"),
                        resultSet.getString("nom_act"),
                        datedebut,
                        datefin,
                        resultSet.getString("Lieu"),
                        resultSet.getInt("nbre_places"),
                        resultSet.getString("type_act"),
                        resultSet.getString("posterUrl")); // Get the poster URL

                activites.add(activite);
            }
        }catch (SQLException ex)
        {            System.out.println(ex.getMessage());
        }
        return activites;
    }


    @Override
    public void ajouter(Activite activite) throws SQLException {
        // Removed the id_activite as it is auto-generated by the database.
        String sql = "INSERT INTO activite (nom_act, dateDebut, dateFin, Lieu, nbre_places, type_act,posterUrl) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setString(1, activite.getNom_act());
            preparedStatement.setDate(2,  Date.valueOf(activite.getDateDebut()));
            preparedStatement.setDate(3, Date.valueOf(activite.getDateFin()));
            preparedStatement.setString(4, activite.getLieu());
            preparedStatement.setInt(5, activite.getNbre_places());
            preparedStatement.setString(6, activite.getType_act());
            preparedStatement.setString(7, activite.getPosterUrl()); // Set the poster URL

            preparedStatement.executeUpdate();

            // Retrieve the auto-generated key
            try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    activite.setId_activite(generatedKeys.getInt(1)); // This sets the auto-generated ID to the object
                }
            }
        }
    }

    @Override
    public void modifier(Activite entity) throws SQLException {

    }

    @Override
    public void supprimer(int id) throws SQLException {

    }

    @Override
    public List<Evenement> afficherfront() {
        return null;
    }



    public void modifier(String ancienNom,Activite activite) throws SQLException {
        String sql = "UPDATE activite SET nom_act = ?, Lieu = ?, nbre_places = ?, type_act = ?,posterUrl = ? WHERE nom_act = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, activite.getNom_act());
            preparedStatement.setString(2, activite.getLieu());     // Second placeholder
            preparedStatement.setInt(3, activite.getNbre_places()); // Third placeholder
            preparedStatement.setString(4, activite.getType_act()); // Fourth placeholder
           preparedStatement.setString(5, activite.getPosterUrl()); // Fourth placeholder
            preparedStatement.setString(6, ancienNom);  // Old name
            preparedStatement.executeUpdate();
        }catch (SQLException e) {
            System.out.println("Erreur lors de la modification de l'activit√©: " + e.getMessage());
            e.printStackTrace();
    }
    }



    public void supprimer(String nomActivite) throws SQLException {
        String sql = "DELETE FROM activite WHERE nom_act = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, nomActivite);
            preparedStatement.executeUpdate();
        }
    }

}
